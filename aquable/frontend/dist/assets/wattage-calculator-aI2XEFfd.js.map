{"version":3,"file":"wattage-calculator-aI2XEFfd.js","sources":["../../src/utils/wattage-data.ts","../../src/utils/wattage-calculator.ts"],"sourcesContent":["// LED Channel Wattage Data for WRGB Pro II\n// This data maps percentage values to actual wattage output for each channel\n\nexport interface ChannelWattageData {\n  Wattage: number[];\n  Percentage: string[];\n}\n\nexport interface LightWattageData {\n  Red: ChannelWattageData;\n  Green: ChannelWattageData;\n  Blue: ChannelWattageData;\n  White: ChannelWattageData;\n}\n\nexport const WRGB_PRO_II_WATTAGE_DATA: LightWattageData = {\n  \"Red\": {\n    \"Wattage\": [\n      9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30,\n      31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52,\n      53, 54, 55, 56, 57, 58, 59, 60, 61, 62\n    ],\n    \"Percentage\": [\n      \"1%\", \"3%\", \"7%\", \"11%\", \"15%\", \"18%\", \"22%\", \"26%\", \"29%\", \"33%\", \"36%\", \"39%\",\n      \"43%\", \"46%\", \"49%\", \"52%\", \"55%\", \"58%\", \"61%\", \"64%\", \"67%\", \"69%\", \"72%\", \"75%\",\n      \"77%\", \"80%\", \"83%\", \"85%\", \"88%\", \"90%\", \"93%\", \"95%\", \"98%\", \"100%\", \"103%\", \"105%\",\n      \"108%\", \"110%\", \"113%\", \"115%\", \"118%\", \"120%\", \"123%\", \"125%\", \"128%\", \"130%\", \"132%\",\n      \"135%\", \"137%\", \"139%\"\n    ]\n  },\n  \"Green\": {\n    \"Wattage\": [\n      9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30,\n      31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52,\n      53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,\n      74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87\n    ],\n    \"Percentage\": [\n      \"1%\", \"2%\", \"5%\", \"7%\", \"10%\", \"13%\", \"15%\", \"18%\", \"21%\", \"23%\", \"26%\", \"28%\",\n      \"30%\", \"33%\", \"35%\", \"37%\", \"40%\", \"42%\", \"44%\", \"46%\", \"48%\", \"50%\", \"53%\", \"55%\",\n      \"57%\", \"59%\", \"61%\", \"63%\", \"65%\", \"67%\", \"69%\", \"71%\", \"73%\", \"74%\", \"76%\", \"78%\",\n      \"80%\", \"82%\", \"84%\", \"86%\", \"87%\", \"89%\", \"91%\", \"93%\", \"94%\", \"96%\", \"98%\", \"100%\",\n      \"101%\", \"103%\", \"105%\", \"106%\", \"108%\", \"110%\", \"111%\", \"113%\", \"114%\", \"116%\", \"118%\",\n      \"119%\", \"121%\", \"122%\", \"124%\", \"126%\", \"127%\", \"129%\", \"130%\", \"132%\", \"133%\", \"135%\",\n      \"136%\", \"138%\", \"139%\"\n    ]\n  },\n  \"Blue\": {\n    \"Wattage\": [\n      9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30,\n      31, 32, 33, 34, 35, 36, 37, 39, 40\n    ],\n    \"Percentage\": [\n      \"1%\", \"4%\", \"9%\", \"15%\", \"21%\", \"27%\", \"32%\", \"38%\", \"43%\", \"48%\", \"53%\", \"58%\",\n      \"63%\", \"68%\", \"73%\", \"78%\", \"82%\", \"87%\", \"91%\", \"96%\", \"100%\", \"105%\", \"110%\", \"114%\",\n      \"119%\", \"124%\", \"128%\", \"133%\", \"137%\"\n    ]\n  },\n  \"White\": {\n    \"Wattage\": [\n      9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30,\n      31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50\n    ],\n    \"Percentage\": [\n      \"1%\", \"3%\", \"9%\", \"15%\", \"20%\", \"25%\", \"31%\", \"36%\", \"41%\", \"46%\", \"51%\", \"56%\",\n      \"61%\", \"66%\", \"70%\", \"75%\", \"80%\", \"84%\", \"89%\", \"93%\", \"97%\", \"101%\", \"104%\", \"106%\",\n      \"109%\", \"111%\", \"113%\", \"116%\", \"118%\", \"120%\", \"123%\", \"125%\", \"127%\", \"129%\", \"132%\",\n      \"134%\", \"136%\", \"138%\", \"140%\"\n    ]\n  }\n};\n","import { WRGB_PRO_II_WATTAGE_DATA, ChannelWattageData } from './wattage-data';\n\nexport interface ChannelPercentages {\n  red: number;\n  green: number;\n  blue: number;\n  white: number;\n}\n\nexport interface WattageCalculationResult {\n  totalWattage: number;\n  channelWattages: {\n    red: number;\n    green: number;\n    blue: number;\n    white: number;\n  };\n  stepSum: number;\n  embeddedBaseSum: number;\n  sharedBase: number;\n  requestedWattage: number; // What the channels would use without power limiting\n  powerLimited: boolean; // Whether power limiting was applied\n}\n\n\n/**\n * Converts a percentage string (e.g., \"75%\") to a number (e.g., 75)\n */\nfunction parsePercentage(percentageStr: string): number {\n  return parseInt(percentageStr.replace('%', ''), 10);\n}\n\n/**\n * Calculates the step wattage for a single channel based on its percentage\n * Uses floor lookup: finds the largest percentage in step table â‰¤ input percentage\n */\nfunction calculateChannelStepWattage(channel: 'Red' | 'Green' | 'Blue' | 'White', percentage: number): number {\n  if (percentage === 0) return 0;\n\n  const data = WRGB_PRO_II_WATTAGE_DATA[channel];\n  if (!data) return 0;\n\n  // Find exact match first\n  for (let i = 0; i < data.Percentage.length; i++) {\n    const stepPercentage = parseInt(data.Percentage[i].replace('%', ''));\n    if (stepPercentage === percentage) {\n      return data.Wattage[i];\n    }\n  }\n\n  // Find the floor step (largest step <= percentage)\n  let floorIndex = -1;\n  for (let i = 0; i < data.Percentage.length; i++) {\n    const stepPercentage = parseInt(data.Percentage[i].replace('%', ''));\n    if (stepPercentage <= percentage) {\n      floorIndex = i;\n    } else {\n      break; // Stop when we exceed the target percentage\n    }\n  }\n\n  // Handle edge cases\n  if (floorIndex === -1) {\n    return data.Wattage[0]; // Below first point, use first value\n  }\n\n  return data.Wattage[floorIndex]; // Use floor step value\n}\n\n/**\n * Determines shared base value based on which channels are ON\n * Calibrated against real-world measurements from Percentages.txt\n */\n\n// Embedded base values for each channel (constants)\nconst EMBEDDED_BASE_VALUES = {\n  Red: 7.59,\n  Green: 8.64,\n  Blue: 6.67,\n  White: 7.09,\n  Total: 30\n};\n\n// No white - 23 base; No green 21.5 -- R&B, 14.26; 2.1 -- R&W, 14.68;\nfunction calculateSharedBase(red: number, green: number, blue: number, white: number): number {\n  const intensityFactor = 2.451;\n  const redOn = red > 0;\n  const greenOn = green > 0;\n  const blueOn = blue > 0;\n  const whiteOn = white > 0;\n  const numOn = (redOn ? 1 : 0) + (greenOn ? 1 : 0) + (blueOn ? 1 : 0) + (whiteOn ? 1 : 0);\n  const avgIntensity = 1.6 - ((red + green + blue + white) / (4 * 100));\n  const intensityAdjustment = (intensityFactor * avgIntensity);\n\n  //  if 3 -> 2; 2 -> 1\n  const excessBase =  EMBEDDED_BASE_VALUES.Total - ((!redOn ? EMBEDDED_BASE_VALUES.Red : 0) + (!greenOn ? EMBEDDED_BASE_VALUES.Green : 0) +\n                      (!blueOn ? EMBEDDED_BASE_VALUES.Blue : 0) + (!whiteOn ? EMBEDDED_BASE_VALUES.White : 0));\n\n  const baseRatio =  excessBase/(numOn) - 7.6;\n\n  const trueBase =  ((redOn ? EMBEDDED_BASE_VALUES.Red : 0) + (greenOn ? EMBEDDED_BASE_VALUES.Green : 0) +\n    (blueOn ? EMBEDDED_BASE_VALUES.Blue : 0) + (whiteOn ? EMBEDDED_BASE_VALUES.White : 0)) / (EMBEDDED_BASE_VALUES.Total) ;\n\n  if( numOn < 4 ) { // logically we want to 'remove' a portion of the excess base.\n    return (5 - numOn)*intensityAdjustment + trueBase*baseRatio + numOn*baseRatio;\n  } else {\n    return intensityAdjustment;// + (4 - numOn)*trueBase;\n  }\n}\n\n\nexport function calculateLightWattage(channels: ChannelPercentages): WattageCalculationResult {\n  const { red, green, blue, white } = channels;\n\n  // Convert to 0-1 range and determine which channels are active\n  const redNormalized = Math.max(0, Math.min(1, red / 100));\n  const greenNormalized = Math.max(0, Math.min(1, green / 100));\n  const blueNormalized = Math.max(0, Math.min(1, blue / 100));\n  const whiteNormalized = Math.max(0, Math.min(1, white / 100));\n\n  const redOn = redNormalized > 0;\n  const greenOn = greenNormalized > 0;\n  const blueOn = blueNormalized > 0;\n  const whiteOn = whiteNormalized > 0;\n  const activeChannels = [redOn, greenOn, blueOn, whiteOn].filter(Boolean).length;\n\n  if (activeChannels === 0) {\n    return {\n      totalWattage: 0,\n      channelWattages: { red: 0, green: 0, blue: 0, white: 0 },\n      stepSum: 0,\n      embeddedBaseSum: 0,\n      sharedBase: 0,\n      requestedWattage: 0,\n      powerLimited: false,\n    };\n  }\n\n  // Get step wattages from lookup tables (true single-channel values using floor logic)\n  const stepWattages = {\n    red: redOn ? calculateChannelStepWattage('Red', red) : 0,\n    green: greenOn ? calculateChannelStepWattage('Green', green) : 0,\n    blue: blueOn ? calculateChannelStepWattage('Blue', blue) : 0,\n    white: whiteOn ? calculateChannelStepWattage('White', white) : 0\n  };\n\n  let requestedWattage: number;\n  const stepSum = stepWattages.red + stepWattages.green + stepWattages.blue + stepWattages.white;\n\n  // For single channels, use step wattage directly (no embedded base manipulation)\n  if (activeChannels === 1) {\n    requestedWattage = stepSum; // Just the single channel's step wattage\n\n    // Apply 138W power limiting\n    const MAX_TOTAL_WATTAGE = 138;\n    const totalWattage = Math.min(Math.round(requestedWattage), MAX_TOTAL_WATTAGE);\n    const powerLimited = requestedWattage > MAX_TOTAL_WATTAGE;\n\n    return {\n      totalWattage,\n      channelWattages: {\n        red: redOn ? totalWattage : 0,\n        green: greenOn ? totalWattage : 0,\n        blue: blueOn ? totalWattage : 0,\n        white: whiteOn ? totalWattage : 0\n      },\n      stepSum,\n      embeddedBaseSum: 0, // No embedded base adjustment for single channel\n      sharedBase: 0, // No shared base for single channel\n      requestedWattage,\n      powerLimited,\n    };\n  }\n\n  // For multi-channel combinations, use embedded base + shared base approach\n  // Step 1: Subtract embedded base values from each active channel\n  const adjustedWattages = {\n    red: redOn ? Math.max(0, stepWattages.red - EMBEDDED_BASE_VALUES.Red) : 0,\n    green: greenOn ? Math.max(0, stepWattages.green - EMBEDDED_BASE_VALUES.Green) : 0,\n    blue: blueOn ? Math.max(0, stepWattages.blue - EMBEDDED_BASE_VALUES.Blue) : 0,\n    white: whiteOn ? Math.max(0, stepWattages.white - EMBEDDED_BASE_VALUES.White) : 0\n  };\n\n  const embeddedBaseSum = adjustedWattages.red + adjustedWattages.green + adjustedWattages.blue + adjustedWattages.white;\n\n  // Step 2: Calculate shared base value based on active channels and intensity\n  const sharedBase = calculateSharedBase(red, green, blue, white);\n\n  // Step 3: Total = adjusted wattages + shared base\n  requestedWattage = embeddedBaseSum + sharedBase;\n\n  // Apply 138W power limiting\n  const MAX_TOTAL_WATTAGE = 138;\n  const totalWattage = Math.min(Math.round(requestedWattage), MAX_TOTAL_WATTAGE);\n  const powerLimited = requestedWattage > MAX_TOTAL_WATTAGE;\n\n  // Calculate proportional channel contributions for display\n  const channelWattages = stepSum > 0 ? {\n    red: Math.round((stepWattages.red / stepSum) * totalWattage),\n    green: Math.round((stepWattages.green / stepSum) * totalWattage),\n    blue: Math.round((stepWattages.blue / stepSum) * totalWattage),\n    white: Math.round((stepWattages.white / stepSum) * totalWattage)\n  } : { red: 0, green: 0, blue: 0, white: 0 };\n\n  // Ensure the sum matches total (handle rounding)\n  const channelSum = channelWattages.red + channelWattages.green + channelWattages.blue + channelWattages.white;\n  if (channelSum !== totalWattage && totalWattage > 0) {\n    const diff = totalWattage - channelSum;\n    if (red > 0) channelWattages.red += diff;\n    else if (green > 0) channelWattages.green += diff;\n    else if (blue > 0) channelWattages.blue += diff;\n    else if (white > 0) channelWattages.white += diff;\n  }\n\n  return {\n    totalWattage,\n    channelWattages,\n    stepSum: Math.round(stepSum),\n    embeddedBaseSum: Math.round(embeddedBaseSum),\n    sharedBase: Math.round(sharedBase),\n    requestedWattage: Math.round(requestedWattage),\n    powerLimited,\n  };\n}\n\n\n/**\n * Gets the maximum possible wattage for WRGB Pro II (actual device limit)\n */\nexport function getMaxWattage(): number {\n  return 138; // Actual device power limit\n}\n\n/**\n * Gets the theoretical maximum wattage if there were no power limiting\n */\nexport function getTheoreticalMaxWattage(): number {\n  // Calculate theoretical max: Red:45W + Green:60W + Blue:31W + White:31W = 167W\n  return 45 + 60 + 31 + 31;\n}\n\n/**\n * Formats wattage for display\n */\nexport function formatWattage(wattage: number): string {\n  return `${wattage}W`;\n}\n"],"names":["WRGB_PRO_II_WATTAGE_DATA","calculateChannelStepWattage","channel","percentage","data","i","floorIndex","EMBEDDED_BASE_VALUES","calculateSharedBase","red","green","blue","white","redOn","greenOn","blueOn","whiteOn","numOn","intensityAdjustment","baseRatio","trueBase","calculateLightWattage","channels","redNormalized","greenNormalized","blueNormalized","whiteNormalized","activeChannels","stepWattages","requestedWattage","stepSum","MAX_TOTAL_WATTAGE","totalWattage","powerLimited","adjustedWattages","embeddedBaseSum","sharedBase","channelWattages","channelSum","diff","getMaxWattage","getTheoreticalMaxWattage","formatWattage","wattage"],"mappings":"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"}