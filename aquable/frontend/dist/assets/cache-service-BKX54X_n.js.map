{"version":3,"file":"cache-service-BKX54X_n.js","sources":["../../src/ui/aquarium-dashboard/services/cache-service.ts"],"sourcesContent":["/**\n * Client-side caching service for metadata and configurations\n * Reduces unnecessary API calls by caching data that rarely changes\n */\n\ninterface CacheEntry<T> {\n  data: T;\n  timestamp: number;\n  ttl: number; // Time to live in milliseconds\n}\n\nclass CacheService {\n  private caches = new Map<string, CacheEntry<any>>();\n\n  /**\n   * Get cached data if available and not expired\n   */\n  get<T>(key: string): T | null {\n    const entry = this.caches.get(key);\n    if (!entry) return null;\n\n    const now = Date.now();\n    const age = now - entry.timestamp;\n\n    // Check if cache has expired\n    if (age > entry.ttl) {\n      this.caches.delete(key);\n      return null;\n    }\n\n    return entry.data as T;\n  }\n\n  /**\n   * Set cache entry with TTL\n   */\n  set<T>(key: string, data: T, ttlMs: number = 5 * 60 * 1000): void {\n    this.caches.set(key, {\n      data,\n      timestamp: Date.now(),\n      ttl: ttlMs,\n    });\n  }\n\n  /**\n   * Clear specific cache entry\n   */\n  clear(key: string): void {\n    this.caches.delete(key);\n  }\n\n  /**\n   * Clear all caches\n   */\n  clearAll(): void {\n    this.caches.clear();\n  }\n\n  /**\n   * Get cache age in milliseconds (-1 if not cached)\n   */\n  getAge(key: string): number {\n    const entry = this.caches.get(key);\n    if (!entry) return -1;\n    return Date.now() - entry.timestamp;\n  }\n\n  /**\n   * Check if cache is still valid\n   */\n  isValid(key: string): boolean {\n    const entry = this.caches.get(key);\n    if (!entry) return false;\n    return Date.now() - entry.timestamp <= entry.ttl;\n  }\n}\n\nexport const cacheService = new CacheService();\n\n// Cache key constants\nexport const CACHE_KEYS = {\n  DOSER_METADATA: 'doser_metadata',\n  LIGHT_METADATA: 'light_metadata',\n} as const;\n\n// Cache TTLs (in milliseconds)\nexport const CACHE_TTL = {\n  METADATA: 10 * 60 * 1000, // 10 minutes - metadata rarely changes\n  STATUS: 30 * 1000,        // 30 seconds - status should be fresh\n} as const;\n\n/**\n * Invalidate all metadata caches (call when user performs operations that modify metadata)\n */\nexport function invalidateMetadataCache(): void {\n  cacheService.clear(CACHE_KEYS.DOSER_METADATA);\n  cacheService.clear(CACHE_KEYS.LIGHT_METADATA);\n}\n\n/**\n * Get debug info about cache state\n */\nexport function getCacheDebugInfo(): Record<string, any> {\n  return {\n    doserMetadata: {\n      cached: cacheService.get(CACHE_KEYS.DOSER_METADATA) !== null,\n      age: cacheService.getAge(CACHE_KEYS.DOSER_METADATA),\n      valid: cacheService.isValid(CACHE_KEYS.DOSER_METADATA),\n    },\n    lightMetadata: {\n      cached: cacheService.get(CACHE_KEYS.LIGHT_METADATA) !== null,\n      age: cacheService.getAge(CACHE_KEYS.LIGHT_METADATA),\n      valid: cacheService.isValid(CACHE_KEYS.LIGHT_METADATA),\n    },\n  };\n}\n"],"names":["CacheService","__publicField","key","entry","data","ttlMs","cacheService","CACHE_KEYS","invalidateMetadataCache"],"mappings":"oKAWA,MAAMA,CAAa,CAAnB,cACUC,EAAA,kBAAa,KAKrB,IAAOC,EAAuB,CAC5B,MAAMC,EAAQ,KAAK,OAAO,IAAID,CAAG,EACjC,OAAKC,EAEO,KAAK,IAAA,EACCA,EAAM,UAGdA,EAAM,KACd,KAAK,OAAO,OAAOD,CAAG,EACf,MAGFC,EAAM,KAXM,IAYrB,CAKA,IAAOD,EAAaE,EAASC,EAAgB,EAAI,GAAK,IAAY,CAChE,KAAK,OAAO,IAAIH,EAAK,CACnB,KAAAE,EACA,UAAW,KAAK,IAAA,EAChB,IAAKC,CAAA,CACN,CACH,CAKA,MAAMH,EAAmB,CACvB,KAAK,OAAO,OAAOA,CAAG,CACxB,CAKA,UAAiB,CACf,KAAK,OAAO,MAAA,CACd,CAKA,OAAOA,EAAqB,CAC1B,MAAMC,EAAQ,KAAK,OAAO,IAAID,CAAG,EACjC,OAAKC,EACE,KAAK,MAAQA,EAAM,UADP,EAErB,CAKA,QAAQD,EAAsB,CAC5B,MAAMC,EAAQ,KAAK,OAAO,IAAID,CAAG,EACjC,OAAKC,EACE,KAAK,IAAA,EAAQA,EAAM,WAAaA,EAAM,IAD1B,EAErB,CACF,CAEO,MAAMG,EAAe,IAAIN,EAGnBO,EAAa,CACxB,eAAgB,iBAChB,eAAgB,gBAClB,EAWO,SAASC,GAAgC,CAC9CF,EAAa,MAAMC,EAAW,cAAc,EAC5CD,EAAa,MAAMC,EAAW,cAAc,CAC9C"}