{"version":3,"mappings":"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","names":["showDeviceConfigModal","address","deviceType","modal","_a","deviceStore","metadata","config","getDeviceConfiguration","error","displayName","renderGeneralSettingsForm","e","handleSaveConfig","addr","type","showImportExportModal","nickname","autoReconnect","renderDoserHeadNames","headNames","headIndex","_b","i","input","updateDeviceNaming","updateDeviceSettings","invalidateMetadataCache","__vitePreload","loadAllDashboardData","n"],"ignoreList":[],"sources":["../../src/ui/aquarium-dashboard/modals/device-config-modal.ts"],"sourcesContent":["/**\n * Device Configuration Modal - General device settings (nickname, auto-connect, etc.)\n * Separate from the device commands/settings modal\n */\n\nimport { deviceStore } from \"../../../stores/deviceStore\";\nimport { updateDeviceNaming, updateDeviceSettings, getDeviceConfiguration } from \"../../../api/configurations\";\nimport { showImportExportModal } from \"./import-export-modal\";\n\ntype DeviceMetadata = {\n  id: string;\n  name?: string;\n  autoReconnect?: boolean;\n  headNames?: Record<number, string>; // Doser only\n  createdAt?: string;\n  updatedAt?: string;\n};\n\n/**\n * Show the device configuration modal (general settings only)\n */\nexport async function showDeviceConfigModal(address: string, deviceType: 'doser' | 'light'): Promise<void> {\n  const modal = document.createElement('div');\n  modal.className = 'modal-overlay';\n\n  // Get current device status\n  const state = deviceStore.getState();\n  const deviceStatus = state.devices.get(address)?.status;\n  if (!deviceStatus) {\n    console.error('Device not found:', address);\n    return;\n  }\n\n  // Load device configuration (includes naming metadata)\n  let metadata: DeviceMetadata | null = null;\n  try {\n    const config = await getDeviceConfiguration(address);\n    metadata = {\n      id: config.id,\n      name: config.name,\n      autoReconnect: config.autoReconnect,\n      headNames: (config as any).headNames,\n      createdAt: config.createdAt,\n      updatedAt: config.updatedAt,\n    };\n  } catch (error) {\n    console.error('Failed to load device configuration:', error);\n  }\n\n  // Get display name (metadata name or address)\n  const displayName = metadata?.name || address;\n\n  modal.innerHTML = `\n    <div class=\"modal-content device-config-modal\" style=\"max-width: 600px; max-height: 90vh; overflow-y: auto;\" data-device-id=\"${address}\" data-device-type=\"${deviceType}\">\n      <div class=\"modal-header\">\n        <h2>Device Configuration: ${displayName}</h2>\n        <button class=\"modal-close\" onclick=\"this.closest('.modal-overlay').remove();\">Ã—</button>\n      </div>\n\n      <div class=\"modal-body\">\n        ${renderGeneralSettingsForm(address, deviceType, metadata)}\n      </div>\n    </div>\n  `;\n\n  document.body.appendChild(modal);\n\n  // Close on background click\n  modal.addEventListener('click', (e) => {\n    if (e.target === modal) {\n      modal.remove();\n    }\n  });\n\n  // Setup save handler\n  (window as any).saveDeviceConfig = async () => {\n    await handleSaveConfig(address, deviceType, modal);\n  };\n\n  // Setup import/export handler\n  (window as any).showImportExportModal = async (addr: string, type: 'doser' | 'light') => {\n    await showImportExportModal(addr, type);\n  };\n}\n\n/**\n * Render the general settings form (no tabs - just the config form)\n */\nfunction renderGeneralSettingsForm(\n  address: string,\n  deviceType: 'doser' | 'light',\n  metadata: DeviceMetadata | null\n): string {\n  const nickname = metadata?.name || '';\n  const autoReconnect = metadata?.autoReconnect || false;\n\n  return `\n    <div class=\"settings-section\">\n      <h3>Device Information</h3>\n\n      <div class=\"form-group\">\n        <label for=\"device-nickname\">Device Nickname</label>\n        <input\n          type=\"text\"\n          id=\"device-nickname\"\n          class=\"form-control\"\n          value=\"${nickname}\"\n          placeholder=\"Device Name\"\n        />\n        <small class=\"form-text\">Custom name displayed in the interface</small>\n      </div>\n\n      <div class=\"form-group\">\n        <label class=\"checkbox-label\">\n          <input\n            type=\"checkbox\"\n            id=\"auto-reconnect\"\n            ${autoReconnect ? 'checked' : ''}\n          />\n          <span>Auto Connect on Startup</span>\n        </label>\n        <small class=\"form-text\">Automatically connect to this device when the service starts</small>\n      </div>\n\n      ${deviceType === 'doser' ? renderDoserHeadNames(metadata) : ''}\n\n      <div class=\"form-actions\">\n        <button class=\"btn btn-primary\" onclick=\"saveDeviceConfig()\">\n          Save Settings\n        </button>\n        <button class=\"btn btn-secondary\" onclick=\"showImportExportModal('${address}', '${deviceType}')\">\n          Import/Export\n        </button>\n        <button class=\"btn btn-secondary\" onclick=\"this.closest('.modal-overlay').remove();\">\n          Cancel\n        </button>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Render doser-specific head names fields\n */\nfunction renderDoserHeadNames(metadata: DeviceMetadata | null): string {\n  const headNames = metadata?.headNames || {};\n\n  return `\n    <div class=\"form-group\">\n      <h4>Head Names</h4>\n      <p class=\"form-text\">Customize the names for each dosing head</p>\n\n      <div style=\"display: grid; grid-template-columns: repeat(2, 1fr); gap: 12px; margin-top: 12px;\">\n        ${[1, 2, 3, 4].map(headIndex => `\n          <div>\n            <label for=\"head-name-${headIndex}\">Head ${headIndex}</label>\n            <input\n              type=\"text\"\n              id=\"head-name-${headIndex}\"\n              class=\"form-control\"\n              value=\"${headNames[headIndex] || ''}\"\n              placeholder=\"Head ${headIndex}\"\n            />\n          </div>\n        `).join('')}\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Handle saving device configuration\n */\nasync function handleSaveConfig(\n  address: string,\n  deviceType: 'doser' | 'light',\n  modal: HTMLElement\n): Promise<void> {\n  try {\n    // Collect form data\n    const nickname = (document.getElementById('device-nickname') as HTMLInputElement)?.value || '';\n    const autoReconnect = (document.getElementById('auto-reconnect') as HTMLInputElement)?.checked || false;\n\n    const metadata: any = {\n      id: address,\n      name: nickname || undefined,\n      autoReconnect\n    };\n\n    // Collect head names for dosers\n    if (deviceType === 'doser') {\n      const headNames: Record<number, string> = {};\n      for (let i = 1; i <= 4; i++) {\n        const input = document.getElementById(`head-name-${i}`) as HTMLInputElement;\n        if (input && input.value.trim()) {\n          headNames[i] = input.value.trim();\n        }\n      }\n      if (Object.keys(headNames).length > 0) {\n        metadata.headNames = headNames;\n      }\n    }\n\n    // Save naming via unified API\n    await updateDeviceNaming(address, {\n      name: metadata.name,\n      headNames: metadata.headNames,\n    });\n\n    // Save settings (autoReconnect) via separate endpoint\n    await updateDeviceSettings(address, {\n      autoReconnect: metadata.autoReconnect,\n    });\n\n    // Show success notification\n    deviceStore.getState().actions.addNotification({\n      type: 'success',\n      message: 'Settings saved successfully'\n    });\n\n    // Refresh dashboard data (invalidate cache first to get fresh metadata)\n    const { invalidateMetadataCache } = await import('../services/cache-service');\n    invalidateMetadataCache();\n    \n    const { loadAllDashboardData } = await import('../services/data-service');\n    await loadAllDashboardData();\n\n    // Device card updater will automatically update the affected card\n    // No need for full refreshDashboard() call\n\n    // Close modal\n    modal.remove();\n  } catch (error) {\n    console.error('Failed to save settings:', error);\n    deviceStore.getState().actions.addNotification({\n      type: 'error',\n      message: `Failed to save settings: ${error instanceof Error ? error.message : 'Unknown error'}`\n    });\n  }\n}\n"],"file":"assets/device-config-modal-DG5pdQpf.js"}