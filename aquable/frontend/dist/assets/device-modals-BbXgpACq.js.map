{"version":3,"file":"device-modals-BbXgpACq.js","sources":["../../src/ui/aquarium-dashboard/modals/device-modals.ts"],"sourcesContent":["/**\n * Modal components for device configuration - Visual rendering only\n * \n * This module provides modal UI components for doser and light device settings.\n * It uses Zustand store for state management and renders HTML strings for modal content.\n * \n * Key patterns:\n * - Device data is retrieved from deviceStore.getState() instead of DOM storage\n * - Channel names come from device configurations in the store\n * - Modal functions are attached to window object for onclick handlers (necessary pattern for string-based HTML)\n * - Types are properly defined for TypeScript safety\n */\n\nimport type { DoserDevice as APIDoserDevice, LightDevice as APILightDevice } from \"../../../api/configurations\";\nimport { executeCommand } from \"../../../api/commands\";\nimport type { CommandRequest } from \"../../../types/api\";\nimport { deviceStore } from \"../../../stores/deviceStore\";\n\n/**\n * Internal types for modal rendering\n */\ninterface DoserSchedule {\n  mode: 'single' | 'every_hour' | 'custom_periods' | 'timer' | string;\n  dailyDoseMl?: number;\n  startTime?: string;\n}\n\ninterface DoserRecurrence {\n  days: string[];\n}\n\ninterface DoserHeadData {\n  index: number;\n  label: string;\n  active: boolean;\n  schedule: DoserSchedule;\n  recurrence: DoserRecurrence;\n  missedDoseCompensation?: boolean;\n  calibration?: { mlPerSecond: number; lastCalibratedAt: string };\n}\n\ninterface DoserConfiguration {\n  id: string;\n  name: string;\n  revisions: Array<{\n    revision: number;\n    savedAt: string;\n    heads: DoserHeadData[];\n  }>;\n}\n\n/**\n * Get channel names for a light device from its configuration\n * Falls back to default channel names if configuration not available\n */\nfunction getLightChannelNames(deviceId: string): string[] {\n  const zustandState = deviceStore.getState();\n  const lightConfig = zustandState.configurations.lights.get(deviceId);\n  \n  if (lightConfig && lightConfig.channels && lightConfig.channels.length > 0) {\n    return lightConfig.channels.map(ch => ch.label || ch.key);\n  }\n  \n  // Default fallback\n  return ['Channel 1', 'Channel 2', 'Channel 3', 'Channel 4'];\n}\n\n/**\n * Show the doser device settings modal - for commands and schedules\n * Uses API DoserDevice type which includes configurations array\n */\nexport function showDoserDeviceSettingsModal(device: APIDoserDevice): void {\n  const modal = document.createElement('div');\n  modal.className = 'modal-overlay';\n\n  modal.innerHTML = `\n    <div class=\"modal-content doser-config-modal\" style=\"max-width: 600px; max-height: 90vh; overflow-y: auto;\" data-device-id=\"${device.id}\">\n      <div class=\"modal-header\">\n        <h2>Doser Settings: ${device.name || device.id}</h2>\n        <button class=\"modal-close\" onclick=\"this.closest('.modal-overlay').remove();\">×</button>\n      </div>\n      <div class=\"modal-body\">\n        ${renderDoserDeviceSettingsInterface(device)}\n      </div>\n    </div>\n  `;\n\n  document.body.appendChild(modal);\n\n  // Store the device data on the modal element for interactions\n  const modalContent = modal.querySelector('.modal-content.doser-config-modal') as HTMLElement;\n  if (modalContent) {\n    (modalContent as any)._doserDeviceData = device;\n  }\n\n  // Close on background click\n  modal.addEventListener('click', (e) => {\n    if (e.target === modal) {\n      modal.remove();\n    }\n  });\n}\n\n/**\n * Show the light device settings modal - for commands and controls (visual only)\n * Uses API LightDevice type which includes configurations array\n */\nexport function showLightDeviceSettingsModal(device: APILightDevice): void {\n  const modal = document.createElement('div');\n  modal.className = 'modal-overlay';\n\n  modal.innerHTML = `\n    <div class=\"modal-content light-settings-modal\" style=\"max-width: 540px; max-height: 90vh; overflow-y: auto;\" data-device-id=\"${device.id}\" data-address=\"${device.id}\">\n      <div class=\"modal-header\">\n        <h2>Light Settings: ${device.name || device.id}</h2>\n        <button class=\"modal-close\" onclick=\"this.closest('.modal-overlay').remove();\">×</button>\n      </div>\n      <div class=\"modal-body\">\n        ${renderLightDeviceSettingsInterface(device)}\n      </div>\n    </div>\n  `;\n\n  document.body.appendChild(modal);\n\n  // Store the device data on the modal element for tab switching\n  const modalContent = modal.querySelector('.modal-content.light-settings-modal') as HTMLElement;\n  if (modalContent) {\n    (modalContent as any)._lightDeviceData = device;\n  }\n\n  // Close on background click\n  modal.addEventListener('click', (e) => {\n    if (e.target === modal) {\n      modal.remove();\n    }\n  });\n}\n\n/**\n * Render the doser device settings interface\n */\nfunction renderDoserDeviceSettingsInterface(device: APIDoserDevice): string {\n  return `\n    <div class=\"doser-config-interface\">\n      <!-- Head Selector Section -->\n      <div class=\"config-section\">\n        <div class=\"heads-grid\">\n          ${renderHeadSelector(device)}\n        </div>\n      </div>\n\n      <!-- Command Interface Section -->\n      <div class=\"config-section\">\n        <div id=\"command-interface\">\n          <div class=\"no-head-selected\">\n            <h4>No Head Selected</h4>\n            <p>Select a dosing head above to configure its schedule and settings.</p>\n          </div>\n        </div>\n      </div>\n\n      <!-- Action Buttons -->\n      <div class=\"modal-actions\">\n        <button class=\"btn btn-secondary\" onclick=\"this.closest('.modal-overlay').remove();\">\n          Close\n        </button>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Render the 4-head visual selector as individual cards\n */\nfunction renderHeadSelector(device: APIDoserDevice): string {\n  // Extract heads from active configuration if available\n  let configuredHeads: DoserHeadData[] = [];\n  \n  try {\n    if (device.configurations && device.configurations.length > 0) {\n      const activeConfig = device.configurations.find(c => c.id === device.activeConfigurationId) || device.configurations[0];\n      \n      if (activeConfig && activeConfig.revisions && activeConfig.revisions.length > 0) {\n        const latestRevision = activeConfig.revisions[activeConfig.revisions.length - 1];\n        \n        if (latestRevision.heads && Array.isArray(latestRevision.heads)) {\n          configuredHeads = latestRevision.heads as DoserHeadData[];\n        }\n      }\n    }\n  } catch (error) {\n    console.warn('Error extracting configured heads, will use defaults:', error);\n    configuredHeads = [];\n  }\n\n  // Ensure we have all 4 heads\n  const allHeads = [];\n  for (let i = 1; i <= 4; i++) {\n    const existingHead = configuredHeads.find((h) => h.index === i);\n    const headName = device.headNames?.[i] || `Head ${i}`;\n\n    if (existingHead) {\n      // Update the label with custom name\n      existingHead.label = headName;\n      allHeads.push(existingHead);\n    } else {\n      allHeads.push({\n        index: i as 1|2|3|4,\n        label: headName,\n        active: false,\n        schedule: { mode: 'single' as const, dailyDoseMl: 10.0, startTime: '09:00' },\n        recurrence: { days: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'] },\n        missedDoseCompensation: false,\n        calibration: { mlPerSecond: 1.0, lastCalibratedAt: new Date().toISOString() }\n      });\n    }\n  }\n\n  return `\n    <div style=\"display: grid; grid-template-columns: repeat(2, 1fr); gap: 12px;\">\n      ${allHeads.map(head => renderDoseHeadCard(head)).join('')}\n    </div>\n  `;\n}\n\n/**\n * Render a single dose head card\n */\nfunction renderDoseHeadCard(head: DoserHeadData): string {\n  const headName = head.label || `Head ${head.index}`;\n  const statusText = head.active ? 'Active' : 'Disabled';\n  const statusColor = head.active ? 'var(--success)' : 'var(--gray-400)';\n  const modeText = getModeText(head.schedule?.mode);\n\n  return `\n    <div class=\"dose-head-card ${head.active ? 'active' : 'inactive'}\" style=\"background: var(--card-bg); border: 1px solid var(--border-color); border-radius: 8px; padding: 8px 12px; cursor: pointer; transition: all 0.2s ease;\" onclick=\"selectDoseHead(${head.index})\">\n      <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 6px;\">\n        <div style=\"display: flex; align-items: center; gap: 6px;\">\n          <div style=\"font-size: 14px; font-weight: 600; color: var(--text-primary);\">${headName}</div>\n          <div style=\"font-size: 11px; color: ${statusColor}; font-weight: 600; padding: 3px 6px; background: ${statusColor}20; border-radius: 12px; white-space: nowrap;\">${statusText}</div>\n        </div>\n        <div style=\"font-size: 11px; color: var(--primary); font-weight: 500; white-space: nowrap;\">Configure →</div>\n      </div>\n\n      <div style=\"font-size: 12px; color: var(--text-secondary);\">\n        ${head.active ? \n          `${modeText} • ${head.schedule?.mode === 'single' ?\n            `${head.schedule.dailyDoseMl || 0}ml at ${head.schedule.startTime || '00:00'}` :\n            head.schedule?.mode === 'every_hour' ?\n            `${head.schedule.dailyDoseMl || 0}ml total` :\n            `Custom schedule`\n          }` :\n          `${modeText}${head.recurrence?.days?.length === 7 ? ' • Daily' : head.recurrence?.days?.length ? ` • ${head.recurrence.days.length}d/w` : ''}`\n        }\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Get mode text for display\n */\nfunction getModeText(mode?: string): string {\n  switch (mode) {\n    case 'single': return 'Daily Dose';\n    case 'every_hour': return '24 Hour';\n    case 'custom_periods': return 'Custom Periods';\n    case 'timer': return 'Timer';\n    default: return 'Disabled';\n  }\n}\n\n/**\n * Handle dose head selection\n */\nfunction selectDoseHead(headIndex: number): void {\n  // Find the modal and update the command interface\n  const modal = document.querySelector('.doser-config-modal') as HTMLElement;\n  if (!modal) return;\n\n  const commandInterface = modal.querySelector('#command-interface') as HTMLElement;\n  if (!commandInterface) return;\n\n  // Get the device ID from the modal\n  const deviceId = modal.getAttribute('data-device-id');\n  if (!deviceId) return;\n\n  // Retrieve device data from Zustand store instead of DOM\n  const zustandState = deviceStore.getState();\n  \n  // Try to get from configurations first, then fall back to devices map for unconfigured devices\n  let device: any = zustandState.configurations.dosers.get(deviceId);\n  if (!device) {\n    // For new devices with no configuration, get basic device info from devices map\n    const deviceState = zustandState.devices.get(deviceId);\n    if (deviceState?.status) {\n      // Create a minimal device object with just the ID for new devices\n      // Note: Names and metadata come from configuration, not status\n      device = {\n        id: deviceId,\n        name: deviceState.status.address, // Fallback to address for unconfigured devices\n        kind: 'doser',\n        headNames: {} // Empty until configured\n      };\n    } else {\n      console.error('No device found in store for:', deviceId);\n      return;\n    }\n  }\n\n  // Extract head data from the active configuration\n  let headData: DoserHeadData | null = null;\n  \n  try {\n    if (device.configurations && device.configurations.length > 0) {\n      const activeConfig = device.configurations.find((c: any) => c.id === device.activeConfigurationId) || device.configurations[0];\n      \n      if (activeConfig && activeConfig.revisions && activeConfig.revisions.length > 0) {\n        const latestRevision = activeConfig.revisions[activeConfig.revisions.length - 1];\n        \n        if (latestRevision.heads && Array.isArray(latestRevision.heads)) {\n          headData = (latestRevision.heads as DoserHeadData[]).find(h => h.index === headIndex) || null;\n        }\n      }\n    }\n  } catch (error) {\n    console.warn('Error extracting head data, will use defaults:', error);\n    headData = null;\n  }\n\n  // Fallback to default values if no saved configuration exists\n  if (!headData) {\n    const customName = device.headNames?.[headIndex] || `Head ${headIndex}`;\n    headData = {\n      index: headIndex,\n      label: customName,\n      active: false,\n      schedule: { mode: 'single' as const, dailyDoseMl: 10.0, startTime: '09:00' },\n      recurrence: { days: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'] },\n      missedDoseCompensation: false,\n      calibration: { mlPerSecond: 1.0, lastCalibratedAt: new Date().toISOString() }\n    };\n  } else {\n    // Ensure label uses custom name if available\n    const customName = device.headNames?.[headIndex];\n    if (customName) {\n      headData.label = customName;\n    }\n  }\n\n  // Update the command interface\n  commandInterface.innerHTML = renderHeadCommandInterface(headIndex, headData, deviceId);\n\n  // Update card selection states\n  const cards = modal.querySelectorAll('.dose-head-card');\n  cards.forEach((card: Element, index: number) => {\n    if (index === headIndex - 1) {\n      card.classList.add('selected');\n    } else {\n      card.classList.remove('selected');\n    }\n  });\n}\n\n/**\n * Render the light device settings interface with tabs for Manual/Auto modes\n */\nfunction renderLightDeviceSettingsInterface(device: APILightDevice): string {\n  return `\n    <div class=\"light-config-interface\">\n      <!-- Tab Navigation -->\n      <div class=\"modal-tabs\">\n        <button class=\"tab-button\" onclick=\"switchLightSettingsTab('manual')\">\n          Manual Mode\n        </button>\n        <button class=\"tab-button active\" onclick=\"switchLightSettingsTab('auto')\">\n          Auto Mode\n        </button>\n      </div>\n\n      <!-- Tab Content -->\n      <div id=\"light-settings-tab-content\" style=\"min-height: 600px;\">\n        ${renderLightAutoModeTab(device)}\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Render Manual Mode tab content\n */\nfunction renderLightManualModeTab(device: APILightDevice): string {\n  // Get channel names from device configuration\n  const channelNames = getLightChannelNames(device.id);\n\n  return `\n    <div class=\"settings-section\">\n      <div class=\"channel-controls\">\n        ${channelNames.map((channelName, index) => `\n          <div class=\"form-group\">\n            <label for=\"manual-channel-${index}\">${channelName}</label>\n            <input\n              type=\"number\"\n              id=\"manual-channel-${index}\"\n              min=\"0\"\n              max=\"100\"\n              value=\"50\"\n              class=\"form-control\"\n            />\n          </div>\n        `).join('')}\n      </div>\n\n      <div class=\"form-actions\">\n        <button class=\"btn btn-primary\" onclick=\"sendLightManualModeCommand('${device.id}')\">\n          Send Command\n        </button>\n        <button class=\"btn btn-secondary\" onclick=\"this.closest('.modal-overlay').remove();\">\n          Close\n        </button>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Render Auto Mode tab content\n */\nfunction renderLightAutoModeTab(device: APILightDevice): string {\n  // Get channel names from device configuration\n  const channelNames = getLightChannelNames(device.id);\n  const channelCount = channelNames.length;\n\n  // Determine grid layout based on channel count\n  let gridClass = '';\n  let channelsPerRow = 1;\n\n  if (channelCount === 1) {\n    gridClass = 'channel-grid-1';\n    channelsPerRow = 1;\n  } else if (channelCount === 3) {\n    gridClass = 'channel-grid-3';\n    channelsPerRow = 3;\n  } else if (channelCount === 4) {\n    gridClass = 'channel-grid-2x2';\n    channelsPerRow = 2;\n  } else {\n    // Default fallback for other counts\n    gridClass = 'channel-grid-default';\n    channelsPerRow = Math.min(channelCount, 3);\n  }\n\n  return `\n    <div class=\"settings-section\">\n      <div class=\"form-group\">\n        <label for=\"schedule-label\">Schedule Label</label>\n        <input\n          type=\"text\"\n          id=\"schedule-label\"\n          class=\"form-control\"\n          placeholder=\"e.g., Morning, Weekend\"\n          maxlength=\"50\"\n        />\n      </div>\n\n      <div class=\"form-group\">\n        <label>Active Days:</label>\n        <div class=\"weekday-selector\">\n          ${[\n            { name: 'monday', label: 'Mon' },\n            { name: 'tuesday', label: 'Tue' },\n            { name: 'wednesday', label: 'Wed' },\n            { name: 'thursday', label: 'Thu' },\n            { name: 'friday', label: 'Fri' },\n            { name: 'saturday', label: 'Sat' },\n            { name: 'sunday', label: 'Sun' }\n          ].map(day => `\n            <label class=\"weekday-option\">\n              <input type=\"checkbox\" value=\"${day.name}\" checked id=\"weekday-auto-${day.name}\">\n              <span class=\"weekday-label\">${day.label}</span>\n            </label>\n          `).join('')}\n        </div>\n      </div>\n\n      <div class=\"time-controls-row\">\n        <div class=\"form-group\">\n          <label for=\"sunrise-time\">Sunrise</label>\n          <input\n            type=\"time\"\n            id=\"sunrise-time\"\n            class=\"form-control\"\n            value=\"08:00\"\n          />\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"sunset-time\">Sunset</label>\n          <input\n            type=\"time\"\n            id=\"sunset-time\"\n            class=\"form-control\"\n            value=\"20:00\"\n          />\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"ramp-time\">Ramp</label>\n          <input\n            type=\"number\"\n            id=\"ramp-time\"\n            class=\"form-control\"\n            value=\"60\"\n            min=\"1\"\n            max=\"300\"\n          />\n        </div>\n      </div>\n\n      <div class=\"channel-controls ${gridClass}\">\n        ${channelNames.map((channelName, index) => `\n          <div class=\"form-group channel-item\">\n            <label for=\"auto-channel-${index}\">${channelName}</label>\n            <input\n              type=\"number\"\n              id=\"auto-channel-${index}\"\n              min=\"0\"\n              max=\"100\"\n              value=\"50\"\n              class=\"form-control\"\n            />\n          </div>\n        `).join('')}\n      </div>\n\n      <div class=\"form-group\">\n        <button class=\"btn btn-danger\" onclick=\"sendLightResetAutoModeCommand('${device.id}')\">\n          Reset Auto Mode Settings\n        </button>\n        <small class=\"form-text\">This will reset all auto mode settings to factory defaults</small>\n      </div>\n\n      <div class=\"form-actions\">\n        <button class=\"btn btn-primary\" onclick=\"sendLightAutoModeCommand('${device.id}')\">\n          Send Command\n        </button>\n        <button class=\"btn btn-secondary\" onclick=\"this.closest('.modal-overlay').remove();\">\n          Close\n        </button>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Render the command interface for a selected head (visual only)\n */\nexport function renderHeadCommandInterface(headIndex: number, head: DoserHeadData, deviceId: string): string {\n  const schedule = head.schedule || { mode: 'single', dailyDoseMl: 10.0, startTime: '09:00' };\n  const recurrence = head.recurrence || { days: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'] };\n\n  return `\n    <div class=\"head-command-interface\">\n      <div class=\"form-section\">\n        <div class=\"form-group\">\n          <label for=\"schedule-mode-${headIndex}\">Mode:</label>\n          <select id=\"schedule-mode-${headIndex}\" class=\"form-select\">\n            <option value=\"disabled\" ${!head.active ? 'selected' : ''}>Disabled</option>\n            <option value=\"single\" ${schedule.mode === 'single' ? 'selected' : ''}>Daily - Single dose at set time</option>\n            <option value=\"every_hour\" ${schedule.mode === 'every_hour' ? 'selected' : ''}>24 Hour - Hourly dosing</option>\n            <option value=\"custom_periods\" ${schedule.mode === 'custom_periods' ? 'selected' : ''}>Custom - Custom time periods</option>\n            <option value=\"timer\" ${schedule.mode === 'timer' ? 'selected' : ''}>Timer - Multiple specific times</option>\n          </select>\n        </div>\n\n        <div id=\"schedule-details-${headIndex}\">\n          ${renderScheduleDetails(headIndex, schedule)}\n        </div>\n\n        <div class=\"form-group\">\n          <label>Active Days:</label>\n          <div class=\"weekday-selector\">\n            ${[\n              { name: 'monday', label: 'Mon' },\n              { name: 'tuesday', label: 'Tue' },\n              { name: 'wednesday', label: 'Wed' },\n              { name: 'thursday', label: 'Thu' },\n              { name: 'friday', label: 'Fri' },\n              { name: 'saturday', label: 'Sat' },\n              { name: 'sunday', label: 'Sun' }\n            ].map(day => `\n              <label class=\"weekday-option\">\n                <input type=\"checkbox\" value=\"${day.name}\"\n                       ${recurrence.days.includes(day.name) ? 'checked' : ''}\n                       id=\"weekday-${headIndex}-${day.name}\">\n                <span class=\"weekday-label\">${day.label}</span>\n              </label>\n            `).join('')}\n          </div>\n        </div>\n      </div>\n\n      <!-- Command Actions -->\n      <div class=\"command-actions\">\n        <button class=\"btn btn-success btn-large\" onclick=\"sendDoserScheduleCommand('${deviceId}', ${headIndex})\">\n          Send Command\n        </button>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Render schedule details based on mode (visual only)\n */\nfunction renderScheduleDetails(headIndex: number, schedule: DoserSchedule): string {\n  switch (schedule.mode) {\n    case 'single':\n      return `\n        <div class=\"schedule-single\">\n          <div class=\"schedule-mode-description\">\n            <p><strong>Daily Mode:</strong> Dose once per day at a specific time</p>\n          </div>\n          <div class=\"form-row\">\n            <div class=\"form-group\">\n              <label for=\"dose-amount-${headIndex}\">Dose Amount (ml):</label>\n              <input type=\"number\" id=\"dose-amount-${headIndex}\"\n                     value=\"${schedule.dailyDoseMl || 10}\"\n                     min=\"0.1\" max=\"6553.5\" step=\"0.1\" class=\"form-input\">\n            </div>\n            <div class=\"form-group\">\n              <label for=\"dose-time-${headIndex}\">Time:</label>\n              <input type=\"time\" id=\"dose-time-${headIndex}\"\n                     value=\"${schedule.startTime || '09:00'}\"\n                     class=\"form-input\">\n            </div>\n          </div>\n        </div>\n      `;\n\n    case 'every_hour':\n      return `\n        <div class=\"schedule-every-hour\">\n          <div class=\"schedule-mode-description\">\n            <p><strong>24 Hour Mode:</strong> Dose every hour starting at a specific time</p>\n          </div>\n          <div class=\"form-row\">\n            <div class=\"form-group\">\n              <label for=\"daily-total-${headIndex}\">Total Daily Amount (ml):</label>\n              <input type=\"number\" id=\"daily-total-${headIndex}\"\n                     value=\"${schedule.dailyDoseMl || 24}\"\n                     min=\"0.1\" max=\"6553.5\" step=\"0.1\" class=\"form-input\">\n            </div>\n            <div class=\"form-group\">\n              <label for=\"start-time-${headIndex}\">Start Time:</label>\n              <input type=\"time\" id=\"start-time-${headIndex}\"\n                     value=\"${schedule.startTime || '08:00'}\"\n                     class=\"form-input\">\n            </div>\n          </div>\n          <div class=\"hourly-info\">\n            <p>Hourly dose: <span id=\"hourly-dose-${headIndex}\">${((schedule.dailyDoseMl || 24) / 24).toFixed(1)}ml</span></p>\n          </div>\n        </div>\n      `;\n\n    default:\n      return '<div class=\"schedule-disabled\"><p>Head is disabled. Select a mode to configure.</p></div>';\n  }\n}\n\n/**\n * Switch between Manual and Auto mode tabs for light settings\n */\nfunction switchLightSettingsTab(mode: 'manual' | 'auto'): void {\n  console.log('switchLightSettingsTab called with mode:', mode);\n\n  const tabs = document.querySelectorAll('.modal-tabs .tab-button');\n  const contentContainer = document.getElementById('light-settings-tab-content');\n\n  if (!contentContainer) {\n    console.error('Content container not found');\n    return;\n  }\n\n  // Update tab button active states\n  tabs.forEach(tab => {\n    tab.classList.remove('active');\n  });\n\n  const activeTab = Array.from(tabs).find(tab =>\n    tab.textContent?.toLowerCase().includes(mode)\n  );\n  if (activeTab) {\n    activeTab.classList.add('active');\n  }\n\n  // Get device ID from modal element\n  const modal = document.querySelector('.modal-content.light-settings-modal') as HTMLElement;\n  if (!modal) {\n    console.error('Modal element not found');\n    return;\n  }\n\n  // Try to get device from stored data first (populated when modal is created)\n  let device = (modal as any)._lightDeviceData;\n  \n  if (!device) {\n    // Fallback: retrieve device data from Zustand store\n    const deviceId = modal.getAttribute('data-device-id');\n    if (!deviceId) {\n      console.error('Device ID not found on modal element');\n      return;\n    }\n\n    const zustandState = deviceStore.getState();\n    device = zustandState.configurations.lights.get(deviceId);\n    if (!device) {\n      console.error('No device configuration found in store for:', deviceId);\n      return;\n    }\n  }\n\n  console.log('Rendering tab for mode:', mode);\n\n  // Render appropriate tab content\n  contentContainer.innerHTML = mode === 'manual'\n    ? renderLightManualModeTab(device)\n    : renderLightAutoModeTab(device);\n\n  console.log('Tab content updated');\n}\n\n/**\n * Send manual mode command to light device\n */\nasync function sendLightManualModeCommand(address: string): Promise<void> {\n  try {\n    // Get channel values from number inputs\n    const channelElements = document.querySelectorAll<HTMLInputElement>('[id^=\"manual-channel-\"]');\n    const channelValues = Array.from(channelElements).map(el => parseInt(el.value, 10));\n\n    console.log('Sending manual mode commands:', { address, channelValues });\n\n    // Validate channel values\n    if (channelValues.some(v => isNaN(v) || v < 0 || v > 100)) {\n      alert('Please enter valid brightness values (0-100) for all channels');\n      return;\n    }\n\n    // Send individual set_brightness commands for each channel (switches to manual mode)\n    let lastResult = null;\n    for (let colorIndex = 0; colorIndex < channelValues.length; colorIndex++) {\n      const request: CommandRequest = {\n        action: 'set_brightness',\n        args: {\n          brightness: channelValues[colorIndex],\n          color: colorIndex\n        },\n        timeout: 15.0\n      };\n\n      console.log(`Sending brightness command for channel ${colorIndex}:`, request);\n      lastResult = await executeCommand(address, request);\n\n      if (lastResult.status === 'failed') {\n        alert(`Channel ${colorIndex} command failed: ${lastResult.error || 'Unknown error'}`);\n        return;\n      }\n    }\n\n    if (lastResult?.status === 'success') {\n      alert('Manual brightness set successfully! Device switched to manual mode.');\n    } else {\n      alert(`Final command status: ${lastResult?.status || 'unknown'}`);\n    }\n\n  } catch (error) {\n    console.error('Failed to send manual mode commands:', error);\n    alert(`Failed to send command: ${error instanceof Error ? error.message : String(error)}`);\n  }\n}\n\n/**\n * Send auto mode command to light device\n */\nasync function sendLightAutoModeCommand(address: string): Promise<void> {\n  try {\n    const scheduleLabel = (document.getElementById('schedule-label') as HTMLInputElement)?.value.trim();\n    const sunriseTime = (document.getElementById('sunrise-time') as HTMLInputElement)?.value;\n    const sunsetTime = (document.getElementById('sunset-time') as HTMLInputElement)?.value;\n    const rampTime = parseInt((document.getElementById('ramp-time') as HTMLInputElement)?.value || '60', 10);\n\n    // Get channel values from number inputs\n    const channelElements = document.querySelectorAll<HTMLInputElement>('[id^=\"auto-channel-\"]');\n    const channelValues = Array.from(channelElements).map(el => parseInt(el.value, 10));\n\n    // Get active days from checkboxes (already in lowercase full name format)\n    const dayCheckboxes = document.querySelectorAll<HTMLInputElement>('[id^=\"weekday-auto-\"]');\n    const weekdays = Array.from(dayCheckboxes)\n      .filter(cb => cb.checked)\n      .map(cb => cb.value);\n\n    console.log('Sending auto mode command:', {\n      address,\n      scheduleLabel,\n      sunriseTime,\n      sunsetTime,\n      rampTime,\n      channelValues,\n      weekdays\n    });\n\n    // Validation\n    if (!sunriseTime || !sunsetTime) {\n      alert('Please enter both sunrise and sunset times');\n      return;\n    }\n\n    if (channelValues.some(v => isNaN(v) || v < 0 || v > 100)) {\n      alert('Please enter valid brightness values (0-100) for all channels');\n      return;\n    }\n\n    if (weekdays.length === 0) {\n      alert('Please select at least one active day');\n      return;\n    }\n\n    // Build channel brightness dict using channel indices (0, 1, 2, 3)\n    const channels: { [key: string]: number } = {};\n    channelValues.forEach((value, index) => {\n      channels[index.toString()] = value;\n    });\n\n    // Send command to add auto setting\n    const request: CommandRequest = {\n      action: 'add_auto_setting',\n      args: {\n        sunrise: sunriseTime,\n        sunset: sunsetTime,\n        channels: channels,\n        ramp_up_minutes: rampTime,\n        weekdays: weekdays,\n        ...(scheduleLabel && { label: scheduleLabel })  // Include label only if provided\n      },\n      timeout: 20.0\n    };\n\n    const result = await executeCommand(address, request);\n\n    if (result.status === 'success') {\n      alert('Auto mode schedule set successfully! Device configured for auto mode.');\n    } else if (result.status === 'failed') {\n      alert(`Command failed: ${result.error || 'Unknown error'}`);\n    } else {\n      alert(`Command status: ${result.status}`);\n    }\n\n  } catch (error) {\n    console.error('Failed to send auto mode command:', error);\n    alert(`Failed to send command: ${error instanceof Error ? error.message : String(error)}`);\n  }\n}\n\n/**\n * Send reset auto mode command to light device\n */\nasync function sendLightResetAutoModeCommand(address: string): Promise<void> {\n  try {\n    const confirmed = confirm('Are you sure you want to reset all auto mode settings to factory defaults? This cannot be undone.');\n    if (!confirmed) return;\n\n    console.log('Sending reset auto mode command:', { address });\n\n    const result = await executeCommand(address, {\n      action: 'reset_auto_settings',\n      args: {}\n    });\n\n    console.log('Reset command result:', result);\n\n    if (result.status === 'success') {\n      alert('Auto mode settings reset successfully');\n    } else {\n      alert(`Reset failed: ${result.error || 'Unknown error'}`);\n    }\n  } catch (error) {\n    console.error('Failed to send reset command:', error);\n    alert('Failed to reset auto mode settings. Check console for details.');\n  }\n}\n\n/**\n * Send doser schedule command to device\n */\nasync function sendDoserScheduleCommand(address: string, headIndex: number): Promise<void> {\n  try {\n    console.log('Sending doser schedule command:', { address, headIndex });\n\n    // Get form values\n    const doseAmountInput = document.getElementById(`dose-amount-${headIndex}`) as HTMLInputElement;\n    const doseTimeInput = document.getElementById(`dose-time-${headIndex}`) as HTMLInputElement;\n\n    if (!doseAmountInput || !doseTimeInput) {\n      alert('Form inputs not found. Please refresh the page and try again.');\n      return;\n    }\n\n    const doseAmount = parseFloat(doseAmountInput.value);\n    const doseTime = doseTimeInput.value;\n\n    if (isNaN(doseAmount) || doseAmount <= 0) {\n      alert('Please enter a valid dose amount greater than 0.');\n      return;\n    }\n\n    if (!doseTime) {\n      alert('Please select a dose time.');\n      return;\n    }\n\n    // Parse time\n    const [hourStr, minuteStr] = doseTime.split(':');\n    const hour = parseInt(hourStr, 10);\n    const minute = parseInt(minuteStr, 10);\n\n    // Get selected weekdays (already in lowercase full name format)\n    const weekdayCheckboxes = document.querySelectorAll(`input[id^=\"weekday-${headIndex}-\"]:checked`);\n    const weekdays = Array.from(weekdayCheckboxes).map(cb => (cb as HTMLInputElement).value);\n\n    // Convert dose amount to tenths of ml (backend expects integer)\n    const volumeTenthsMl = Math.round(doseAmount * 10);\n\n    const args = {\n      head_index: headIndex, // Backend uses 1-based indexing\n      volume_tenths_ml: volumeTenthsMl,\n      hour,\n      minute,\n      weekdays: weekdays.length > 0 ? weekdays : undefined\n    };\n\n    console.log('Command args:', args);\n\n    const result = await executeCommand(address, {\n      action: 'set_schedule',\n      args\n    });\n\n    console.log('Doser schedule command result:', result);\n\n    if (result.status === 'success') {\n      alert(`Schedule set successfully for Head ${headIndex}!`);\n    } else {\n      alert(`Schedule command failed: ${result.error || 'Unknown error'}`);\n    }\n  } catch (error) {\n    console.error('Failed to send doser schedule command:', error);\n    alert('Failed to set schedule. Check console for details.');\n  }\n}\n\n// Attach global functions for UI interactions\n// These are necessary because modal HTML uses onclick handlers\n// TypeScript-friendly window augmentation\ndeclare global {\n  interface Window {\n    selectDoseHead: typeof selectDoseHead;\n    switchLightSettingsTab: typeof switchLightSettingsTab;\n    sendLightManualModeCommand: typeof sendLightManualModeCommand;\n    sendLightAutoModeCommand: typeof sendLightAutoModeCommand;\n    sendLightResetAutoModeCommand: typeof sendLightResetAutoModeCommand;\n    sendDoserScheduleCommand: typeof sendDoserScheduleCommand;\n    showDoserDeviceSettingsModal: typeof showDoserDeviceSettingsModal;\n    showLightDeviceSettingsModal: typeof showLightDeviceSettingsModal;\n  }\n}\n\nwindow.selectDoseHead = selectDoseHead;\nwindow.switchLightSettingsTab = switchLightSettingsTab;\nwindow.sendLightManualModeCommand = sendLightManualModeCommand;\nwindow.sendLightAutoModeCommand = sendLightAutoModeCommand;\nwindow.sendLightResetAutoModeCommand = sendLightResetAutoModeCommand;\nwindow.sendDoserScheduleCommand = sendDoserScheduleCommand;\nwindow.showDoserDeviceSettingsModal = showDoserDeviceSettingsModal;\nwindow.showLightDeviceSettingsModal = showLightDeviceSettingsModal;\n"],"names":["getLightChannelNames","deviceId","lightConfig","deviceStore","ch","showDoserDeviceSettingsModal","device","modal","renderDoserDeviceSettingsInterface","modalContent","e","showLightDeviceSettingsModal","renderLightDeviceSettingsInterface","renderHeadSelector","configuredHeads","activeConfig","c","latestRevision","error","allHeads","i","existingHead","h","headName","_a","head","renderDoseHeadCard","statusText","statusColor","modeText","getModeText","_b","_c","_e","_d","_g","_f","mode","selectDoseHead","headIndex","commandInterface","zustandState","deviceState","headData","customName","renderHeadCommandInterface","card","index","renderLightAutoModeTab","renderLightManualModeTab","channelName","channelNames","channelCount","gridClass","day","schedule","recurrence","renderScheduleDetails","switchLightSettingsTab","tabs","contentContainer","tab","activeTab","sendLightManualModeCommand","address","channelElements","channelValues","el","v","lastResult","colorIndex","request","executeCommand","sendLightAutoModeCommand","scheduleLabel","sunriseTime","sunsetTime","rampTime","dayCheckboxes","weekdays","cb","channels","value","result","sendLightResetAutoModeCommand","sendDoserScheduleCommand","doseAmountInput","doseTimeInput","doseAmount","doseTime","hourStr","minuteStr","hour","minute","weekdayCheckboxes","volumeTenthsMl","args"],"mappings":"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"}