{"version":3,"mappings":"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","names":["showScanConnectModal","modal","renderScanInterface","e","performScan","scanButton","scanSpinner","scanMessage","devicesList","devicesContainer","devices","scanDevices","device","renderDeviceCard","initializeModalHandlers","error","handleDeviceConnection","address","connectButton","originalText","connectDevice","useActions","refreshDeviceStatusOnly","__vitePreload","n"],"ignoreList":[],"sources":["../../src/ui/aquarium-dashboard/modals/scan-connect-modal.ts"],"sourcesContent":["/**\n * Scan and Connect Modal - Clean, minimal device discovery interface\n */\n\nimport { scanDevices, connectDevice } from \"../../../api/devices\";\nimport { useActions } from \"../../../stores/deviceStore\";\nimport type { ScanDevice } from \"../../../types/api\";\n\nexport interface ScanState {\n  isScanning: boolean;\n  devices: ScanDevice[];\n  error: string | null;\n}\n\n/**\n * Show the scan and connect modal\n */\nexport async function showScanConnectModal(): Promise<void> {\n  const modal = document.createElement('div');\n  modal.className = 'modal-overlay';\n  modal.innerHTML = `\n    <div class=\"modal-content scan-connect-modal\" style=\"max-width: 500px;\">\n      <div class=\"modal-header\">\n        <button class=\"modal-close\" onclick=\"this.closest('.modal-overlay').remove();\">×</button>\n      </div>\n      <div class=\"modal-body\">\n        ${renderScanInterface()}\n      </div>\n    </div>\n  `;\n\n  document.body.appendChild(modal);\n\n  // Close on background click\n  modal.addEventListener('click', (e) => {\n    if (e.target === modal) {\n      modal.remove();\n    }\n  });\n\n  // Start scanning immediately\n  await performScan(modal);\n}\n\n/**\n * Render the scan interface\n */\nfunction renderScanInterface(): string {\n  return `\n    <div class=\"scan-interface\">\n      <div class=\"scan-status\">\n        <div class=\"scan-spinner\" style=\"display: none;\"></div>\n        <div class=\"scan-message\">Click \"Scan\" to search for nearby devices</div>\n      </div>\n\n      <div class=\"scan-actions\">\n        <button class=\"btn btn-primary scan-button\">\n          Scan for Devices\n        </button>\n      </div>\n\n      <div class=\"devices-list\" style=\"display: none;\">\n        <h3>Found Devices</h3>\n        <div class=\"devices-container\">\n          <!-- Devices will be populated here -->\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Perform device scanning\n */\nasync function performScan(modal: HTMLElement): Promise<void> {\n  const scanButton = modal.querySelector('.scan-button') as HTMLButtonElement;\n  const scanSpinner = modal.querySelector('.scan-spinner') as HTMLElement;\n  const scanMessage = modal.querySelector('.scan-message') as HTMLElement;\n  const devicesList = modal.querySelector('.devices-list') as HTMLElement;\n  const devicesContainer = modal.querySelector('.devices-container') as HTMLElement;\n\n  try {\n    // Update UI for scanning\n    scanButton.disabled = true;\n    scanButton.innerHTML = '<span class=\"scan-spinner\"></span> Scanning...';\n    scanSpinner.style.display = 'inline-block';\n    scanMessage.textContent = 'Scanning for nearby aquarium devices...';\n\n    // Perform scan\n    const devices = await scanDevices(5.0);\n\n    // Update UI with results\n    scanButton.disabled = false;\n    scanButton.innerHTML = 'Scan Again';\n    scanSpinner.style.display = 'none';\n\n    if (devices.length === 0) {\n      scanMessage.textContent = 'No aquarium devices found. Try moving closer or check device power.';\n      devicesList.style.display = 'none';\n    } else {\n      scanMessage.textContent = `Found ${devices.length} device${devices.length !== 1 ? 's' : ''}`;\n      devicesContainer.innerHTML = devices.map(device => renderDeviceCard(device)).join('');\n      devicesList.style.display = 'block';\n\n      // Initialize event handlers for the newly added connect buttons\n      initializeModalHandlers(modal);\n    }\n\n  } catch (error) {\n    // Handle scan error\n    scanButton.disabled = false;\n    scanButton.innerHTML = 'Try Again';\n    scanSpinner.style.display = 'none';\n    scanMessage.textContent = `Scan failed: ${error instanceof Error ? error.message : 'Unknown error'}`;\n    devicesList.style.display = 'none';\n\n    console.error('Scan failed:', error);\n  }\n}\n\n/**\n * Render a device card for the scan results\n */\nfunction renderDeviceCard(device: ScanDevice): string {\n  return `\n    <div class=\"device-card\" data-address=\"${device.address}\">\n      <div class=\"device-info\">\n        <div class=\"device-name\">${device.product}</div>\n        <div class=\"device-address\">${device.address}</div>\n      </div>\n      <div class=\"device-actions\">\n        <button class=\"btn btn-success btn-sm connect-button\" data-address=\"${device.address}\">\n          Connect\n        </button>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Handle device connection\n */\nasync function handleDeviceConnection(address: string, modal: HTMLElement): Promise<void> {\n  const connectButton = modal.querySelector(`[data-address=\"${address}\"] .connect-button`) as HTMLButtonElement;\n  const originalText = connectButton.textContent;\n\n  try {\n    // Update button to show connecting state\n    connectButton.disabled = true;\n    connectButton.innerHTML = '<span class=\"scan-spinner\"></span> Connecting...';\n\n    // Attempt connection\n    await connectDevice(address);\n\n    // Success - update button and show notification\n    connectButton.className = 'btn btn-success btn-sm';\n    connectButton.innerHTML = '✓ Connected';\n\n    // Show success notification\n    useActions().addNotification({\n      type: 'success',\n      message: `Successfully connected to ${address}`\n    });\n\n    // Refresh dashboard data\n    const { refreshDeviceStatusOnly } = await import('../services/data-service');\n    await refreshDeviceStatusOnly();\n\n    // Device card updater will automatically show the new device\n    // No need for full refreshDashboard() call\n\n    // Close modal after a brief delay\n    setTimeout(() => {\n      modal.remove();\n    }, 1500);\n\n  } catch (error) {\n    // Connection failed - reset button\n    connectButton.disabled = false;\n    connectButton.textContent = originalText;\n    connectButton.className = 'btn btn-danger btn-sm';\n\n    // Show error notification\n    useActions().addNotification({\n      type: 'error',\n      message: `Failed to connect to ${address}: ${error instanceof Error ? error.message : 'Unknown error'}`\n    });\n\n    console.error('Connection failed:', error);\n  }\n}\n\n/**\n * Initialize modal event handlers\n */\nfunction initializeModalHandlers(modal: HTMLElement): void {\n  // Scan button handler\n  const scanButton = modal.querySelector('.scan-button');\n  if (scanButton) {\n    scanButton.addEventListener('click', () => performScan(modal));\n  }\n\n  // Connect button handlers (delegated)\n  const devicesContainer = modal.querySelector('.devices-container');\n  if (devicesContainer) {\n    devicesContainer.addEventListener('click', (e) => {\n      const target = e.target as HTMLElement;\n      const connectButton = target.closest('.connect-button') as HTMLButtonElement;\n      if (connectButton) {\n        const address = connectButton.dataset.address;\n        if (address) {\n          handleDeviceConnection(address, modal);\n        }\n      }\n    });\n  }\n}\n\n// Initialize handlers when modal is shown\nexport function initializeScanConnectHandlers(): void {\n  // This will be called when the modal is created\n  // Handlers are set up in the showScanConnectModal function\n}\n"],"file":"assets/scan-connect-modal-CMaK3J6i.js"}