{"version":3,"mappings":";80CAAMA,GAAmBC,GAAgB,CACvC,IAAIC,EACJ,MAAMC,EAA4B,IAAI,IAChCC,EAAW,CAACC,EAASC,IAAY,CACrC,MAAMC,EAAY,OAAOF,GAAY,WAAaA,EAAQH,CAAK,EAAIG,EACnE,GAAI,CAAC,OAAO,GAAGE,EAAWL,CAAK,EAAG,CAChC,MAAMM,EAAgBN,EACtBA,EAASI,IAA4B,OAAOC,GAAc,UAAYA,IAAc,MAAQA,EAAY,OAAO,OAAO,GAAIL,EAAOK,CAAS,EAC1IJ,EAAU,QAASM,GAAaA,EAASP,EAAOM,CAAa,CAAC,CAChE,CACF,EACME,EAAW,IAAMR,EAMjBS,EAAM,CAAE,SAAAP,EAAU,SAAAM,EAAU,gBALV,IAAME,EAKqB,UAJhCH,IACjBN,EAAU,IAAIM,CAAQ,EACf,IAAMN,EAAU,OAAOM,CAAQ,EAEoB,EACtDG,EAAeV,EAAQD,EAAYG,EAAUM,EAAUC,CAAG,EAChE,OAAOA,CACT,EACME,GAAgBZ,GAA6DD,GCgO7Ec,GAA6BC,GAAO,CAACC,EAAKC,EAAKN,IAAQ,CAC3D,MAAMO,EAAgBP,EAAI,UAC1B,OAAAA,EAAI,UAAa,CAACQ,EAAUC,EAAaC,IAAY,CACnD,IAAIZ,EAAWU,EACf,GAAIC,EAAa,CACf,MAAME,GAAcD,GAAW,KAAO,OAASA,EAAQ,aAAe,OAAO,GAC7E,IAAIE,EAAeJ,EAASR,EAAI,UAAU,EAC1CF,EAAYP,GAAU,CACpB,MAAMsB,EAAYL,EAASjB,CAAK,EAChC,GAAI,CAACoB,EAAWC,EAAcC,CAAS,EAAG,CACxC,MAAMC,EAAgBF,EACtBH,EAAYG,EAAeC,EAAWC,CAAa,CACrD,CACF,EACIJ,GAAW,MAAgBA,EAAQ,iBACrCD,EAAYG,EAAcA,CAAY,CAE1C,CACA,OAAOL,EAAcT,CAAQ,CAC/B,EACqBM,EAAGC,EAAKC,EAAKN,CAAG,CAEvC,EACMe,GAAwBZ,GCtOvB,SAASa,GAAgBC,EAAqC,CACnE,GAAI,CAACA,EAAO,MAAO,yBAEnB,OAAQA,EAAM,MACZ,IAAK,mBACH,MAAO,6EACT,IAAK,sBACH,MAAO,0DACT,IAAK,cACH,MAAO,wEACT,IAAK,iBACH,MAAO,6EACT,IAAK,kBACH,MAAO,oFACT,IAAK,mBACH,MAAO,kBAAkBA,EAAM,OAAO,GACxC,IAAK,oBACH,MAAO,sBAAsBA,EAAM,OAAO,GAC5C,IAAK,uBACH,MAAO,iEACT,IAAK,6BACH,MAAO,gEACT,IAAK,oBACH,MAAO,0DACT,IAAK,iBACH,MAAO,mEACT,QACE,OAAOA,EAAM,SAAW,gCAE9B,CC0BA,MAAMC,GAA8C,CAACb,EAAKC,KAAS,CAEjE,YAAa,IACb,eAAgB,CACd,WAAY,IACZ,WAAY,IACZ,SAAU,IAEZ,aAAc,GACd,qBAAsB,GACtB,GAAI,CACF,YAAa,WACb,YAAa,KACb,cAAe,EAAC,EAElB,QAAS,CACP,UAAW,GACX,WAAY,KACZ,WAAY,KAGd,QAAS,CAEL,mBAAoB,SAAY,CAC9B,GAAI,CAIF,QAAQ,IAAI,+EAA+E,CAC7F,OAASW,EAAO,CACd,QAAQ,MAAM,iCAAkCA,CAAK,CAEvD,CACF,EAEA,kBAAmB,CAACE,EAAQC,IAAW,CACrC,MAAMC,MAAe,IACfC,MAAe,IAErBH,EAAO,QAAQI,GAASF,EAAS,IAAIE,EAAM,GAAIA,CAAK,CAAC,EACrDH,EAAO,QAAQI,GAASF,EAAS,IAAIE,EAAM,GAAIA,CAAK,CAAC,EAErDnB,EAAKd,IAAW,CACd,eAAgB,CACd,OAAQ8B,EACR,OAAQC,EACR,SAAU,GACZ,EACA,EAGF,MAAMG,EAAU,IAAI,IAAInB,EAAA,EAAM,OAAO,EACrCmB,EAAQ,QAAQ,CAACC,EAAQC,IAAY,CACnC,MAAMC,EAASP,EAAS,IAAIM,CAAO,GAAKL,EAAS,IAAIK,CAAO,EACxDC,GACFH,EAAQ,IAAIE,EAAS,CACnB,GAAGD,EACH,cAAeE,CAAA,CAChB,CAEL,CAAC,EACDvB,EAAI,CAAE,QAAAoB,EAAS,CACjB,EAEA,oBAAqB,MAAOE,EAASE,IAAe,CAClD,GAAI,CACF,QAAQ,IAAI,cAAcA,CAAU,eAAeF,CAAO,EAAE,EAG5D,KAAM,CAAE,uBAAAG,CAAA,EAA2B,MAAAC,EAAA,uCAAAD,CAAA,QAAM,2BAAAE,CAAA,4DACnCJ,EAAS,MAAME,EAAuBH,CAAO,EAInD,GADgBE,IAAe,QAClB,CACX,MAAMV,EAAS,IAAI,IAAIb,EAAA,EAAM,eAAe,MAAM,EAClDa,EAAO,IAAIQ,EAASC,CAAa,EACjCvB,EAAKd,IAAW,CACd,eAAgB,CACd,GAAGA,EAAM,eACT,OAAA4B,CAAA,CACF,EACA,CACJ,KAAO,CACL,MAAMC,EAAS,IAAI,IAAId,EAAA,EAAM,eAAe,MAAM,EAClDc,EAAO,IAAIO,EAASC,CAAa,EACjCvB,EAAKd,IAAW,CACd,eAAgB,CACd,GAAGA,EAAM,eACT,OAAA6B,CAAA,CACF,EACA,CACJ,CAGA,MAAMK,EAAU,IAAI,IAAInB,EAAA,EAAM,OAAO,EAC/BoB,EAASD,EAAQ,IAAIE,CAAO,EAClC,OAAID,IACFD,EAAQ,IAAIE,EAAS,CACnB,GAAGD,EACH,cAAeE,CAAA,CAChB,EACDvB,EAAI,CAAE,QAAAoB,EAAS,GAGVG,CACT,OAASX,EAAO,CACd,cAAQ,MAAM,qBAAqBY,CAAU,eAAeF,CAAO,IAAKV,CAAK,EACvEA,CACR,CACF,EAEA,gBAAiB,CAACU,EAASE,IACrBA,IAAe,QACVvB,IAAM,eAAe,OAAO,IAAIqB,CAAO,GAAK,KAE5CrB,IAAM,eAAe,OAAO,IAAIqB,CAAO,GAAK,KAKvD,WAAaF,GAAY,CACvB,MAAMQ,MAAgB,IAChB,CAAE,eAAAD,CAAA,EAAmB1B,EAAA,EAE3BmB,EAAQ,QAASS,GAAW,CAC1B,MAAMC,EAAW7B,EAAA,EAAM,QAAQ,IAAI4B,EAAO,OAAO,EAC3CN,EAASI,EAAe,OAAO,IAAIE,EAAO,OAAO,GAAKF,EAAe,OAAO,IAAIE,EAAO,OAAO,EAEpGD,EAAU,IAAIC,EAAO,QAAS,CAC5B,QAASA,EAAO,QAChB,OAAAA,EACA,cAAeN,GAAU,KACzB,YAAa,KAAK,MAClB,WAAWO,GAAA,YAAAA,EAAU,YAAa,GAClC,MAAO,KACR,CACH,CAAC,EACD9B,EAAI,CAAE,QAAS4B,EAAW,CAC5B,EAEA,aAAc,CAACN,EAASO,IAAW,CACjC,MAAMT,EAAU,IAAI,IAAInB,EAAA,EAAM,OAAO,EAC/B6B,EAAWV,EAAQ,IAAIE,CAAO,EAC9B,CAAE,eAAAK,CAAA,EAAmB1B,EAAA,EACrBsB,EAASI,EAAe,OAAO,IAAIL,CAAO,GAAKK,EAAe,OAAO,IAAIL,CAAO,EAEtFF,EAAQ,IAAIE,EAAS,CACnB,QAAAA,EACA,OAAAO,EACA,cAAeN,IAAUO,GAAA,YAAAA,EAAU,gBAAiB,KACpD,YAAa,KAAK,MAClB,UAAW,GACX,MAAO,KACR,EACD9B,EAAI,CAAE,QAAAoB,EAAS,CACjB,EAEA,iBAAkB,CAACE,EAASS,IAAY,CACtC,MAAMX,EAAU,IAAI,IAAInB,EAAA,EAAM,OAAO,EAC/B6B,EAAWV,EAAQ,IAAIE,CAAO,EAChCQ,IACFV,EAAQ,IAAIE,EAAS,CAAE,GAAGQ,EAAU,UAAWC,EAAS,EACxD/B,EAAI,CAAE,QAAAoB,EAAS,EAEnB,EAEA,eAAgB,CAACE,EAASV,IAAU,CAClC,MAAMQ,EAAU,IAAI,IAAInB,EAAA,EAAM,OAAO,EAC/B6B,EAAWV,EAAQ,IAAIE,CAAO,EAChCQ,IACFV,EAAQ,IAAIE,EAAS,CAAE,GAAGQ,EAAU,MAAAlB,EAAO,UAAW,GAAO,EAC7DZ,EAAI,CAAE,QAAAoB,EAAS,EAEnB,EAGA,aAAc,MAAOE,EAASU,IAAY,CACxC,MAAMC,EAAY,OAAO,KAAK,KAAK,IAAI,KAAK,SAAS,SAAS,EAAE,EAAE,OAAO,EAAG,CAAC,CAAC,GACxEC,EAA+B,CACnC,GAAID,EACJ,QAAAX,EACA,QAAS,CAAE,GAAGU,EAAS,GAAIA,EAAQ,IAAMC,CAAA,EACzC,SAAU,KAAK,MACf,WAAY,GAGd,OAAAjC,EAAKd,IAAW,CACd,aAAc,CAAC,GAAGA,EAAM,aAAcgD,CAAa,GACnD,EAGGjC,EAAA,EAAM,sBACT,MAAMA,EAAA,EAAM,QAAQ,sBAGfgC,CACT,EAEA,oBAAqB,SAAY,CAC/B,KAAM,CAAE,aAAAE,EAAc,qBAAAC,EAAsB,QAAAC,CAAA,EAAYpC,EAAA,EAExD,GAAI,EAAAmC,GAAwBD,EAAa,SAAW,GAIpD,CAAAnC,EAAI,CAAE,qBAAsB,GAAM,EAElC,GAAI,CACF,KAAOC,EAAA,EAAM,aAAa,OAAS,GAAG,CACpC,KAAM,CAACqC,EAAa,GAAGC,CAAS,EAAItC,IAAM,aAC1CD,EAAI,CAAE,aAAcuC,EAAW,EAE/B,GAAI,CAEFF,EAAQ,iBAAiBC,EAAY,QAAS,EAAI,EAGlD,KAAM,CAAE,eAAAE,CAAA,EAAmB,MAAAd,EAAA,+BAAAc,GAAA,KAAM,QAAO,wBAAiB,oEACnDC,EAAS,MAAMD,EAAeF,EAAY,QAASA,EAAY,OAAO,EAG5E,GAAIG,EAAO,SAAW,UAAW,CAE/B,KAAM,CAAE,wBAAAC,CAAA,EAA4B,MAAAhB,EAAA,wCAAAgB,GAAA,KAAM,QAAO,6BAAiD,yDAClGA,EAAA,EAGA,KAAM,CAAE,+BAAAC,CAAA,EAAmC,MAAAjB,EAAA,+CAAAiB,CAAA,QAAM,2BAAAC,CAAA,oEACjD,MAAMD,EAAA,EAGN,MAAMN,EAAQ,cAAcC,EAAY,OAAO,EAC/CD,EAAQ,gBAAgB,CACtB,KAAM,UACN,QAAS,iCACT,SAAU,GACX,CACH,SAAWI,EAAO,SAAW,UAAYA,EAAO,SAAW,YAAa,CAEtE,MAAMI,EAAelC,GAAgB8B,EAAO,YAAcA,EAAO,MAAQ,CACvE,KAAMA,EAAO,WACb,QAASA,EAAO,MAChB,QAASA,EAAO,QAAiB,EAAC,EAChC,IAAI,EAERJ,EAAQ,eAAeC,EAAY,QAASO,CAAY,EACxDR,EAAQ,gBAAgB,CACtB,KAAM,QACN,QAASQ,EACT,SAAU,GACX,CACH,CAEF,OAASjC,EAAO,CAEd,MAAMiC,EAAejC,aAAiB,MAAQA,EAAM,QAAU,gBAC9DyB,EAAQ,eAAeC,EAAY,QAASO,CAAY,EACxDR,EAAQ,gBAAgB,CACtB,KAAM,QACN,QAAS,kBAAkBQ,CAAY,GACvC,SAAU,GACX,CACH,SACER,EAAQ,iBAAiBC,EAAY,QAAS,EAAK,CACrD,CACF,CACF,SACEtC,EAAI,CAAE,qBAAsB,GAAO,CACrC,EACF,EAEA,aAAeiC,GAAc,CAC3B,KAAM,CAAE,aAAAE,CAAA,EAAiBlC,EAAA,EACnB6C,EAAUX,EAAa,KAAKY,GAAOA,EAAI,KAAOd,CAAS,EAC7D,GAAIa,EAAS,CACX,MAAME,EAAe,CACnB,GAAGF,EACH,WAAYA,EAAQ,WAAa,EACjC,SAAU,KAAK,KAAI,EAErB9C,EAAI,CACF,aAAcmC,EAAa,OAAOY,GAAOA,EAAI,KAAOd,CAAS,EAAE,OAAOe,CAAY,EACnF,CACH,CACF,EAEA,cAAgBf,GAAc,CAC5BjC,EAAKd,IAAW,CACd,aAAcA,EAAM,aAAa,OAAO6D,GAAOA,EAAI,KAAOd,CAAS,GACnE,CACJ,EAEA,kBAAmB,IAAM,CACvBjC,EAAI,CAAE,aAAc,GAAI,CAC1B,EAGA,eAAiBiD,GAAS,CACxBjD,EAAKd,IAAW,CACd,GAAI,CAAE,GAAGA,EAAM,GAAI,YAAa+D,CAAA,CAAK,EACrC,CACJ,EAEA,eAAiBrC,GAAU,CACzBZ,EAAKd,IAAW,CACd,GAAI,CAAE,GAAGA,EAAM,GAAI,YAAa0B,CAAA,CAAM,EACtC,CACJ,EAEA,gBAAkBsC,GAAiB,CACjC,MAAMC,EAAK,SAAS,KAAK,KAAK,IAAI,KAAK,SAAS,SAAS,EAAE,EAAE,OAAO,EAAG,CAAC,CAAC,GACnEC,EAAgC,CACpC,GAAGF,EACH,GAAAC,EACA,UAAW,KAAK,KAAI,EAGtBnD,EAAKd,IAAW,CACd,GAAI,CACF,GAAGA,EAAM,GACT,cAAe,CAAC,GAAGA,EAAM,GAAG,cAAekE,CAAe,EAC5D,EACA,EAGEF,EAAa,UACf,WAAW,IAAM,CACfjD,IAAM,QAAQ,mBAAmBkD,CAAE,CACrC,EAAG,GAAI,CAEX,EAEA,mBAAqBA,GAAO,CAC1BnD,EAAKd,IAAW,CACd,GAAI,CACF,GAAGA,EAAM,GACT,cAAeA,EAAM,GAAG,cAAc,OAAOmE,GAAKA,EAAE,KAAOF,CAAE,EAC/D,EACA,CACJ,EAEA,mBAAoB,IAAM,CACxBnD,EAAKd,IAAW,CACd,GAAI,CAAE,GAAGA,EAAM,GAAI,cAAe,EAAC,CAAE,EACrC,CACJ,EAGF,gBAAiB,SAAY,CAE3B,MAAMe,EAAA,EAAM,QAAQ,qBAGpB,MAAMA,EAAA,EAAM,QAAQ,iBAKpB,MAAMmB,EAAUnB,IAAM,SACS,MAAM,KAAKmB,EAAQ,QAAQ,EAAE,KAC1DC,GAAUA,EAAO,QAAU,CAACA,EAAO,OAAO,YAGdD,EAAQ,OAAS,KAC7C,QAAQ,IAAI,+DAA+D,EAC3EnB,IAAM,QAAQ,aAAa,GAAI,EAG/B,WAAW,IAAM,CACf,MAAMqD,EAAiBrD,IAAM,QACA,MAAM,KAAKqD,EAAe,QAAQ,EAAE,KAC/DjC,GAAUA,EAAO,QAAU,CAACA,EAAO,OAAO,YAO1C,QAAQ,IAAI,uEAAuE,EACnFpB,EAAA,EAAM,QAAQ,gBAJd,QAAQ,IAAI,2CAA2C,EACvDA,EAAA,EAAM,QAAQ,cAKlB,EAAG,GAAK,EAEZ,EAEA,eAAgB,SAAY,CAC1B,GAAI,CACF,KAAM,CAAE,UAAAsD,CAAA,EAAc,MAAA7B,EAAA,0BAAA6B,CAAA,QAAM,2BAAAC,CAAA,+CACtBC,EAAO,MAAMF,EAA+C,YAAY,EACxEnC,EAAU,OAAO,OAAOqC,CAAI,EAClCxD,IAAM,QAAQ,WAAWmB,CAAO,EAChCnB,IAAM,QAAQ,eAAe,IAAI,CACnC,OAASW,EAAO,CACd,MAAM8C,EAAU9C,aAAiB,MAAQA,EAAM,QAAU,4BACzD,MAAAX,IAAM,QAAQ,eAAeyD,CAAO,EAC9B9C,CACR,CACF,EAAQ,cAAe,MAAOU,GAAY,CACtC,GAAI,CACFrB,EAAA,EAAM,QAAQ,iBAAiBqB,EAAS,EAAI,EAC5C,KAAM,CAAE,SAAAqC,CAAA,EAAa,MAAAjC,EAAA,yBAAAiC,CAAA,QAAM,2BAAAH,CAAA,8CAC3B,MAAMG,EAAS,eAAe,mBAAmBrC,CAAO,CAAC,UAAW,EAAE,EAGtE,MAAMrB,EAAA,EAAM,QAAQ,gBACtB,OAASW,EAAO,CACd,MAAM8C,EAAU9C,aAAiB,MAAQA,EAAM,QAAU,2BACzD,MAAAX,EAAA,EAAM,QAAQ,eAAeqB,EAASoC,CAAO,EACvC9C,CACR,CACF,EAEA,gBAAiB,MAAOU,GAAY,CAClC,GAAI,CACF,KAAM,CAAE,SAAAqC,CAAA,EAAa,MAAAjC,EAAA,yBAAAiC,CAAA,QAAM,2BAAAH,CAAA,8CAC3B,MAAMG,EAAS,eAAe,mBAAmBrC,CAAO,CAAC,WAAY,EAAE,EACvErB,EAAA,EAAM,QAAQ,gBAAgB,CAC5B,KAAM,UACN,QAAS,uBAAuBqB,CAAO,GACvC,SAAU,GACX,EAGD,MAAMrB,EAAA,EAAM,QAAQ,gBACtB,OAASW,EAAO,CACd,MAAM8C,EAAU9C,aAAiB,MAAQA,EAAM,QAAU,8BACzD,MAAAX,EAAA,EAAM,QAAQ,gBAAgB,CAC5B,KAAM,QACN,QAAS,sBAAsByD,CAAO,GACtC,SAAU,GACX,EACK9C,CACR,CACF,EAGA,aAAc,CAACgD,EAAa,MAAU,CACpC,KAAM,CAAE,QAAAC,CAAA,EAAY5D,EAAA,EAGhB4D,EAAQ,YACV,cAAcA,EAAQ,UAAU,EAIlC,MAAMC,EAAa,YAAY,IAAM,CAEnC,KAAM,CAAE,eAAAnC,EAAgB,QAAAP,CAAA,EAAYnB,EAAA,EAChC0B,EAAe,UAAYP,EAAQ,KAAO,GAC5CnB,EAAA,EAAM,QAAQ,iBAAiB,MAAOW,GAAU,CAC9C,QAAQ,KAAK,0BAA2BA,CAAK,CAE/C,CAAC,CAEL,EAAGgD,CAAU,EAEb5D,EAAKd,IAAW,CACd,QAAS,CACP,GAAGA,EAAM,QACT,UAAW,GACX,WAAA4E,EACA,WAAAF,CAAA,CACF,EACA,CACJ,EAEA,YAAa,IAAM,CACjB,KAAM,CAAE,QAAAC,CAAA,EAAY5D,EAAA,EAEhB4D,EAAQ,YACV,cAAcA,EAAQ,UAAU,EAGlC7D,EAAKd,IAAW,CACd,QAAS,CACP,GAAGA,EAAM,QACT,UAAW,GACX,WAAY,KACd,EACA,CACJ,EAEA,mBAAqB0E,GAAe,CAClC,KAAM,CAAE,QAAAC,CAAA,EAAY5D,EAAA,EAEpBD,EAAKd,IAAW,CACd,QAAS,CACP,GAAGA,EAAM,QACT,WAAA0E,CAAA,CACF,EACA,EAGEC,EAAQ,WACV5D,IAAM,QAAQ,aAAa2D,CAAU,CAEzC,EAEN,GAEMG,GAAoB,IACxBlE,GAAA,EAA2Ba,GAAsBG,EAAgB,CAAC,EAEvDmD,EAAcD,GAAA,EAgBdE,EAAa,IAAMD,EAAY,WAAW,QAe1CE,EAAmB,IAAMF,EAAY,WAAW,GAAG,0JCpmBzD,SAASG,GAAWC,EAA2B,CAEpD,MAAMC,EADM,KAAK,MAAQ,IACND,EAEnB,OAAIC,EAAO,EAAU,WACjBA,EAAO,GAAW,GAAG,KAAK,MAAMA,CAAI,CAAC,QACrCA,EAAO,KAAa,GAAG,KAAK,MAAMA,EAAO,EAAE,CAAC,QAC5CA,EAAO,MAAc,GAAG,KAAK,MAAMA,EAAO,IAAI,CAAC,QAC5C,GAAG,KAAK,MAAMA,EAAO,KAAK,CAAC,OACpC,CCbA,SAASC,GAAsBC,EAA+D,CAE5F,MAAMC,EADQR,EAAY,WACC,eAAe,OAAO,IAAIO,CAAa,EAElE,GAAI,EAACC,GAAA,MAAAA,EAAc,gBACjB,MAAO,GAGT,MAAMC,EAAeD,EAAa,eAAe,KAC9CjD,GAAgBA,EAAO,KAAOiD,EAAa,uBAG9C,GAAI,EAACC,GAAA,MAAAA,EAAc,YAAaA,EAAa,UAAU,SAAW,EAChE,MAAO,GAIT,MAAMC,EADiBD,EAAa,UAAUA,EAAa,UAAU,OAAS,CAAC,EAChD,QAE/B,OAAIC,EAAQ,OAAS,QAAU,CAACA,EAAQ,SAC/B,GAKFA,EAAQ,SAAS,IAAKC,IAAkB,CAC7C,GAAGA,EACH,SAAUH,EAAa,UACvB,CACJ,CAKO,SAASI,GAAsBvD,EAAoD,CAExF,MAAMmD,EADQR,EAAY,WACC,eAAe,OAAO,IAAI3C,EAAO,OAAO,EAGnE,GAAImD,GAAA,MAAAA,EAAc,gBAAkBA,EAAa,sBAAuB,CACtE,MAAMC,EAAeD,EAAa,eAAe,KAC9CjD,GAAgBA,EAAO,KAAOiD,EAAa,uBAG9C,GAAIC,GAAA,MAAAA,EAAc,WAAaA,EAAa,UAAU,OAAS,EAAG,CAEhE,MAAMC,EADiBD,EAAa,UAAUA,EAAa,UAAU,OAAS,CAAC,EAChD,QAG/B,GAAIC,EAAQ,OAAS,QAAUA,EAAQ,UAAYA,EAAQ,SAAS,OAAS,EAC3E,OAAOG,GAAwBxD,CAAoB,CAEvD,CACF,CAGA,MAAO;AAAA;AAAA,4CAEmCA,EAAO,UAAY,iBAAmB,iBAAiB;AAAA,UACzFA,EAAO,UAAY,cAAgB,gBAAgB;AAAA;AAAA;AAAA,uBAGtC,IAAI,KAAKA,EAAO,WAAa,GAAI,EAAE,oBAAoB;AAAA;AAAA;AAAA,GAI9E,CAKA,SAASwD,GAAwBxD,EAA4CmD,EAA2B,CACtG,MAAMM,EAAWR,GAAsBjD,EAAO,OAAO,EAErD,GAAIyD,EAAS,SAAW,EACtB,MAAO;AAAA;AAAA;AAAA;AAAA,MAQT,MAAMC,EAAyC,CAC7C,QAAS,EACT,KAAM,EACN,SAAU,EACV,SAAU,GAeNC,EAXkB,CAAC,GAAGF,CAAQ,EAAE,KAAK,CAAC,EAAGG,IAAM,CACnD,MAAMC,EAASH,EAAY,EAAE,MAAM,GAAK,GAClCI,EAASJ,EAAYE,EAAE,MAAM,GAAK,GACxC,OAAIC,IAAWC,EACND,EAASC,EAGX,EAAE,QAAQ,cAAcF,EAAE,OAAO,CAC1C,CAAC,EAGgC,OAAOG,GAAKA,EAAE,SAAW,UAAU,EAAE,MAAM,EAAG,CAAC,EAEhF,MAAO;AAAA;AAAA,QAEDJ,EAAS,OAAS,EAAI;AAAA;AAAA;AAAA,cAGhBA,EAAS,IAAIK,GAAKC,GAAmBD,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC;AAAA;AAAA;AAAA,QAGrD;AAAA;AAAA;AAAA;AAAA,OAIH;AAAA;AAAA,GAGP,CAKA,SAASC,GAAmBX,EAAqE,CAC/F,MAAMY,EAAkB1D,GAAmB,CACzC,OAAQA,EAAA,CACN,IAAK,UAAW,MAAO,iBACvB,IAAK,OACL,IAAK,WAAY,MAAO,iBACxB,IAAK,WAAY,MAAO,eACxB,QAAS,MAAO,kBAEpB,EAEM2D,EAAiB3D,GAAmB,CACxC,OAAQA,EAAA,CACN,IAAK,UAAW,MAAO,SACvB,IAAK,OAAQ,MAAO,OACpB,IAAK,WAAY,MAAO,WACxB,IAAK,WAAY,MAAO,WACxB,QAAS,MAAO,UAEpB,EAEM4D,EAAcF,EAAeZ,EAAQ,MAAM,EAC3Ce,EAAaF,EAAcb,EAAQ,MAAM,EAG/C,IAAIgB,EAAgB,GAChBhB,EAAQ,UAAY,MAAM,QAAQA,EAAQ,QAAQ,EAUpDgB,EARqBhB,EAAQ,SAC1B,IAAIiB,GAAW,CACd,MAAMC,EAAQlB,EAAQ,OAAOiB,EAAQ,GAAG,EAGxC,MAAO,GADaA,EAAQ,OAASA,EAAQ,IAAI,OAAO,CAAC,EAAE,cAAgBA,EAAQ,IAAI,MAAM,CAAC,CACzE,IAAIC,CAAK,GAChC,CAAC,EACA,OAAOC,GAAOA,CAAG,EACS,KAAK,GAAG,EAGrCH,EAAgB,OAAO,QAAQhB,EAAQ,MAAM,EAC1C,IAAI,CAAC,CAACiB,EAASC,CAAK,IAEZ,GADaD,EAAQ,OAAO,CAAC,EAAE,cAAgBA,EAAQ,MAAM,CAAC,CAChD,IAAIC,CAAK,GAC/B,EACA,KAAK,GAAG,EAGb,MAAME,EAAY,GAAGpB,EAAQ,OAAO,MAAMA,EAAQ,MAAM,GAExD,MAAO;AAAA,+GACsGc,CAAW;AAAA;AAAA,0GAEhBd,EAAQ,KAAK;AAAA;AAAA,YAE3Ge,CAAU,MAAMK,CAAS,MAAMpB,EAAQ,WAAW;AAAA;AAAA;AAAA,EAG5DgB,CAAa;AAAA;AAAA;AAAA,GAIf,CC5LO,SAASK,GAAiBzB,EAAuB0B,EAAkC,CAIxF,MAAM1E,EAHQyC,EAAY,WAGL,eAAe,OAAO,IAAIO,CAAa,EAC5D,OAAIhD,GAAA,MAAAA,EAAQ,WAAa0E,KAAa1E,EAAO,UACpCA,EAAO,UAAU0E,CAAS,EAG5B,IACT,CAgBO,SAASC,GAAmBC,EAAmD,CACpF,GAAI,CAACA,GAAY,CAAC,MAAM,QAAQA,CAAQ,GAAKA,EAAS,SAAW,EAC/D,MAAO,OAIT,GAAI,OAAOA,EAAS,CAAC,GAAM,SAAU,CACnC,MAAMC,EAAiC,CACrC,OAAU,MACV,QAAW,MACX,UAAa,MACb,SAAY,MACZ,OAAU,MACV,SAAY,MACZ,OAAU,OAENC,EAAcF,EAAsB,IAAIG,GAAOF,EAAOE,EAAI,aAAa,CAAC,EAAE,OAAO,OAAO,EAE9F,OAAID,EAAW,SAAW,EAAU,WAChCA,EAAW,SAAW,GAAK,CAAC,MAAO,MAAO,MAAO,MAAO,KAAK,EAAE,MAAME,GAAKF,EAAW,SAASE,CAAC,CAAC,EAC3F,WAELF,EAAW,SAAW,GAAKA,EAAW,SAAS,KAAK,GAAKA,EAAW,SAAS,KAAK,EAC7E,WAEFA,EAAW,KAAK,IAAI,CAC7B,CAGA,MAAMG,EAAW,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAK,EAC3DC,EAAaN,EAAsB,OAAOG,GAAO,OAAOA,GAAQ,UAAYA,GAAO,GAAKA,GAAO,CAAC,EAEtG,GAAIG,EAAU,SAAW,EACvB,MAAO,OAGT,MAAMC,EAAa,CAAC,GAAGD,CAAS,EAAE,OAGlC,OAAIC,EAAW,SAAW,EACjB,WAILA,EAAW,SAAW,GAAKA,EAAW,SAAaJ,GAAO,GAAKA,GAAO,CAAC,EAClE,WAILI,EAAW,SAAW,GAAKA,EAAW,SAAS,CAAC,GAAKA,EAAW,SAAS,CAAC,EACrE,WAIFA,EAAW,IAAIJ,GAAOE,EAASF,CAAG,CAAC,EAAE,KAAK,IAAI,CACvD,CAKO,SAASK,GAAkBV,EAAmB1B,EAA8D,SAEjH,MAAMhD,EADQyC,EAAY,WACL,eAAe,OAAO,IAAIO,CAAa,EAE5D,GAAI,CAAChD,GAAU,CAACA,EAAO,gBAAkBA,EAAO,eAAe,SAAW,EACxE,MAAO,CAAE,QAAS,MAAO,SAAU,OAGrC,MAAMkD,EAAelD,EAAO,eAAe,KAAMqF,GAAWA,EAAE,KAAOrF,EAAO,qBAAqB,GAAKA,EAAO,eAAe,CAAC,EAC7H,GAAI,CAACkD,GAAgB,CAACA,EAAa,WAAaA,EAAa,UAAU,SAAW,EAChF,MAAO,CAAE,QAAS,MAAO,SAAU,OAIrC,MAAMoC,GAAaC,EADIrC,EAAa,UAAUA,EAAa,UAAU,OAAS,CAAC,EAC7C,QAAf,YAAAqC,EAAsB,KAAMC,GAAWA,EAAE,QAAUd,GAEtE,GAAI,CAACY,EACH,MAAO,CAAE,QAAS,MAAO,SAAU,OAIrC,IAAIG,EAAU,MACd,MAAMC,EAAWJ,EAAW,SACxBI,GAAYA,EAAS,cAAgB,QAAaA,EAAS,cAAgB,OAC7ED,EAAU,GAAGC,EAAS,WAAW,MAInC,MAAMC,EAAehB,IAAmBiB,EAAAN,EAAW,aAAX,YAAAM,EAAuB,IAAI,EACnE,MAAO,CAAE,QAAAH,EAAS,SAAUE,CAAA,CAC9B,CCjHO,SAASE,GAAsB/F,EAAoD,SAExF,MAAME,EADeyC,EAAY,WACL,eAAe,OAAO,IAAI3C,EAAO,OAAO,EAGpE,OAAI8F,GAAAL,EAAAvF,GAAA,YAAAA,EAAQ,cAAR,YAAAuF,EAAqB,SAArB,MAAAK,EAA6B,MACxBE,GAAgB9F,EAAO,YAAY,OAAO,MAAOA,EAAQF,EAAO,OAAO,EAIzE;AAAA;AAAA,4CAEmCA,EAAO,UAAY,iBAAmB,iBAAiB;AAAA,UACzFA,EAAO,UAAY,cAAgB,gBAAgB;AAAA;AAAA;AAAA,uBAGtC,IAAI,KAAKA,EAAO,WAAa,GAAI,EAAE,oBAAoB;AAAA;AAAA;AAAA,GAI9E,CAKA,SAASgG,GAAgBC,EAAcC,EAAmBhD,EAAgC,CAGxF,MAAMiD,EAAW,GAEjB,QAAS,EAAI,EAAG,EAAI,EAAG,IAAK,CAC1B,MAAMC,EAAaH,EAAM,CAAC,EACpBrB,EAAY,EAAI,EAGhByB,EAAanD,EAAgBoC,GAAkBV,EAAW1B,CAAa,EAAI,CAAE,QAAS,MAAO,SAAU,OAGvGoD,EAAapD,EAAgByB,GAAiBzB,EAAe0B,CAAS,EAAI,KAG1E2B,EAAaH,GAAA,MAAAA,EAAY,gBAAkB,IAAIA,EAAW,gBAAkB,IAAI,QAAQ,CAAC,CAAC,KAAO,MAEvGD,EAAS,KAAK,CACZ,MAAOvB,EACP,WAAAwB,EACA,WAAAC,EACA,WAAAC,EACA,WAAAC,CAAA,CACD,CACH,CAEA,MAAO;AAAA;AAAA,QAEDJ,EAAS,IAAKK,GAAcC,GAAeD,CAAI,CAAC,EAAE,KAAK,EAAE,CAAC;AAAA;AAAA,GAGlE,CAKA,SAASC,GAAeD,EAAmB,CACzC,KAAM,CAAE,MAAAE,EAAO,WAAAN,EAAY,WAAAC,EAAY,WAAAC,EAAY,WAAAC,GAAeC,EAGlE,IAAInC,EAAa,WACbsC,EAAc,kBACdC,EAAW,MACXC,EAAa,GAEjB,GAAIT,EAGF,OADaA,EAAW,KAChB,CACN,IAAK,GACH/B,EAAa,SACbsC,EAAc,iBACdC,EAAW,QACXC,EAAa,GACb,MACF,IAAK,GACHxC,EAAa,SACbsC,EAAc,iBACdC,EAAW,MACXC,EAAa,GACb,MACF,IAAK,GACHxC,EAAa,SACbsC,EAAc,iBACdC,EAAW,SACXC,EAAa,GACb,MACF,IAAK,GACHxC,EAAa,SACbsC,EAAc,iBACdC,EAAW,QACXC,EAAa,GACb,MACF,IAAK,GACL,QACExC,EAAa,WACbsC,EAAc,kBACdC,EAAW,WACXC,EAAa,GACb,MAIN,MAAMC,EAAWR,GAAc,QAAQI,CAAK,GAG5C,OAAIG,EACK;AAAA,iHACsGF,CAAW;AAAA;AAAA,wFAEpCG,CAAQ;AAAA,gDAChDH,CAAW,wBAAwBtC,CAAU;AAAA;AAAA;AAAA,MAMpF;AAAA,+GACsGsC,CAAW;AAAA;AAAA;AAAA,sFAGpCG,CAAQ;AAAA,sEACxBF,CAAQ;AAAA,8CAChCD,CAAW,wBAAwBtC,CAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uEAOpBgC,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA,uEAIlBA,EAAW,QAAQ;AAAA;AAAA;AAAA;AAAA,uEAInBE,CAAU;AAAA;AAAA;AAAA;AAAA,GAKjF,CCnJC,OAAe,qBAAwBtG,GAAoB,CAC1D,MAAM8G,EAAO,SAAS,cAAc,yBAAyB9G,CAAO,IAAI,EACpE8G,GACFA,EAAK,UAAU,OAAO,SAAS,CAEnC,EAKO,SAASC,EACdC,EACAlH,EACQ,CACR,MAAO;AAAA;AAAA;AAAA,iCAGwBkH,CAAK;AAAA;AAAA,0CAEIlH,EAAQ,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAU9CA,EAAQ,IAAIC,GAAUkH,GAAiBlH,CAAM,CAAC,EAAE,KAAK,EAAE,CAAC;AAAA;AAAA;AAAA,GAIlE,CAMA,SAASkH,GAAiBlH,EAAoD,CAC5E,MAAM2G,EAAc3G,EAAO,UAAY,iBAAmB,kBACpDqE,EAAarE,EAAO,UAAY,YAAc,eAG9CmH,EAAexE,EAAY,WAC3BzC,EAASF,EAAO,cAAgB,QAClCmH,EAAa,eAAe,OAAO,IAAInH,EAAO,OAAO,EACrDmH,EAAa,eAAe,OAAO,IAAInH,EAAO,OAAO,EAEnDoH,GAAalH,GAAA,YAAAA,EAAQ,OAAQF,EAAO,QACpCqH,EAAUvE,GAAW9C,EAAO,UAAU,EAE5C,MAAO;AAAA,kDACyCA,EAAO,OAAO;AAAA;AAAA;AAAA;AAAA,yCAIvBA,EAAO,WAAW,IAAIA,EAAO,UAAY,YAAc,cAAc,+CAA+C2G,CAAW;AAAA,cAC1JW,GAAuBtH,EAAQoH,EAAY/C,EAAYgD,CAAO,CAAC;AAAA,cAC/DE,GAAqBvH,CAAM,CAAC;AAAA,cAC5BwH,GAAuBxH,CAAM,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,YAKhCyH,GAAyBzH,EAAQoH,CAAU,CAAC;AAAA;AAAA;AAAA;AAAA,GAKxD,CAKA,SAASE,GACPtH,EACAoH,EACA/C,EACAgD,EACQ,CAGR,MAAO;AAAA;AAAA;AAAA;AAAA,4GAFarH,EAAO,UAAY,iBAAmB,iBAM2D;AAAA;AAAA,cAEzGoH,CAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAM2BpH,EAAO,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAYbA,EAAO,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wEAQMqH,CAAO;AAAA;AAAA;AAAA;AAAA,GAK/E,CAKA,SAASE,GAAqBvH,EAAoD,CAChF,MAAO;AAAA;AAAA,QAED0H,GAA4B1H,CAAM,CAAC;AAAA;AAAA,GAG3C,CAKA,SAAS0H,GAA4B1H,EAAoD,CACvF,OAAIA,EAAO,cAAgB,QAClBuD,GAAsBvD,CAAM,EAC1BA,EAAO,cAAgB,QACzB+F,GAAsB/F,CAAM,EAE5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASX,CAKA,SAASwH,GAAuBxH,EAAoD,CAClF,MAAM2H,EAAoB3H,EAAO,UAAY,aAAe,UACtD4H,EAAqB5H,EAAO,UAAY,aAAe,cAE7D,MAAO;AAAA;AAAA;AAAA,8EAGqEA,EAAO,OAAO,OAAOA,EAAO,WAAW;AAAA;AAAA;AAAA,4CAGzE4H,CAAkB,6CAA6C5H,EAAO,OAAO;AAAA,YAC7G2H,CAAiB;AAAA;AAAA;AAAA;AAAA,GAK7B,CAKA,SAASF,GAAyBzH,EAA4CoH,EAA4B,CACxG,MAAMvJ,EAAQ8E,EAAY,WACpBzC,EAASF,EAAO,cAAgB,QAClCnC,EAAM,eAAe,OAAO,IAAImC,EAAO,OAAO,EAC9CnC,EAAM,eAAe,OAAO,IAAImC,EAAO,OAAO,EAElD,MAAO;AAAA;AAAA;AAAA;AAAA,YAIGoH,CAAU;AAAA;AAAA;AAAA;AAAA;AAAA,sDAKgCpH,EAAO,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAY/CE,GAAA,YAAAA,EAAQ,OAAQkH,CAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAMrCpH,EAAO,cAAgB,QAAU;AAAA;AAAA;AAAA,gBAG3B,CAAC,EAAG,EAAG,EAAG,CAAC,EAAE,IAAI4E,GAAA,OAAa;AAAA;AAAA,2HAE6EA,CAAS;AAAA;AAAA;AAAA;AAAA,iCAInGA,CAAS;AAAA,+BACXa,EAAAvF,GAAA,YAAAA,EAAgB,YAAhB,YAAAuF,EAA4Bb,KAAc,EAAG;AAAA;AAAA;AAAA;AAAA;AAAA,gBAK7D,EAAE,KAAK,EAAE,CAAC;AAAA;AAAA;AAAA,UAGb,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAOE1E,GAAA,MAAAA,EAAQ,cAAgB,UAAY,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAWFF,EAAO,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAMZA,EAAO,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAQpE,CCvQO,SAAS6H,IAA4B,CAC1C,MAAMhK,EAAQ8E,EAAY,WAGpB5C,EAAkD,MAAM,KAAKlC,EAAM,QAAQ,QAAQ,EACtF,iBAAiB,OAAA4H,EAAAzF,EAAO,SAAP,YAAAyF,EAAe,UAAS,EACzC,IAAIzF,IAAW,CACd,GAAIA,EAAO,OACX,QAASA,EAAO,SAChB,EAGJ,OAAID,EAAQ,SAAW,EACd;AAAA;AAAA;AAAA;AAAA;AAAA,MAQF;AAAA,MACHiH,EAAoB,UAAWjH,CAAO,CAAC;AAAA,GAE7C,CCzBO,SAAS+H,IAAuB,CACrC,MAAMjK,EAAQ8E,EAAY,WAGpB5C,EAAkD,MAAM,KAAKlC,EAAM,QAAQ,QAAQ,EACtF,IAAImC,IAAW,CACd,GAAIA,EAAO,OACX,QAASA,EAAO,SAChB,EACD,OAAOkF,GAAKA,EAAE,OAAO,EAExB,MAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAMiCnF,EAAQ,MAAM;AAAA;AAAA;AAAA,YAG5CA,EAAQ,SAAW,EAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAMrB;AAAA;AAAA,gBAEEA,EAAQ,IAAIC,GAAU+H,GAA+B/H,CAAM,CAAC,EAAE,KAAK,EAAE,CAAC;AAAA;AAAA,WAE3E;AAAA;AAAA;AAAA;AAAA,GAKX,CAKA,SAAS+H,GAA+B/H,EAAqB,CAC3D,MAAMgI,EAAW,UAAUhI,EAAO,QAAQ,QAAQ,KAAM,GAAG,CAAC,GACtDiI,EAAajI,EAAO,WAAa,IAAI,KAAKA,EAAO,WAAa,GAAI,EAAE,iBAAmB,UAE7F,MAAO;AAAA;AAAA;AAAA;AAAA,kDAIyCgI,CAAQ;AAAA;AAAA;AAAA,2CAGfA,CAAQ;AAAA;AAAA,cAErChI,EAAO,OAAO;AAAA;AAAA,wEAE4CA,EAAO,WAAW;AAAA;AAAA;AAAA,4GAGkBA,EAAO,UAAY,uBAAyB,iBAAiB,oEAAoEA,EAAO,UAAY,iBAAmB,iBAAiB;AAAA,2GACzLA,EAAO,UAAY,iBAAmB,iBAAiB;AAAA,cACpJA,EAAO,UAAY,YAAc,cAAc;AAAA;AAAA,kEAEKiI,CAAU;AAAA;AAAA;AAAA;AAAA;AAAA,iDAK3BD,CAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yKAQgH,KAAK,UAAUhI,EAAQ,KAAM,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA,GAKxM,CC/EO,SAASkI,GAAoC,CAClD,MAAO;AAAA;AAAA,QAEDC,IAAc;AAAA,QACdC,IAAkB;AAAA;AAAA,UAEhBC,IAAe;AAAA;AAAA,QAEjBC,IAAc;AAAA;AAAA,GAGtB,CAKA,SAASH,IAAuB,CAC9B,MAAMhB,EAAexE,EAAY,WACZ,aAAM,KAAKwE,EAAa,QAAQ,QAAQ,EAAE,KAAKjC,GAAKA,EAAE,SAAS,EAC7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DAmBsD,IAAM,CACrD,GAAI,CACF,OAAO,aAAa,QAAQ,OAAO,IAAM,OAAS,KAAO,EAC3D,MAAY,CACV,MAAO,EACT,CACF,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAQlB,CAKA,SAASkD,IAA2B,CAGlC,MAAO;AAAA;AAAA;AAAA;AAAA,2BAFczF,EAAY,WAMK,GAAG,cAAgB,WAAa,SAAW,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAQrF,CAKA,SAAS0F,IAAwB,CAC/B,MAAMlB,EAAexE,EAAY,WAEjC,OAAIwE,EAAa,GAAG,YACX;AAAA;AAAA;AAAA;AAAA,aAIEA,EAAa,GAAG,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,MAQ/B;AAAA,4BACmBA,EAAa,GAAG,cAAgB,WAAa,SAAW,EAAE;AAAA,QAC9EU,IAAmB;AAAA;AAAA,4BAECV,EAAa,GAAG,cAAgB,MAAQ,SAAW,EAAE;AAAA,QACzEW,IAAc;AAAA;AAAA,GAGtB,CAKA,SAASQ,IAAuB,CAC9B,MAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAST,CAKO,SAASC,GAAyB,CACvC,MAAMC,EAAmB,SAAS,cAAc,uBAAuB,EACnEA,IACFA,EAAiB,UAAYN,EAAA,EAEjC,mJCvIA,eAAsBhG,EAAauG,EAAyB,CAC1D,MAAMC,EAAM,MAAM,MAAMD,EAAK,CAAE,QAAS,CAAE,OAAQ,oBAAsB,EACxE,GAAI,CAACC,EAAI,GAAI,CACX,MAAMC,EAAO,MAAMD,EAAI,OAAO,MAAM,IAAM,EAAE,EAC5C,MAAM,IAAI,MAAM,mBAAmBA,EAAI,MAAM,MAAMC,GAAQD,EAAI,UAAU,EAAE,CAC7E,CACA,OAAQ,MAAMA,EAAI,MACpB,CAEA,eAAsBpG,EAAYmG,EAAaG,EAA4B,CACzE,MAAMF,EAAM,MAAM,MAAMD,EAAK,CAC3B,OAAQ,OACR,QAAS,CAAE,eAAgB,mBAAoB,OAAQ,oBACvD,KAAMG,IAAS,OAAY,OAAY,KAAK,UAAUA,CAAI,EAC3D,EACD,GAAI,CAACF,EAAI,GAAI,CACX,MAAMC,EAAO,MAAMD,EAAI,OAAO,MAAM,IAAM,EAAE,EAC5C,MAAM,IAAI,MAAM,mBAAmBA,EAAI,MAAM,MAAMC,GAAQD,EAAI,UAAU,EAAE,CAC7E,CACA,OAAQ,MAAMA,EAAI,MACpB,CAeA,eAAsBG,EAAaJ,EAAaG,EAA4B,CAC1E,MAAMF,EAAM,MAAM,MAAMD,EAAK,CAC3B,OAAQ,QACR,QAAS,CAAE,eAAgB,mBAAoB,OAAQ,oBACvD,KAAMG,IAAS,OAAY,OAAY,KAAK,UAAUA,CAAI,EAC3D,EACD,GAAI,CAACF,EAAI,GAAI,CACX,MAAMC,EAAO,MAAMD,EAAI,OAAO,MAAM,IAAM,EAAE,EAC5C,MAAM,IAAI,MAAM,mBAAmBA,EAAI,MAAM,MAAMC,GAAQD,EAAI,UAAU,EAAE,CAC7E,CACA,OAAQ,MAAMA,EAAI,MACpB,uICpCA,eAAsBI,GAA2C,CAC/D,OAAO5G,EAA0B,YAAY,CAC/C,CAKA,eAAsB6G,GAAc9I,EAAwC,CAC1E,OAAOqC,EAAuB,eAAe,mBAAmBrC,CAAO,CAAC,WAAY,EAAE,CACxF,CAKA,eAAsB+I,GAAiB/I,EAAgC,CACrE,MAAMqC,EAAS,eAAe,mBAAmBrC,CAAO,CAAC,cAAe,EAAE,CAC5E,CAKA,eAAsBgJ,GAAoBhJ,EAAgC,CACxE,MAAMqC,EAAS,eAAe,mBAAmBrC,CAAO,CAAC,UAAW,EAAE,CACxE,CAKA,eAAsBiJ,GAAYC,EAAkB,EAA4B,CAC9E,OAAOjH,EAAwB,oBAAoBiH,CAAO,EAAE,CAC9D,iMCzBA,eAAsBC,GAAsC,CAC1D,MAAMpI,EAAU2B,EAAY,WAAW,QACvC3B,EAAQ,eAAe,IAAI,EAE3B,GAAI,CAEF,QAAQ,IAAI,kCAAkC,EAC9C,MAAMA,EAAQ,kBACd,QAAQ,IAAI,6BAA6B,EAGzC,QAAQ,IAAI,oCAAoC,EAChD,GAAI,CACF,MAAMqI,EAAY,MAAMP,EAAA,EAGlBQ,EAAiC,GAEvC,SAAW,CAACrJ,EAASO,CAAM,IAAK,OAAO,QAAQ6I,CAAS,EAAG,CACzDrI,EAAQ,aAAaf,EAASO,CAAM,EAGpC,QAAQ,IAAI,iCAAiCP,CAAO,KAAK,EACzD,MAAMsJ,EAAgBvI,EAAQ,oBAAoBf,EAASO,EAAO,WAAgC,EAC/F,MAAMgJ,GAAO,QAAQ,MAAM,6BAA6BvJ,CAAO,IAAKuJ,CAAG,CAAC,EAC3EF,EAAe,KAAKC,CAAa,CACnC,CAGA,MAAM,QAAQ,WAAWD,CAAc,EAEvC,QAAQ,IAAI,0BAA2B,OAAO,KAAKD,CAAS,EAAE,OAAQ,SAAS,CACjF,OAASI,EAAW,CAClB,QAAQ,MAAM,kCAAmCA,CAAS,EAC1DzI,EAAQ,eAAe,8BAA8B,CACvD,CACF,OAASwI,EAAK,CACZ,MAAMhI,EAAegI,aAAe,MAAQA,EAAI,QAAU,OAAOA,CAAG,EACpE,QAAQ,MAAM,mCAAoChI,CAAY,EAC9DR,EAAQ,eAAe,kCAAkCQ,CAAY,EAAE,CACzE,CACF,CAKA,eAAsBkI,IAAyC,CAC7D,GAAI,CAGF,MADgB/G,EAAY,WAAW,QACzB,gBAChB,OAASpD,EAAO,CACd,QAAQ,MAAM,qCAAsCA,CAAK,CAC3D,CACF,CAMA,IAAIoK,EAAoC,KACpCC,EAAsB,EAC1B,MAAMC,EAA2B,IAMjC,eAAsBvI,GAAgD,CACpE,MAAMwI,EAAM,KAAK,MACXC,EAAqBD,EAAMF,EAGjC,GAAIG,EAAqBF,EAA0B,CACjD,QAAQ,IAAI,2CAA2CE,CAAkB,SAAS,EAG9EJ,IAAuB,MACzB,aAAaA,CAAkB,EAIjC,MAAMK,EAAgBH,EAA2BE,EACjDJ,EAAqB,OAAO,WAAW,IAAM,CAC3C,QAAQ,IAAI,yCAAyC,EACrDrI,EAAA,EAAiC,MAAMkI,GACrC,QAAQ,MAAM,6BAA8BA,CAAG,EAEnD,EAAGQ,CAAa,EAChB,MACF,CAGA,QAAQ,IAAI,4CAA4C,EACxDJ,EAAsBE,EAEtB,GAAI,CACF,KAAM,CAAE,WAAAlH,CAAA,EAAe,MAAAvC,EAAA,2BAAAuC,CAAA,QAAM,2BAAAqH,EAAA,gDAC7B,MAAMrH,EAAA,EAAa,oBACrB,OAASrD,EAAO,CACd,QAAQ,MAAM,iCAAkCA,CAAK,CACvD,CACF,uLCiBO,SAAS2K,GAAmC,CACjD,MAAMC,EAAW,SAAS,eAAe,UAAU,EAC7CC,EAAa,SAAS,eAAe,YAAY,EACjDC,EAAY,SAAS,eAAe,WAAW,EAC/CC,EAAa,SAAS,eAAe,YAAY,EACjDC,EAAa,SAAS,eAAe,iBAAiB,EAE5D,GAAI,CAACJ,GAAY,CAACC,GAAc,CAACC,GAAa,CAACC,GAAc,CAACC,EAC5D,OAGF,MAAMC,EAAM,SAASL,EAAS,KAAK,GAAK,EAClCM,EAAQ,SAASL,EAAW,KAAK,GAAK,EACtCM,EAAO,SAASL,EAAU,KAAK,GAAK,EACpCM,EAAQ,SAASL,EAAW,KAAK,GAAK,EAEtClJ,EAASwJ,GAAsB,CAAE,IAAAJ,EAAK,MAAAC,EAAO,KAAAC,EAAM,MAAAC,EAAO,EAChEE,GAAsBzJ,CAAM,CAC9B,CAuBA,SAASyJ,GAAsBzJ,EAAwC,CACrE,MAAMmJ,EAAa,SAAS,eAAe,iBAAiB,EACvDA,IAELA,EAAW,UAAY;AAAA;AAAA;AAAA,oGAG2EO,EAAc1J,EAAO,YAAY,CAAC;AAAA;AAAA,QAE9HA,EAAO,aAAe,8IAAgJ,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAS/J0J,EAAc1J,EAAO,gBAAgB,GAAG,CAAC;AAAA;AAAA;AAAA;AAAA,iBAIzC0J,EAAc1J,EAAO,gBAAgB,KAAK,CAAC;AAAA;AAAA;AAAA;AAAA,iBAI3C0J,EAAc1J,EAAO,gBAAgB,IAAI,CAAC;AAAA;AAAA;AAAA;AAAA,iBAI1C0J,EAAc1J,EAAO,gBAAgB,KAAK,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oEAWQA,EAAO,OAAO;AAAA;AAAA;AAAA;AAAA,oEAIdA,EAAO,eAAe;AAAA;AAAA;AAAA;AAAA,oEAItBA,EAAO,UAAU;AAAA;AAAA;AAAA;AAAA,IAKrF,CCpGA,eAAsBhB,GAAuBH,EAAqD,CAChG,OAAOiC,EACL,eAAe,mBAAmBjC,CAAO,CAAC,kBAE9C,CAYA,eAAsB8K,GACpB9K,EACA+K,EACoC,CACpC,OAAOnC,EACL,eAAe,mBAAmB5I,CAAO,CAAC,yBAC1C+K,CAAA,CAEJ,CAEA,eAAsBC,GACpBhL,EACAiL,EACoC,CACpC,OAAOrC,EACL,eAAe,mBAAmB5I,CAAO,CAAC,2BAC1CiL,CAAA,CAEJ,CAMA,eAAsBC,EACpBlL,EACoC,CACpC,OAAOiC,EACL,eAAe,mBAAmBjC,CAAO,CAAC,yBAE9C,CAEA,eAAsBmL,EACpBnL,EACAoL,EACoC,CACpC,MAAMC,EAAW,IAAI,SACrBA,EAAS,OAAO,OAAQD,CAAI,EAE5B,MAAME,EAAW,MAAM,MACrB,eAAe,mBAAmBtL,CAAO,CAAC,yBAC1C,CACE,OAAQ,OACR,KAAMqL,CAAA,CACR,EAGF,GAAI,CAACC,EAAS,GAAI,CAChB,MAAMhM,EAAQ,MAAMgM,EAAS,OAAO,MAAM,KAAO,CAAE,OAAQA,EAAS,YAAa,EACjF,MAAM,IAAI,MAAMhM,EAAM,QAAU,eAAe,CACjD,CAEA,OAAOgM,EAAS,MAClB,oOCvLA,eAAsBC,GAAsBvL,EAAiBE,EAA8C,WACzG,MAAMsL,EAAQ,SAAS,cAAc,KAAK,EAC1CA,EAAM,UAAY,gBAGlB,MAAM5N,EAAQ8E,EAAY,WAE1B,GAAI,GADiB8C,EAAA5H,EAAM,QAAQ,IAAIoC,CAAO,IAAzB,YAAAwF,EAA4B,QAC9B,CACjB,QAAQ,MAAM,oBAAqBxF,CAAO,EAC1C,MACF,EAEoByL,GAAA5F,EAAAjI,EAAM,QAAQ,IAAIoC,CAAO,IAAzB,YAAA6F,EAA4B,gBAA5B,MAAA4F,EAA2C,KAE/DD,EAAM,UAAY;AAAA,mIAC+GxL,CAAO,uBAAuBE,CAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gFAY3FF,CAAO,OAAOE,CAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAkBrDF,CAAO,OAAOE,CAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAezE,SAAS,KAAK,YAAYsL,CAAK,EAG/BA,EAAM,iBAAiB,QAAUE,GAAM,CACjCA,EAAE,SAAWF,GACfA,EAAM,QAEV,CAAC,CACH,CAKA,eAAeG,GAAmB3L,EAAiBE,EAA8C,CAC/F,GAAI,CAEF,MAAM0L,EAAS,yBAAO,cAChBC,EAAeD,GAAA,YAAAA,EAAQ,YACzBA,MAAe,YAAc,gBAC7BA,MAAe,SAAW,IAG9B,MAAM3L,EAAS,MAAMiL,EAA0BlL,CAAO,EAGhD8L,EAAyB,CAC7B,QAAA9L,EACA,WAAAE,EACA,OAAAD,EACA,WAAY,IAAI,OAAO,aAAY,EAI/B8L,EAAO,KAAK,UAAUD,EAAY,KAAM,CAAC,EACzCE,EAAO,IAAI,KAAK,CAACD,CAAI,EAAG,CAAE,KAAM,mBAAoB,EACpDvD,EAAM,IAAI,gBAAgBwD,CAAI,EAE9BC,EAAO,SAAS,cAAc,GAAG,EACvCA,EAAK,KAAOzD,EACZyD,EAAK,SAAW,GAAGjM,EAAQ,QAAQ,KAAM,GAAG,CAAC,eAC7C,SAAS,KAAK,YAAYiM,CAAI,EAC9BA,EAAK,QACL,SAAS,KAAK,YAAYA,CAAI,EAC9B,IAAI,gBAAgBzD,CAAG,EAEnBoD,IACFA,EAAO,YAAcC,EACrBD,EAAO,SAAW,IAGpB,QAAQ,IAAI,qCAAqC,CACnD,OAAStM,EAAO,CACd,QAAQ,MAAM,iBAAkBA,CAAK,EACrC,MAAMsM,EAAS,yBAAO,cAClBA,IACFA,EAAO,YAAc,gBACrBA,EAAO,SAAW,GAClB,WAAW,IAAM,CACfA,EAAO,YAAc,wBACvB,EAAG,GAAI,EAEX,CACF,CAKA,eAAeM,GAAiBlM,EAAiBE,EAA8C,OAC7F,GAAI,CACF,MAAMiM,EAAY,SAAS,eAAe,mBAAmB,EACvDf,GAAO5F,EAAA2G,GAAA,YAAAA,EAAW,QAAX,YAAA3G,EAAmB,GAChC,GAAI,CAAC4F,EAAM,OAGX,MAAMgB,EAAe,SAAS,eAAe,WAAW,EACpDA,IACFA,EAAa,YAAc,aAAahB,EAAK,IAAI,IAInD,MAAMiB,EAAY,SAAS,eAAe,eAAe,EACrDA,IACFA,EAAU,MAAM,QAAU,QAC1BA,EAAU,MAAM,QAAU,OAI5B,MAAM3D,EAAO,MAAM0C,EAAK,OACxB,IAAIkB,EACJ,GAAI,CACFA,EAAa,KAAK,MAAM5D,CAAI,CAC9B,MAAY,CACV,MAAM,IAAI,MAAM,6BAA6B,CAC/C,CAGA,GAAI,CAAC4D,EAAW,QAAU,CAACA,EAAW,QACpC,MAAM,IAAI,MAAM,mDAAmD,EAOrE,GAAI,CAHc,QAChB,6BAA6BtM,CAAO;AAAA;AAAA,4CAEtB,CACVqM,IAAWA,EAAU,MAAM,QAAU,QACzCF,EAAU,MAAQ,GACdC,MAA2B,YAAc,IAC7C,MACF,CAGA,MAAMG,EAAa,SAAS,eAAe,gBAAgB,EACvDA,IACFA,EAAW,YAAc,eACzBA,EAAW,MAAM,gBAAkB,UACnCA,EAAW,MAAM,MAAQ,WAI3B,MAAMpL,EAAS,MAAMgK,EAA0BnL,EAASoL,CAAI,EAGxDmB,IACFA,EAAW,YAAc,uCACzBA,EAAW,MAAM,gBAAkB,UACnCA,EAAW,MAAM,MAAQ,WAI3BJ,EAAU,MAAQ,GACdC,GACF,WAAW,IAAM,CACXA,MAA2B,YAAc,IACzCC,IAAWA,EAAU,MAAM,QAAU,OAC3C,EAAG,GAAI,EAIT,MAAM3J,EAAY,WAAW,QAAQ,oBAAoB1C,EAASE,CAAU,EAE5E,QAAQ,IAAI,qCAAqC,CACnD,OAASZ,EAAO,CACd,QAAQ,MAAM,iBAAkBA,CAAK,EACrC,MAAMiN,EAAa,SAAS,eAAe,gBAAgB,EACvDA,IACFA,EAAW,YAAc,kBAAkBjN,aAAiB,MAAQA,EAAM,QAAU,eAAe,GACnGiN,EAAW,MAAM,gBAAkB,UACnCA,EAAW,MAAM,MAAQ,WAI3B,MAAMJ,EAAY,SAAS,eAAe,mBAAmB,EAC7D,WAAW,IAAM,CACfA,EAAU,MAAQ,GAClB,MAAMC,EAAe,SAAS,eAAe,WAAW,EACpDA,MAA2B,YAAc,GAC/C,EAAG,GAAI,CACT,CACF,CAGC,OAAe,mBAAqBT,GACpC,OAAe,iBAAmBO,+HC1N5B,SAASM,GAAoC,CAEjD,OAAe,UAAY,MAAOC,GAA4B,CAC7D/J,EAAY,WAAW,QAAQ,eAAe+J,CAAG,EACjDnE,EAAA,CACF,EAGC,OAAe,kBAAoB,SAAY,CAC9C,KAAM,CAAE,qBAAAoE,CAAA,EAAyB,MAAAtM,EAAA,qCAAAsM,CAAA,OAAM,QAAO,kCAA6B,0EAC3E,MAAMA,EAAA,CACR,EAGC,OAAe,iBAAmB,IAAM,CACvCtM,EAAA,iCAAAuM,CAAA,sCAAiB,wBAAAA,CAAA,2BAAE,KAAK,CAAC,CAAE,iBAAArE,KAAuB,CAChDA,GACF,CAAC,CACH,EAGC,OAAe,YAAc,IAAM,CAClC,MAAMsE,EAAe,aAAa,QAAQ,OAAO,EAC3CC,EAAWD,IAAiB,OAAS,QAAU,OACrD,QAAQ,IAAI,sBAAuBA,EAAc,KAAMC,CAAQ,EAC/D,aAAa,QAAQ,QAASA,CAAQ,EACtC,SAAS,gBAAgB,UAAYA,IAAa,OAAS,aAAe,GAC1E,QAAQ,IAAI,iDAAkD,SAAS,gBAAgB,SAAS,EAC/F,OAAe,kBAClB,EAGC,OAAe,oBAAuB9E,GAAqB,CAC1D,MAAM+E,EAAU,SAAS,eAAe,GAAG/E,CAAQ,UAAU,EACvDgF,EAAO,SAAS,eAAe,GAAGhF,CAAQ,OAAO,EAEvD,GAAI+E,GAAWC,EAAM,CACnB,MAAMC,EAAaF,EAAQ,MAAM,UAAY,OAC7CA,EAAQ,MAAM,QAAUE,EAAa,OAAS,QAC9CD,EAAK,MAAM,UAAYC,EAAa,eAAiB,eACvD,CACF,EAGC,OAAe,iBAAmB,SAAY,CAC7C,KAAM,CAAE,wBAAAvD,CAAA,EAA4B,MAAArJ,EAAA,wCAAAqJ,CAAA,QAAM,2BAAAnI,CAAA,EAAgC,+BAAAmI,CAAA,2BAGpEwD,EAAgB,SAAS,cAAc,+BAA+B,EACtEC,EAAkBD,GAAA,YAAAA,EAAe,UAEvC,GAAI,CAEEA,IACFA,EAAc,SAAW,GACzBA,EAAc,UAAY,oDAK5B,MAAMxD,EAAA,EAEN/G,EAAY,WAAW,QAAQ,gBAAgB,CAC7C,KAAM,UACN,QAAS,uCACV,CACH,OAASpD,EAAO,CACdoD,EAAY,WAAW,QAAQ,gBAAgB,CAC7C,KAAM,QACN,QAAS,oCAAoCpD,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,CAAC,GACpG,CACH,SAEM2N,GAAiBC,IACnBD,EAAc,SAAW,GACzBA,EAAc,UAAYC,EAE9B,CACF,EAEC,OAAe,oBAAsB,MAAOlN,GAAoB,CAC/D,KAAM,CAAE,oBAAAgJ,CAAA,EAAwB,MAAA5I,EAAA,oCAAA4I,CAAA,QAAM,2BAAAlJ,CAAA,yDAChC,CAAE,wBAAA2J,CAAA,EAA4B,MAAArJ,EAAA,wCAAAqJ,CAAA,QAAM,2BAAAnI,CAAA,EAAgC,+BAAAmI,CAAA,2BAEpEwD,EAAgB,SAAS,cAAc,mCAAmCjN,CAAO,MAAM,EACvFkN,EAAkBD,GAAA,YAAAA,EAAe,UAEvC,GAAI,CACEA,IACFA,EAAc,SAAW,GACzBA,EAAc,UAAY,sCAG5B,MAAMjE,EAAoBhJ,CAAO,EACjC,MAAMyJ,EAAA,EAEN/G,EAAY,WAAW,QAAQ,gBAAgB,CAC7C,KAAM,UACN,QAAS,UAAU1C,CAAO,oBAC1B,SAAU,GACX,CACH,OAASV,EAAO,CACdoD,EAAY,WAAW,QAAQ,gBAAgB,CAC7C,KAAM,QACN,QAAS,oCAAoCpD,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,CAAC,GACpG,CACH,SACM2N,GAAiBC,IACnBD,EAAc,SAAW,GACzBA,EAAc,UAAYC,EAE9B,CACF,EAGA,WAAW,IAAM,CACX,SAAS,eAAe,UAAU,GACpCjD,EAAA,CAEJ,EAAG,GAAG,EAGL,OAAe,mBAAqB,MAAOjK,EAAiBE,IAAuB,CAClF,QAAQ,IAAI,iBAAkBF,EAASE,CAAU,CAEnD,EAGC,OAAe,qBAAuB,MAAOF,EAAiBE,IAAuB,CACpF,KAAM,CAAE,sBAAAiN,CAAA,EAA0B,MAAA/M,EAAA,sCAAA+M,CAAA,OAAM,QAAO,mCAA8B,2EAC7EA,EAAsBnN,EAASE,CAA+B,CAChE,EAGC,OAAe,mBAAqB,MAAOF,EAAiBE,IAAuB,CAClF,KAAM,CAAE,6BAAAkN,EAA8B,6BAAAC,CAAA,EAAiC,MAAAjN,EAAA,6CAAAgN,EAAA,6BAAAC,CAAA,OAAM,QAAO,6BAAwB,mHAGtGzP,EAAQ8E,EAAY,WACpB3C,EAASG,IAAe,QAC1BtC,EAAM,eAAe,OAAO,IAAIoC,CAAO,EACvCpC,EAAM,eAAe,OAAO,IAAIoC,CAAO,EAE3C,GAAI,CAACD,EAAQ,CACX2C,EAAY,WAAW,QAAQ,gBAAgB,CAC7C,KAAM,QACN,QAAS,sCAAsCxC,CAAU,GACzD,SAAU,GACX,EACD,MACF,CAGIA,IAAe,QACjBkN,EAA6BrN,CAAa,EACjCG,IAAe,SACxBmN,EAA6BtN,CAAa,CAE9C,EAEC,OAAe,uBAAyB,MAAOC,GAAoB,aAClE,KAAM,CAAE,cAAA8I,EAAe,iBAAAC,CAAA,EAAqB,MAAA3I,EAAA,8BAAA0I,EAAA,iBAAAC,GAAA,MAAM,2BAAAjJ,CAAA,sEAC5C,CAAE,wBAAA2J,CAAA,EAA4B,MAAArJ,EAAA,wCAAAqJ,CAAA,QAAM,2BAAAnI,CAAA,EAAgC,+BAAAmI,CAAA,2BAGpE6D,EAAgB,SAAS,cAAc,sCAAsCtN,CAAO,MAAM,EAC5FsN,KACmB9H,EAAA8H,EAAc,cAAd,MAAA9H,EAA2B,OAChD8H,EAAc,SAAW,GACzBA,EAAc,UAAU,IAAI,YAAY,EACxCA,EAAc,YAAc,iBAG9B,GAAI,CAGF,MAAMvN,GAAS8F,EADMnD,EAAY,WACL,QAAQ,IAAI1C,CAAO,IAAhC,YAAA6F,EAAmC,OAGlD,GAF6B9F,GAAA,YAAAA,EAAQ,UAInC,MAAMgJ,EAAiB/I,CAAO,EAC9B,MAAMyJ,EAAA,EAKN/G,EAAY,WAAW,QAAQ,gBAAgB,CAC7C,KAAM,UACN,QAAS,wCACV,EAGG4K,IACFA,EAAc,SAAW,GACzBA,EAAc,UAAU,OAAO,YAAY,EAC3CA,EAAc,UAAY,eAEvB,CAEL,MAAMC,EAAkB,MAAMzE,EAAc9I,CAAO,EAGnD0C,EAAY,WAAW,QAAQ,aAAa1C,EAASuN,CAAe,EAGpE,MAAM9D,EAAA,EAKN/G,EAAY,WAAW,QAAQ,gBAAgB,CAC7C,KAAM,UACN,QAAS,mCACV,EAGG4K,IACFA,EAAc,SAAW,GACzBA,EAAc,UAAY,aAE9B,CACF,OAAShO,EAAO,CACdoD,EAAY,WAAW,QAAQ,gBAAgB,CAC7C,KAAM,QACN,QAAS,cAAa+I,EAAA6B,GAAA,YAAAA,EAAe,cAAf,MAAA7B,EAA4B,SAAS,cAAgB,aAAe,SAAS,eAAenM,aAAiB,MAAQA,EAAM,QAAU,eAAe,GAC3K,EAGGgO,IACFA,EAAc,SAAW,GACzBA,EAAc,UAAU,OAAO,YAAY,EAC3CA,EAAc,WAAYE,EAAAF,EAAc,cAAd,MAAAE,EAA2B,SAAS,cAAgB,aAAe,UAEjG,CACF,EA6BC,OAAe,uBAAyB,MAAOxN,GAAoB,OAClE,KAAM,CAAE,mBAAA8K,EAAoB,qBAAAE,CAAA,EAAyB,MAAA5K,EAAA,mCAAA0K,EAAA,qBAAAE,GAAA,MAAM,2BAAA3K,CAAA,+EAGrDyG,EAAO,SAAS,cAAc,yBAAyB9G,CAAO,IAAI,EACxE,GAAI,CAAC8G,EAAM,OAEX,MAAM2G,EAAY3G,EAAK,cAAc,oBAAoB,EACnD4G,EAAa5G,EAAK,iBAAiB,kBAAkB,EACrD6G,EAAwB7G,EAAK,cAAc,0BAA0B,EAE3E,GAAI,CACF,MAAM8G,GAAUpI,EAAAiI,GAAA,YAAAA,EAAW,QAAX,YAAAjI,EAAkB,OAG5BqI,EAAoC,GACtCH,EAAW,OAAS,GACtBA,EAAW,QAASI,GAAU,CAC5B,MAAMnJ,EAAY,SAASmJ,EAAM,QAAQ,MAAQ,GAAG,EAC9CjH,EAAWiH,EAAM,MAAM,OACzBjH,IACFgH,EAAUlJ,CAAS,EAAIkC,EAE3B,CAAC,EAIH,MAAMkH,EAAoB,CACxB,KAAMH,GAAW,QAEf,OAAO,KAAKC,CAAS,EAAE,OAAS,IAClCE,EAAa,UAAYF,GAG3B,MAAM/C,EAAmB9K,EAAS+N,CAAY,EAG1CJ,GACF,MAAM3C,EAAqBhL,EAAS,CAClC,cAAe2N,EAAsB,QACtC,EAIF,OAAe,qBAAqB3N,CAAO,EAC5C0C,EAAY,WAAW,QAAQ,gBAAgB,CAC7C,KAAM,UACN,QAAS,wBACT,SAAU,GACX,CACH,OAASpD,EAAO,CACd,QAAQ,MAAM,kCAAmCA,CAAK,EACtDoD,EAAY,WAAW,QAAQ,gBAAgB,CAC7C,KAAM,QACN,QAAS,iCACT,SAAU,GACX,CACH,CACF,EAGC,OAAe,yBAA2B,MAAO1C,GAAoB,CACpE,KAAM,CAAE,sBAAAuL,CAAA,EAA0B,MAAAnL,EAAA,sCAAAmL,CAAA,QAAM,2BAAAyC,CAAA,2DAClCpQ,EAAQ8E,EAAY,WACpBuL,EAAcrQ,EAAM,eAAe,OAAO,IAAIoC,CAAO,EACvCpC,EAAM,eAAe,OAAO,IAAIoC,CAAO,EAG3D,MAAMuL,EAAsBvL,EAFTiO,EAAc,QAAU,OAEI,CACjD,EAGC,OAAe,yBAA2B,MAAOjO,GAAoB,CACpE,KAAM,CAAE,sBAAAuL,CAAA,EAA0B,MAAAnL,EAAA,sCAAAmL,CAAA,QAAM,2BAAAyC,CAAA,2DAClCpQ,EAAQ8E,EAAY,WACpBuL,EAAcrQ,EAAM,eAAe,OAAO,IAAIoC,CAAO,EACvCpC,EAAM,eAAe,OAAO,IAAIoC,CAAO,EAG3D,MAAMuL,EAAsBvL,EAFTiO,EAAc,QAAU,OAEI,CACjD,CACF,sOC1WO,SAASC,IAAiC,CAC/C,MAAMC,EAAY,SAAS,cAAc,KAAK,EAC9CA,EAAU,GAAK,yBACfA,EAAU,UAAY,yBACtB,SAAS,KAAK,YAAYA,CAAS,EAGnC,MAAMC,EAAQ,SAAS,cAAc,OAAO,EAC5CA,EAAM,YAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAqFpB,SAAS,KAAK,YAAYA,CAAK,CACjC,CAEO,SAASC,IAA4B,CAC1C,MAAMF,EAAY,SAAS,eAAe,wBAAwB,EAClE,GAAI,CAACA,EAAW,OAEhB,MAAMG,EAAgB1L,EAAA,EAChB,CAAE,mBAAA2L,CAAA,EAAuB5L,EAAA,EAG/BwL,EAAU,UAAY,GAGtBG,EAAc,QAAS1M,GAAiB,CACtC,MAAM4M,EAAUC,GAA0B7M,EAAc2M,CAAkB,EAC1EJ,EAAU,YAAYK,CAAO,EAG7B,sBAAsB,IAAM,CAC1BA,EAAQ,UAAU,IAAI,MAAM,CAC9B,CAAC,CACH,CAAC,CACH,CAEA,SAASC,GACP7M,EACA8M,EACa,CACb,MAAMF,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,gBAAgB5M,EAAa,IAAI,GAErD,MAAMwF,EAAUvE,EAAWjB,EAAa,SAAS,EAEjD4M,EAAQ,UAAY;AAAA;AAAA,wCAEkB5M,EAAa,IAAI;AAAA,oDACLA,EAAa,EAAE;AAAA;AAAA,wCAE3B+M,GAAW/M,EAAa,OAAO,CAAC;AAAA,qCACnCwF,CAAO;AAAA,IAI1C,MAAMwH,EAAWJ,EAAQ,cAAc,qBAAqB,EACtDD,EAAqB,IAAM,CAC/BC,EAAQ,UAAU,OAAO,MAAM,EAC/B,WAAW,IAAM,CACfE,EAAS9M,EAAa,EAAE,CAC1B,EAAG,GAAG,CACR,EAEA,OAAAgN,EAAS,iBAAiB,QAASL,CAAkB,EAGrD,WAAW,IAAM,CAEXC,EAAQ,YACVD,EAAA,CAEJ,EAAG,GAAI,EAEAC,CACT,CAEA,SAAS3L,EAAWC,EAA2B,CAE7C,MAAMC,EADM,KAAK,MACED,EAEnB,OAAIC,EAAO,IAAa,WACpBA,EAAO,IAAc,GAAG,KAAK,MAAMA,EAAO,GAAI,CAAC,QAC/CA,EAAO,KAAgB,GAAG,KAAK,MAAMA,EAAO,GAAK,CAAC,QAClDA,EAAO,MAAiB,GAAG,KAAK,MAAMA,EAAO,IAAO,CAAC,QAElD,IAAI,KAAKD,CAAS,EAAE,oBAC7B,CAEA,SAAS6L,GAAWjG,EAAsB,CACxC,MAAMmG,EAAM,SAAS,cAAc,KAAK,EACxC,OAAAA,EAAI,YAAcnG,EACXmG,EAAI,SACb,CAGA,YAAY,IAAM,CAChB,MAAMV,EAAY,SAAS,eAAe,wBAAwB,EAClE,GAAI,CAACA,EAAW,OAEhB,MAAMW,EAAeX,EAAU,iBAAiB,oBAAoB,EAC9DG,EAAgB1L,EAAA,EAEtBkM,EAAa,QAAQ,CAACN,EAAS/H,IAAU,CACvC,MAAM7E,EAAe0M,EAAc7H,CAAK,EACpC7E,IACF4M,EAAQ,YAAc3L,EAAWjB,EAAa,SAAS,EAE3D,CAAC,CACH,EAAG,GAAK,EC1JR,IAAImN,MAA2B,IAKxB,SAASC,IAAoC,CAElDtM,EAAY,UAAW9E,GAAU,CAC/B,MAAMoE,EAAiBpE,EAAM,QAI7B,GAAI,EADqBA,EAAM,GAAG,cAAgB,YAC3B,CAErBmR,EAAuB,IAAI,IAAI/M,CAAc,EAC7C,MACF,CAGKiN,GAAoBjN,EAAgB+M,CAAoB,IAM7DG,GAAkBlN,CAAc,EAGhC+M,EAAuB,IAAI,IAAI/M,CAAc,EAC/C,CAAC,EAED,QAAQ,IAAI,4DAA4D,CAC1E,CAKA,SAASiN,GACPE,EACAC,EACS,CAET,GAAID,EAAQ,OAASC,EAAS,KAC5B,MAAO,GAIT,SAAW,CAACpP,EAASqP,CAAa,IAAKF,EAAQ,UAAW,CACxD,MAAMG,EAAiBF,EAAS,IAAIpP,CAAO,EAQ3C,GALI,CAACsP,GAKDC,EAAiBD,EAAgBD,CAAa,EAChD,MAAO,EAEX,CAGA,UAAWrP,KAAWoP,EAAS,OAC7B,GAAI,CAACD,EAAQ,IAAInP,CAAO,EACtB,MAAO,GAIX,MAAO,EACT,CAKA,SAASkP,GAAkBlN,EAAgD,CAC/C,IAAI,IAAI+M,EAAqB,MAAM,EACpC,IAAI,IAAI/M,EAAe,MAAM,EAGtD,MAAMwN,EAAoB,MAAM,KAAKT,EAAqB,QAAQ,EAC/D,OAAO9J,GAAA,OAAK,OAAAO,EAAAP,EAAE,SAAF,YAAAO,EAAU,UAAS,EAC/B,IAAIP,GAAKA,EAAE,OAAO,EACfwK,EAAmB,MAAM,KAAKzN,EAAe,QAAQ,EACxD,OAAOiD,GAAA,OAAK,OAAAO,EAAAP,EAAE,SAAF,YAAAO,EAAU,UAAS,EAC/B,IAAIP,GAAKA,EAAE,OAAO,EAEfyK,EAAuB,IAAI,IAAIF,CAAiB,EAChDG,EAAsB,IAAI,IAAIF,CAAgB,EAG9CG,EAAQH,EAAiB,OAAOI,GAAQ,CAACH,EAAqB,IAAIG,CAAI,CAAC,EACvEC,EAAUN,EAAkB,OAAOK,GAAQ,CAACF,EAAoB,IAAIE,CAAI,CAAC,EACzEE,EAAUN,EAAiB,OAAOI,GAAQ,CAC9C,GAAID,EAAM,SAASC,CAAI,EAAG,MAAO,GACjC,MAAMG,EAAOjB,EAAqB,IAAIc,CAAI,EACpCI,EAAOjO,EAAe,IAAI6N,CAAI,EACpC,OAAOG,GAAQC,GAAQV,EAAiBS,EAAMC,CAAI,CACpD,CAAC,EAQD,IALIL,EAAM,OAAS,GAAKE,EAAQ,OAAS,GAAKC,EAAQ,OAAS,IAC7D,QAAQ,IAAI,4BAA4BH,EAAM,MAAM,KAAKE,EAAQ,MAAM,KAAKC,EAAQ,MAAM,EAAE,EAI1FP,EAAkB,SAAW,GAAKC,EAAiB,OAAS,EAAG,CAEjE,QAAQ,IAAI,gEAAgE,EAC5ES,EAAA,EACA,MACF,SAAWV,EAAkB,OAAS,GAAKC,EAAiB,SAAW,EAAG,CAExE,QAAQ,IAAI,mDAAmD,EAC/DS,EAAA,EACA,MACF,CAGIJ,EAAQ,OAAS,GACnBA,EAAQ,QAAQ9P,GAAWmQ,GAAiBnQ,CAAO,CAAC,EAGlD4P,EAAM,OAAS,GACjBA,EAAM,QAAQ5P,GAAW,CACvB,MAAMD,EAASiC,EAAe,IAAIhC,CAAO,EACrCD,GAAA,MAAAA,EAAQ,QACVqQ,EAAcrQ,CAAM,CAExB,CAAC,EAGCgQ,EAAQ,OAAS,GACnBA,EAAQ,QAAQ/P,GAAW,CACzB,MAAMD,EAASiC,EAAe,IAAIhC,CAAO,EACrCD,GAAA,MAAAA,EAAQ,QACVsQ,GAAiBtQ,CAAM,CAE3B,CAAC,EAICyP,EAAkB,SAAWC,EAAiB,QAChDa,GAAuBb,EAAiB,MAAM,CAElD,CAKA,SAASF,EAAiBS,EAAmBC,EAA4B,CAUvE,GATI,CAACD,EAAK,QAAU,CAACC,EAAK,QAGtBD,EAAK,OAAO,YAAcC,EAAK,OAAO,WAGtCD,EAAK,YAAcC,EAAK,WAGxBD,EAAK,QAAUC,EAAK,MAAO,MAAO,GAGtC,MAAMM,EAAa,KAAK,UAAUP,EAAK,MAAM,EACvCQ,EAAa,KAAK,UAAUP,EAAK,MAAM,EAC7C,GAAIM,IAAeC,EAAY,MAAO,GAGtC,MAAMC,EAAa,KAAK,UAAUT,EAAK,aAAa,EAC9CU,EAAa,KAAK,UAAUT,EAAK,aAAa,EACpD,OAAIQ,IAAeC,CAGrB,CAKA,SAASN,EAAcrQ,EAA2B,CAChD,GAAI,CAACA,EAAO,OAAQ,OAEpB,MAAMoO,EAAYwC,GAAA,EAClB,GAAI,CAACxC,EAAW,CACd,QAAQ,KAAK,+DAA+D,EAC5E+B,EAAA,EACA,MACF,CAGA,MAAMU,EAAoB,CACxB,GAAG7Q,EAAO,OACV,QAASA,EAAO,SAIZ8Q,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY9J,EAAoB,GAAI,CAAC6J,CAAiB,CAAC,EAG/D,MAAME,EAAUD,EAAQ,cAAc,cAAc,EAChDC,IAEFA,EAAQ,UAAU,IAAI,sBAAsB,EAC5C3C,EAAU,YAAY2C,CAAO,EAG7BA,EAAQ,wBAGR,WAAW,IAAM,CACfA,EAAQ,UAAU,OAAO,sBAAsB,CACjD,EAAG,GAAG,EAEV,CAKA,SAASX,GAAiBnQ,EAAuB,CAC/C,MAAM8G,EAAOiK,EAAsB/Q,CAAO,EACtC8G,IAEFA,EAAK,UAAU,IAAI,qBAAqB,EAGxC,WAAW,IAAM,CACfA,EAAK,QACP,EAAG,GAAG,EAEV,CAKA,SAASuJ,GAAiBtQ,EAA2B,CACnD,GAAI,CAACA,EAAO,OAAQ,OAEpB,MAAMiR,EAAeD,EAAsBhR,EAAO,OAAO,EACzD,GAAI,CAACiR,EAAc,CACjB,QAAQ,KAAK,6BAA6BjR,EAAO,OAAO,aAAa,EACrEqQ,EAAcrQ,CAAM,EACpB,MACF,CAGA,MAAM6Q,EAAoB,CACxB,GAAG7Q,EAAO,OACV,QAASA,EAAO,SAIZ8Q,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY9J,EAAoB,GAAI,CAAC6J,CAAiB,CAAC,EAE/D,MAAMK,EAAcJ,EAAQ,cAAc,cAAc,EACxD,GAAII,EAAa,CAEf,GAAID,EAAa,YAAcC,EAAY,UAAW,CACpD,QAAQ,IAAI,UAAUlR,EAAO,OAAO,kCAAkC,EACtE,MACF,CAGA,MAAMmR,EAAY,OAAO,QAGzBF,EAAa,YAAYC,CAAW,EAGpC,OAAO,SAAS,EAAGC,CAAS,EAE5B,QAAQ,IAAI,2BAA2BnR,EAAO,OAAO,EAAE,CACzD,CACF,CAKA,SAASuQ,GAAuBa,EAAqB,CACnD,MAAMC,EAAQ,SAAS,cAAc,qBAAqB,EACtDA,IACFA,EAAM,YAAc,OAAOD,CAAK,EAEpC,CAKA,SAASR,IAA8C,CAErD,MAAMU,EAAgB,SAAS,eAAe,gBAAgB,EAC9D,OAAKA,EAGiBA,EAAc,cAAc,0BAA0B,EAHjD,IAK7B,CAKA,SAASN,EAAsB/Q,EAAqC,CAElE,MAAMsR,EAAQ,SAAS,iBAAiB,cAAc,EAEtD,UAAWxK,KAAQ,MAAM,KAAKwK,CAAK,EAAG,CAEpC,MAAMC,EAAUzK,EAAK,iBAAiB,iBAAiB,EACvD,UAAW8E,KAAU,MAAM,KAAK2F,CAAO,EAAG,CACxC,MAAMC,EAAU5F,EAAO,aAAa,SAAS,EAC7C,GAAI4F,GAAA,MAAAA,EAAS,SAASxR,GACpB,OAAO8G,CAEX,CACF,CAEA,OAAO,IACT,CAKA,SAASoJ,GAA6B,CACpC9P,EAAA,iCAAAkI,CAAA,sCAAkB,wBAAAA,EAAA,0BAAE,KAAK,CAAC,CAAE,iBAAAA,KAAuB,CACjDA,EAAA,CACF,CAAC,EAAE,MAAMiB,GAAO,CACd,QAAQ,KAAK,+BAAgCA,CAAG,CAClD,CAAC,CACH,CClWO,SAASkI,IAAgC,CAC9C,QAAQ,IAAI,kEAAkE,EAI9EzC,GAAA,EAGA,IAAI0C,EAA4B,EACChP,EAAY,UAC1C9E,GAAU,CACT,MAAM+T,EAAoB/T,EAAM,GAAG,cAAc,OAC7C+T,IAAsBD,IACxBA,EAA4BC,EAC5BtD,GAAA,EAEJ,GAIF,IAAIuD,EAAelP,EAAY,WAAW,GAAG,YACrBA,EAAY,UACjC9E,GAAU,CACLA,EAAM,GAAG,cAAgBgU,IAC3BA,EAAehU,EAAM,GAAG,YACxB,QAAQ,IAAI,uBAAuBgU,CAAY,EAAE,EACjDtJ,GAAA,EAEJ,GAMF,QAAQ,IAAI,kDAAkD,CAChE,CAKA,SAASA,IAAyB,CAChClI,EAAA,iCAAAuM,CAAA,0FAAsC,KAAK,CAAC,CAAE,iBAAArE,KAAuB,CACnEA,GACF,CAAC,EAAE,MAAMiB,GAAO,CACd,QAAQ,KAAK,+BAAgCA,CAAG,CAClD,CAAC,CACH,CC3CA,MAAMsI,EAAe,CAArB,cACUC,EAAA,aAAsB,CAC5B,SAAU,GACV,WAAY,KACZ,WAAY,IACZ,aAAc,EACd,aAAc,EACd,YAAa,IAGPA,EAAA,mBAAyC,IAKjD,aAAaxP,EAAqB,IAAa,CAC7C,GAAI,KAAK,MAAM,SAAU,CACvB,QAAQ,IAAI,4BAA4B,EACxC,MACF,CAEA,KAAK,MAAM,WAAaA,EACxB,KAAK,MAAM,SAAW,GACtB,KAAK,MAAM,aAAe,EAE1B,QAAQ,IAAI,gDAAgDA,CAAU,KAAK,EAG3E,KAAK,OAGL,KAAK,MAAM,WAAa,OAAO,YAAY,IAAM,CAC/C,KAAK,MACP,EAAGA,CAAU,CACf,CAKA,aAAoB,CAClB,GAAI,CAAC,KAAK,MAAM,SAAU,CACxB,QAAQ,IAAI,wBAAwB,EACpC,MACF,CAEI,KAAK,MAAM,aAAe,OAC5B,cAAc,KAAK,MAAM,UAAU,EACnC,KAAK,MAAM,WAAa,MAG1B,KAAK,MAAM,SAAW,GACtB,KAAK,MAAM,aAAe,EAC1B,QAAQ,IAAI,mCAAmC,CACjD,CAKA,YAAYA,EAA0B,CACpC,KAAK,MAAM,WAAaA,EACpB,KAAK,MAAM,WAEb,KAAK,cACL,KAAK,aAAaA,CAAU,EAEhC,CAKA,UAAUyP,EAA6C,CACrD,YAAK,YAAY,KAAKA,CAAQ,EAEvB,IAAM,CACX,KAAK,YAAc,KAAK,YAAY,OAAOC,GAAMA,IAAOD,CAAQ,CAClE,CACF,CAKA,MAAc,MAAsB,CAClC,GAAI,CACF,KAAK,MAAM,aAAe,KAAK,MAC/B,MAAMxR,EAAS,MAAMsI,EAAA,EAGrB,KAAK,MAAM,aAAe,EAG1B,MAAM9H,EAAU2B,EAAY,WAAW,QACjC9E,EAAQ8E,EAAY,WACpBuP,EAAkBrU,EAAM,QAE9B,SAAW,CAACoC,EAASkS,CAAY,IAAK,OAAO,QAAQ3R,CAAM,EAEzDQ,EAAQ,aAAaf,EAASkS,CAAY,GAG1BA,EAAa,cAAgB,QAEzCtU,EAAM,eAAe,OAAO,IAAIoC,CAAO,EACvCpC,EAAM,eAAe,OAAO,IAAIoC,CAAO,KAGzC,QAAQ,IAAI,iCAAiCA,CAAO,KAAK,EACzDe,EAAQ,oBAAoBf,EAASkS,EAAa,WAAgC,EAC/E,MAAM3I,GAAO,QAAQ,MAAM,6BAA6BvJ,CAAO,IAAKuJ,CAAG,CAAC,GAK/E,KAAK,YAAY,QAAQwI,GAAYA,EAASxR,CAAM,CAAC,EAErD,QAAQ,IAAI,4BAA4B,OAAO,KAAKA,CAAM,EAAE,MAAM,WAAW,CAC/E,OAASjB,EAAO,CACd,KAAK,MAAM,eACX,QAAQ,MAAM,yBAAyB,KAAK,MAAM,YAAY,IAAI,KAAK,MAAM,WAAW,KAAMA,CAAK,EAG/F,KAAK,MAAM,cAAgB,KAAK,MAAM,cACxC,QAAQ,MAAM,yDAAyD,EACvE,KAAK,cAET,CACF,CAKA,UAAmC,CACjC,OAAO,OAAO,OAAO,CAAE,GAAG,KAAK,MAAO,CACxC,CAKA,MAAM,WAA2B,CAC1B,KAAK,MAAM,UACd,QAAQ,IAAI,iDAAiD,EAE/D,MAAM,KAAK,MACb,CACF,CAEO,MAAM6S,GAAiB,IAAIN,GAK3B,SAASO,GAAkB9P,EAAqB,IAAa,CAClE6P,GAAe,aAAa7P,CAAU,CACxC,CAKO,SAAS+P,IAAuB,CACrCF,GAAe,aACjB,CC9JA,IAAIG,EAAiB,GACjBC,EAAgB,GAOpB,eAAeC,IAAoC,CACjD,OAAO,IAAI,QAASC,GAAY,CAE9B,MAAMC,EAAU,SAAS,cAAc,MAAM,EACzCA,GACF,QAAQ,IAAI,qBAAqBA,EAAQ,IAAI,EAAE,EAE/C,WAAWD,EAAS,CAAC,IAErB,QAAQ,IAAI,4CAA4C,EACxDA,EAAA,EAEJ,CAAC,CACH,CAGA,eAAeE,GAAO,CAGpB,GAFA,QAAQ,IAAI,8BAA8B,EAEtCL,EAAgB,CAClB,QAAQ,KAAK,+CAA+C,EAC5D,MACF,CAEA,GAAIC,EAAe,CACjB,QAAQ,KAAK,8CAA8C,EAC3D,MACF,CAEAD,EAAiB,GAEjB,GAAI,CACF,QAAQ,IAAI,sCAAsC,EAKlD,MAAME,GAAA,EAEN,MAAMI,EAAa,SAAS,eAAe,KAAK,EAChD,GAAI,CAACA,EACH,MAAM,IAAI,MAAM,uBAAuB,EAItB,aAAa,QAAQ,OAAO,IAC5B,SACjB,SAAS,gBAAgB,UAAY,cAIvC1E,GAAA,EAGA1B,EAAA,EAGA,QAAQ,IAAI,6BAA6B,EACzCoG,EAAW,UAAY3K,EAAA,EAGvB,QAAQ,IAAI,2BAA2B,EACvC,KAAM,CAAE,qBAAAkB,EAAsB,iBAAAb,CAAA,EAAqB,MAAAlI,EAAA,qCAAA+I,EAAA,iBAAAb,CAAA,QAAM,2BAAAuK,EAAA,6EACzD,MAAM1J,EAAA,EACN,QAAQ,IAAI,uBAAuB,EAGnC,QAAQ,IAAI,0CAA0C,EACtDb,EAAA,EAGA,QAAQ,IAAI,mCAAmC,EAC/CmJ,GAAA,EAGA,QAAQ,IAAI,+CAA+C,EAC3DW,GAAkB,GAAK,EAGvB,OAAO,iBAAiB,eAAgB,IAAM,CAC5CC,GAAA,CACF,CAAC,EAED,QAAQ,IAAI,+CAA+C,EAC3DE,EAAgB,EAClB,OAASjT,EAAO,CACd,QAAQ,MAAM,6CAA8CA,CAAK,EAEjE,MAAMsT,EAAa,SAAS,eAAe,KAAK,EAC5CA,IACFA,EAAW,UAAY;AAAA;AAAA;AAAA,uCAGUtT,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAU3F,SACEgT,EAAiB,EACnB,CACF,CAGI,SAAS,aAAe,UAC1B,SAAS,iBAAiB,mBAAoBK,CAAI,EAElDA,EAAA","names":["createStoreImpl","createState","state","listeners","setState","partial","replace","nextState","previousState","listener","getState","api","initialState","createStore","subscribeWithSelectorImpl","fn","set","get","origSubscribe","selector","optListener","options","equalityFn","currentSlice","nextSlice","previousSlice","subscribeWithSelector","getErrorMessage","error","storeInitializer","dosers","lights","doserMap","lightMap","doser","light","devices","device","address","config","deviceType","getDeviceConfiguration","__vitePreload","configurations","deviceMap","status","existing","loading","request","commandId","queuedCommand","commandQueue","isProcessingCommands","actions","nextCommand","remaining","executeCommand","result","invalidateMetadataCache","debouncedRefreshConfigurations","dataService","errorMessage","command","cmd","retryCommand","view","notification","id","newNotification","n","currentDevices","fetchJson","http","data","message","postJson","intervalMs","polling","intervalId","createDeviceStore","deviceStore","useActions","useNotifications","getTimeAgo","timestamp","diff","getDeviceAutoPrograms","deviceAddress","deviceConfig","activeConfig","profile","program","renderLightCardStatus","renderLightAutoSchedule","programs","statusOrder","topThree","b","orderA","orderB","s","p","renderScheduleItem","getStatusColor","getStatusText","accentColor","statusText","channelLevels","channel","value","str","timeRange","getDoserHeadName","headIndex","formatScheduleDays","weekdays","dayMap","abbrevDays","day","d","dayNames","validDays","sortedDays","getHeadConfigData","c","configHead","_a","h","setDose","schedule","scheduleText","_b","renderDoserCardStatus","renderPumpHeads","heads","savedConfig","allHeads","deviceHead","configData","customName","dosedToday","head","renderPumpHead","index","statusColor","modeText","isDisabled","headName","card","renderDeviceSection","title","renderDeviceTile","zustandState","deviceName","timeAgo","renderDeviceCardHeader","renderDeviceCardBody","renderDeviceCardFooter","renderDeviceCardSettings","renderDeviceSpecificContent","connectButtonText","connectButtonClass","renderOverviewTab","renderDevTab","renderCollapsibleDeviceRawData","deviceId","lastUpdate","renderProductionDashboard","renderHeader","renderNavigation","renderContent","renderFooter","refreshDashboard","dashboardElement","url","res","text","body","patchJson","getDeviceStatus","connectDevice","disconnectDevice","refreshDeviceStatus","scanDevices","timeout","loadAllDashboardData","newStatus","configPromises","configPromise","err","statusErr","refreshDeviceStatusOnly","configFetchTimeout","lastConfigFetchTime","CONFIG_FETCH_DEBOUNCE_MS","now","timeSinceLastFetch","remainingWait","deviceStore$1","calculateWattageFromInputs","redInput","greenInput","blueInput","whiteInput","resultsDiv","red","green","blue","white","calculateLightWattage","displayWattageResults","formatWattage","updateDeviceNaming","naming","updateDeviceSettings","settings","exportDeviceConfiguration","importDeviceConfiguration","file","formData","response","showImportExportModal","modal","_c","e","handleExportConfig","button","originalText","exportData","json","blob","link","handleImportFile","fileInput","fileNameSpan","statusDiv","importData","messageDiv","initializeDashboardHandlers","tab","showScanConnectModal","refreshDashboard2","currentTheme","newTheme","content","icon","isExpanded","refreshButton","originalContent","showDeviceConfigModal","showDoserDeviceSettingsModal","showLightDeviceSettingsModal","connectButton","connectedStatus","_d","nameInput","headInputs","autoReconnectCheckbox","newName","headNames","input","namingUpdate","importExportModal","doserConfig","createNotificationSystem","container","style","renderNotifications","notifications","removeNotification","element","createNotificationElement","onRemove","escapeHtml","closeBtn","div","timeElements","previousDeviceStates","initializeDeviceCardUpdater","hasAnyDeviceChanged","updateDeviceCards","current","previous","currentDevice","previousDevice","hasDeviceChanged","previousConnected","currentConnected","previousConnectedSet","currentConnectedSet","added","addr","removed","updated","prev","curr","refreshFullDashboard","removeDeviceCard","addDeviceCard","updateDeviceCard","updateDeviceCountBadge","prevStatus","currStatus","prevConfig","currConfig","findDeviceCardContainer","deviceWithAddress","tempDiv","newCard","findDeviceCardElement","existingCard","updatedCard","scrollTop","count","badge","overviewPanel","cards","buttons","onclick","setupStateSubscriptions","previousNotificationCount","notificationCount","previousView","PollingService","__publicField","callback","cb","existingDevices","deviceStatus","pollingService","initializePolling","cleanupPolling","isInitializing","isInitialized","ensureBaseTagReady","resolve","baseTag","init","appElement","dashboard"],"ignoreList":[0,1],"sources":["../../node_modules/zustand/esm/vanilla.mjs","../../node_modules/zustand/esm/middleware.mjs","../../src/errors.ts","../../src/stores/deviceStore.ts","../../src/utils.ts","../../src/ui/aquarium-dashboard/devices/light-components.ts","../../src/ui/aquarium-dashboard/utils/device-utils.ts","../../src/ui/aquarium-dashboard/devices/doser-components.ts","../../src/ui/aquarium-dashboard/devices/device-card.ts","../../src/ui/aquarium-dashboard/tabs/overview-tab.ts","../../src/ui/aquarium-dashboard/tabs/dev-tab.ts","../../src/ui/aquarium-dashboard/render.ts","../../src/api/http.ts","../../src/api/devices.ts","../../src/ui/aquarium-dashboard/services/data-service.ts","../../src/ui/aquarium-dashboard/components/wattage-calculator.ts","../../src/api/configurations.ts","../../src/ui/aquarium-dashboard/modals/import-export-modal.ts","../../src/ui/aquarium-dashboard/dashboard.ts","../../src/ui/notifications.ts","../../src/ui/aquarium-dashboard/utils/device-card-updater.ts","../../src/ui/stateSubscriptions.ts","../../src/ui/aquarium-dashboard/services/polling-service.ts","../../src/productionMain.ts"],"sourcesContent":["const createStoreImpl = (createState) => {\n  let state;\n  const listeners = /* @__PURE__ */ new Set();\n  const setState = (partial, replace) => {\n    const nextState = typeof partial === \"function\" ? partial(state) : partial;\n    if (!Object.is(nextState, state)) {\n      const previousState = state;\n      state = (replace != null ? replace : typeof nextState !== \"object\" || nextState === null) ? nextState : Object.assign({}, state, nextState);\n      listeners.forEach((listener) => listener(state, previousState));\n    }\n  };\n  const getState = () => state;\n  const getInitialState = () => initialState;\n  const subscribe = (listener) => {\n    listeners.add(listener);\n    return () => listeners.delete(listener);\n  };\n  const api = { setState, getState, getInitialState, subscribe };\n  const initialState = state = createState(setState, getState, api);\n  return api;\n};\nconst createStore = ((createState) => createState ? createStoreImpl(createState) : createStoreImpl);\n\nexport { createStore };\n","const reduxImpl = (reducer, initial) => (set, _get, api) => {\n  api.dispatch = (action) => {\n    set((state) => reducer(state, action), false, action);\n    return action;\n  };\n  api.dispatchFromDevtools = true;\n  return { dispatch: (...args) => api.dispatch(...args), ...initial };\n};\nconst redux = reduxImpl;\n\nconst trackedConnections = /* @__PURE__ */ new Map();\nconst getTrackedConnectionState = (name) => {\n  const api = trackedConnections.get(name);\n  if (!api) return {};\n  return Object.fromEntries(\n    Object.entries(api.stores).map(([key, api2]) => [key, api2.getState()])\n  );\n};\nconst extractConnectionInformation = (store, extensionConnector, options) => {\n  if (store === void 0) {\n    return {\n      type: \"untracked\",\n      connection: extensionConnector.connect(options)\n    };\n  }\n  const existingConnection = trackedConnections.get(options.name);\n  if (existingConnection) {\n    return { type: \"tracked\", store, ...existingConnection };\n  }\n  const newConnection = {\n    connection: extensionConnector.connect(options),\n    stores: {}\n  };\n  trackedConnections.set(options.name, newConnection);\n  return { type: \"tracked\", store, ...newConnection };\n};\nconst removeStoreFromTrackedConnections = (name, store) => {\n  if (store === void 0) return;\n  const connectionInfo = trackedConnections.get(name);\n  if (!connectionInfo) return;\n  delete connectionInfo.stores[store];\n  if (Object.keys(connectionInfo.stores).length === 0) {\n    trackedConnections.delete(name);\n  }\n};\nconst findCallerName = (stack) => {\n  var _a, _b;\n  if (!stack) return void 0;\n  const traceLines = stack.split(\"\\n\");\n  const apiSetStateLineIndex = traceLines.findIndex(\n    (traceLine) => traceLine.includes(\"api.setState\")\n  );\n  if (apiSetStateLineIndex < 0) return void 0;\n  const callerLine = ((_a = traceLines[apiSetStateLineIndex + 1]) == null ? void 0 : _a.trim()) || \"\";\n  return (_b = /.+ (.+) .+/.exec(callerLine)) == null ? void 0 : _b[1];\n};\nconst devtoolsImpl = (fn, devtoolsOptions = {}) => (set, get, api) => {\n  const { enabled, anonymousActionType, store, ...options } = devtoolsOptions;\n  let extensionConnector;\n  try {\n    extensionConnector = (enabled != null ? enabled : (import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") && window.__REDUX_DEVTOOLS_EXTENSION__;\n  } catch (e) {\n  }\n  if (!extensionConnector) {\n    return fn(set, get, api);\n  }\n  const { connection, ...connectionInformation } = extractConnectionInformation(store, extensionConnector, options);\n  let isRecording = true;\n  api.setState = ((state, replace, nameOrAction) => {\n    const r = set(state, replace);\n    if (!isRecording) return r;\n    const action = nameOrAction === void 0 ? {\n      type: anonymousActionType || findCallerName(new Error().stack) || \"anonymous\"\n    } : typeof nameOrAction === \"string\" ? { type: nameOrAction } : nameOrAction;\n    if (store === void 0) {\n      connection == null ? void 0 : connection.send(action, get());\n      return r;\n    }\n    connection == null ? void 0 : connection.send(\n      {\n        ...action,\n        type: `${store}/${action.type}`\n      },\n      {\n        ...getTrackedConnectionState(options.name),\n        [store]: api.getState()\n      }\n    );\n    return r;\n  });\n  api.devtools = {\n    cleanup: () => {\n      if (connection && typeof connection.unsubscribe === \"function\") {\n        connection.unsubscribe();\n      }\n      removeStoreFromTrackedConnections(options.name, store);\n    }\n  };\n  const setStateFromDevtools = (...a) => {\n    const originalIsRecording = isRecording;\n    isRecording = false;\n    set(...a);\n    isRecording = originalIsRecording;\n  };\n  const initialState = fn(api.setState, get, api);\n  if (connectionInformation.type === \"untracked\") {\n    connection == null ? void 0 : connection.init(initialState);\n  } else {\n    connectionInformation.stores[connectionInformation.store] = api;\n    connection == null ? void 0 : connection.init(\n      Object.fromEntries(\n        Object.entries(connectionInformation.stores).map(([key, store2]) => [\n          key,\n          key === connectionInformation.store ? initialState : store2.getState()\n        ])\n      )\n    );\n  }\n  if (api.dispatchFromDevtools && typeof api.dispatch === \"function\") {\n    let didWarnAboutReservedActionType = false;\n    const originalDispatch = api.dispatch;\n    api.dispatch = (...args) => {\n      if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && args[0].type === \"__setState\" && !didWarnAboutReservedActionType) {\n        console.warn(\n          '[zustand devtools middleware] \"__setState\" action type is reserved to set state from the devtools. Avoid using it.'\n        );\n        didWarnAboutReservedActionType = true;\n      }\n      originalDispatch(...args);\n    };\n  }\n  connection.subscribe((message) => {\n    var _a;\n    switch (message.type) {\n      case \"ACTION\":\n        if (typeof message.payload !== \"string\") {\n          console.error(\n            \"[zustand devtools middleware] Unsupported action format\"\n          );\n          return;\n        }\n        return parseJsonThen(\n          message.payload,\n          (action) => {\n            if (action.type === \"__setState\") {\n              if (store === void 0) {\n                setStateFromDevtools(action.state);\n                return;\n              }\n              if (Object.keys(action.state).length !== 1) {\n                console.error(\n                  `\n                    [zustand devtools middleware] Unsupported __setState action format.\n                    When using 'store' option in devtools(), the 'state' should have only one key, which is a value of 'store' that was passed in devtools(),\n                    and value of this only key should be a state object. Example: { \"type\": \"__setState\", \"state\": { \"abc123Store\": { \"foo\": \"bar\" } } }\n                    `\n                );\n              }\n              const stateFromDevtools = action.state[store];\n              if (stateFromDevtools === void 0 || stateFromDevtools === null) {\n                return;\n              }\n              if (JSON.stringify(api.getState()) !== JSON.stringify(stateFromDevtools)) {\n                setStateFromDevtools(stateFromDevtools);\n              }\n              return;\n            }\n            if (!api.dispatchFromDevtools) return;\n            if (typeof api.dispatch !== \"function\") return;\n            api.dispatch(action);\n          }\n        );\n      case \"DISPATCH\":\n        switch (message.payload.type) {\n          case \"RESET\":\n            setStateFromDevtools(initialState);\n            if (store === void 0) {\n              return connection == null ? void 0 : connection.init(api.getState());\n            }\n            return connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));\n          case \"COMMIT\":\n            if (store === void 0) {\n              connection == null ? void 0 : connection.init(api.getState());\n              return;\n            }\n            return connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));\n          case \"ROLLBACK\":\n            return parseJsonThen(message.state, (state) => {\n              if (store === void 0) {\n                setStateFromDevtools(state);\n                connection == null ? void 0 : connection.init(api.getState());\n                return;\n              }\n              setStateFromDevtools(state[store]);\n              connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));\n            });\n          case \"JUMP_TO_STATE\":\n          case \"JUMP_TO_ACTION\":\n            return parseJsonThen(message.state, (state) => {\n              if (store === void 0) {\n                setStateFromDevtools(state);\n                return;\n              }\n              if (JSON.stringify(api.getState()) !== JSON.stringify(state[store])) {\n                setStateFromDevtools(state[store]);\n              }\n            });\n          case \"IMPORT_STATE\": {\n            const { nextLiftedState } = message.payload;\n            const lastComputedState = (_a = nextLiftedState.computedStates.slice(-1)[0]) == null ? void 0 : _a.state;\n            if (!lastComputedState) return;\n            if (store === void 0) {\n              setStateFromDevtools(lastComputedState);\n            } else {\n              setStateFromDevtools(lastComputedState[store]);\n            }\n            connection == null ? void 0 : connection.send(\n              null,\n              // FIXME no-any\n              nextLiftedState\n            );\n            return;\n          }\n          case \"PAUSE_RECORDING\":\n            return isRecording = !isRecording;\n        }\n        return;\n    }\n  });\n  return initialState;\n};\nconst devtools = devtoolsImpl;\nconst parseJsonThen = (stringified, fn) => {\n  let parsed;\n  try {\n    parsed = JSON.parse(stringified);\n  } catch (e) {\n    console.error(\n      \"[zustand devtools middleware] Could not parse the received json\",\n      e\n    );\n  }\n  if (parsed !== void 0) fn(parsed);\n};\n\nconst subscribeWithSelectorImpl = (fn) => (set, get, api) => {\n  const origSubscribe = api.subscribe;\n  api.subscribe = ((selector, optListener, options) => {\n    let listener = selector;\n    if (optListener) {\n      const equalityFn = (options == null ? void 0 : options.equalityFn) || Object.is;\n      let currentSlice = selector(api.getState());\n      listener = (state) => {\n        const nextSlice = selector(state);\n        if (!equalityFn(currentSlice, nextSlice)) {\n          const previousSlice = currentSlice;\n          optListener(currentSlice = nextSlice, previousSlice);\n        }\n      };\n      if (options == null ? void 0 : options.fireImmediately) {\n        optListener(currentSlice, currentSlice);\n      }\n    }\n    return origSubscribe(listener);\n  });\n  const initialState = fn(set, get, api);\n  return initialState;\n};\nconst subscribeWithSelector = subscribeWithSelectorImpl;\n\nfunction combine(initialState, create) {\n  return (...args) => Object.assign({}, initialState, create(...args));\n}\n\nfunction createJSONStorage(getStorage, options) {\n  let storage;\n  try {\n    storage = getStorage();\n  } catch (e) {\n    return;\n  }\n  const persistStorage = {\n    getItem: (name) => {\n      var _a;\n      const parse = (str2) => {\n        if (str2 === null) {\n          return null;\n        }\n        return JSON.parse(str2, options == null ? void 0 : options.reviver);\n      };\n      const str = (_a = storage.getItem(name)) != null ? _a : null;\n      if (str instanceof Promise) {\n        return str.then(parse);\n      }\n      return parse(str);\n    },\n    setItem: (name, newValue) => storage.setItem(name, JSON.stringify(newValue, options == null ? void 0 : options.replacer)),\n    removeItem: (name) => storage.removeItem(name)\n  };\n  return persistStorage;\n}\nconst toThenable = (fn) => (input) => {\n  try {\n    const result = fn(input);\n    if (result instanceof Promise) {\n      return result;\n    }\n    return {\n      then(onFulfilled) {\n        return toThenable(onFulfilled)(result);\n      },\n      catch(_onRejected) {\n        return this;\n      }\n    };\n  } catch (e) {\n    return {\n      then(_onFulfilled) {\n        return this;\n      },\n      catch(onRejected) {\n        return toThenable(onRejected)(e);\n      }\n    };\n  }\n};\nconst persistImpl = (config, baseOptions) => (set, get, api) => {\n  let options = {\n    storage: createJSONStorage(() => localStorage),\n    partialize: (state) => state,\n    version: 0,\n    merge: (persistedState, currentState) => ({\n      ...currentState,\n      ...persistedState\n    }),\n    ...baseOptions\n  };\n  let hasHydrated = false;\n  const hydrationListeners = /* @__PURE__ */ new Set();\n  const finishHydrationListeners = /* @__PURE__ */ new Set();\n  let storage = options.storage;\n  if (!storage) {\n    return config(\n      (...args) => {\n        console.warn(\n          `[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`\n        );\n        set(...args);\n      },\n      get,\n      api\n    );\n  }\n  const setItem = () => {\n    const state = options.partialize({ ...get() });\n    return storage.setItem(options.name, {\n      state,\n      version: options.version\n    });\n  };\n  const savedSetState = api.setState;\n  api.setState = (state, replace) => {\n    savedSetState(state, replace);\n    return setItem();\n  };\n  const configResult = config(\n    (...args) => {\n      set(...args);\n      return setItem();\n    },\n    get,\n    api\n  );\n  api.getInitialState = () => configResult;\n  let stateFromStorage;\n  const hydrate = () => {\n    var _a, _b;\n    if (!storage) return;\n    hasHydrated = false;\n    hydrationListeners.forEach((cb) => {\n      var _a2;\n      return cb((_a2 = get()) != null ? _a2 : configResult);\n    });\n    const postRehydrationCallback = ((_b = options.onRehydrateStorage) == null ? void 0 : _b.call(options, (_a = get()) != null ? _a : configResult)) || void 0;\n    return toThenable(storage.getItem.bind(storage))(options.name).then((deserializedStorageValue) => {\n      if (deserializedStorageValue) {\n        if (typeof deserializedStorageValue.version === \"number\" && deserializedStorageValue.version !== options.version) {\n          if (options.migrate) {\n            const migration = options.migrate(\n              deserializedStorageValue.state,\n              deserializedStorageValue.version\n            );\n            if (migration instanceof Promise) {\n              return migration.then((result) => [true, result]);\n            }\n            return [true, migration];\n          }\n          console.error(\n            `State loaded from storage couldn't be migrated since no migrate function was provided`\n          );\n        } else {\n          return [false, deserializedStorageValue.state];\n        }\n      }\n      return [false, void 0];\n    }).then((migrationResult) => {\n      var _a2;\n      const [migrated, migratedState] = migrationResult;\n      stateFromStorage = options.merge(\n        migratedState,\n        (_a2 = get()) != null ? _a2 : configResult\n      );\n      set(stateFromStorage, true);\n      if (migrated) {\n        return setItem();\n      }\n    }).then(() => {\n      postRehydrationCallback == null ? void 0 : postRehydrationCallback(stateFromStorage, void 0);\n      stateFromStorage = get();\n      hasHydrated = true;\n      finishHydrationListeners.forEach((cb) => cb(stateFromStorage));\n    }).catch((e) => {\n      postRehydrationCallback == null ? void 0 : postRehydrationCallback(void 0, e);\n    });\n  };\n  api.persist = {\n    setOptions: (newOptions) => {\n      options = {\n        ...options,\n        ...newOptions\n      };\n      if (newOptions.storage) {\n        storage = newOptions.storage;\n      }\n    },\n    clearStorage: () => {\n      storage == null ? void 0 : storage.removeItem(options.name);\n    },\n    getOptions: () => options,\n    rehydrate: () => hydrate(),\n    hasHydrated: () => hasHydrated,\n    onHydrate: (cb) => {\n      hydrationListeners.add(cb);\n      return () => {\n        hydrationListeners.delete(cb);\n      };\n    },\n    onFinishHydration: (cb) => {\n      finishHydrationListeners.add(cb);\n      return () => {\n        finishHydrationListeners.delete(cb);\n      };\n    }\n  };\n  if (!options.skipHydration) {\n    hydrate();\n  }\n  return stateFromStorage || configResult;\n};\nconst persist = persistImpl;\n\nexport { combine, createJSONStorage, devtools, persist, redux, subscribeWithSelector };\n","/** Error types and constants for consistent error handling in the frontend. */\n\nexport enum ErrorCode {\n  // Device-related errors\n  DEVICE_NOT_FOUND = \"device_not_found\",\n  DEVICE_DISCONNECTED = \"device_disconnected\",\n  DEVICE_BUSY = \"device_busy\",\n  DEVICE_TIMEOUT = \"device_timeout\",\n\n  // Command-related errors\n  COMMAND_INVALID = \"command_invalid\",\n  COMMAND_TIMEOUT = \"command_timeout\",\n  COMMAND_FAILED = \"command_failed\",\n  COMMAND_CANCELLED = \"command_cancelled\",\n\n  // Validation errors\n  VALIDATION_ERROR = \"validation_error\",\n  INVALID_ARGUMENTS = \"invalid_arguments\",\n\n  // BLE-specific errors\n  BLE_CONNECTION_ERROR = \"ble_connection_error\",\n  BLE_CHARACTERISTIC_MISSING = \"ble_characteristic_missing\",\n\n  // Configuration errors\n  CONFIG_SAVE_ERROR = \"config_save_error\",\n\n  // Generic errors\n  INTERNAL_ERROR = \"internal_error\",\n  UNKNOWN_ERROR = \"unknown_error\",\n}\n\nexport interface AquariumError {\n  code: ErrorCode;\n  message: string;\n  details?: Record<string, any>;\n}\n\n/** Get user-friendly error message for an error code */\nexport function getErrorMessage(error: AquariumError | null): string {\n  if (!error) return \"Unknown error occurred\";\n\n  switch (error.code) {\n    case ErrorCode.DEVICE_NOT_FOUND:\n      return \"Device not found. Please check that the device is powered on and in range.\";\n    case ErrorCode.DEVICE_DISCONNECTED:\n      return \"Device is disconnected. Please reconnect and try again.\";\n    case ErrorCode.DEVICE_BUSY:\n      return \"Device is busy processing another command. Please wait and try again.\";\n    case ErrorCode.DEVICE_TIMEOUT:\n      return \"Device communication timed out. Please check the connection and try again.\";\n    case ErrorCode.COMMAND_TIMEOUT:\n      return \"Command timed out. The operation may have completed - please check device status.\";\n    case ErrorCode.VALIDATION_ERROR:\n      return `Invalid input: ${error.message}`;\n    case ErrorCode.INVALID_ARGUMENTS:\n      return `Invalid arguments: ${error.message}`;\n    case ErrorCode.BLE_CONNECTION_ERROR:\n      return \"Bluetooth connection failed. Please check device connectivity.\";\n    case ErrorCode.BLE_CHARACTERISTIC_MISSING:\n      return \"Device communication error. The device may not be compatible.\";\n    case ErrorCode.CONFIG_SAVE_ERROR:\n      return \"Failed to save configuration. Settings may not persist.\";\n    case ErrorCode.INTERNAL_ERROR:\n      return \"An internal error occurred. Please try again or contact support.\";\n    default:\n      return error.message || \"An unexpected error occurred.\";\n  }\n}\n","// Global state management using Zustand\n// Centralizes device data, command queue, and UI state\n\nimport { createStore } from \"zustand/vanilla\";\nimport type { StateCreator, StoreApi } from \"zustand\";\nimport { subscribeWithSelector } from \"zustand/middleware\";\nimport type {\n  DeviceStatus,\n  CommandRecord,\n  CommandRequest,\n} from \"../types/api\";\nimport type {\n  DeviceState,\n  QueuedCommand,\n  UIState,\n  Notification,\n} from \"../types/store\";\nimport { getErrorMessage } from \"../errors\";\n\n// ========================================\n// STORE INTERFACES\n// ========================================\n\ninterface DeviceStore {\n  // Device state\n  devices: Map<string, DeviceState>;\n\n  // Configuration data (loaded once at startup)\n  configurations: {\n    dosers: Map<string, import('../api/configurations').DoserDevice>;\n    lights: Map<string, import('../api/configurations').LightDevice>;\n    isLoaded: boolean;\n  };\n\n  // Command queue\n  commandQueue: QueuedCommand[];\n  isProcessingCommands: boolean;\n\n  // UI state\n  ui: UIState;\n\n  // Polling state\n  polling: {\n    isEnabled: boolean;\n    intervalId: number | null;\n    intervalMs: number;\n  };\n\n  // Actions\n  actions: {\n    // Configuration management\n    loadConfigurations: () => Promise<void>;\n    setConfigurations: (dosers: import('../api/configurations').DoserDevice[], lights: import('../api/configurations').LightDevice[]) => void;\n    refreshDeviceConfig: (address: string, deviceType: 'doser' | 'light') => Promise<import('../api/configurations').DoserDevice | import('../api/configurations').LightDevice>;\n    getDeviceConfig: (address: string, deviceType: 'doser' | 'light') => import('../api/configurations').DoserDevice | import('../api/configurations').LightDevice | null;\n\n    // Device management\n    setDevices: (devices: DeviceStatus[]) => void;\n    updateDevice: (address: string, status: DeviceStatus) => void;\n    setDeviceLoading: (address: string, loading: boolean) => void;\n    setDeviceError: (address: string, error: string | null) => void;\n\n    // Command queue management\n    queueCommand: (address: string, request: CommandRequest) => Promise<string>;\n    processCommandQueue: () => Promise<void>;\n    retryCommand: (commandId: string) => void;\n    cancelCommand: (commandId: string) => void;\n    clearCommandQueue: () => void;\n\n    // UI state management\n    setCurrentView: (view: UIState[\"currentView\"]) => void;\n    setGlobalError: (error: string | null) => void;\n    addNotification: (notification: Omit<Notification, \"id\" | \"timestamp\">) => void;\n    removeNotification: (id: string) => void;\n    clearNotifications: () => void;\n\n    // Data refresh\n    initializeStore: () => Promise<void>;\n    refreshDevices: () => Promise<void>;\n    refreshDevice: (address: string) => Promise<void>;\n    connectToDevice: (address: string) => Promise<void>;\n\n    // Polling management (placeholder for future real-time updates)\n    startPolling: (intervalMs?: number) => void;\n    stopPolling: () => void;\n    setPollingInterval: (intervalMs: number) => void;\n  };\n}\n\n// ========================================\n// STORE IMPLEMENTATION\n// ========================================\n\nconst storeInitializer: StateCreator<DeviceStore> = (set, get) => ({\n  // Initial state\n  devices: new Map(),\n  configurations: {\n    dosers: new Map(),\n    lights: new Map(),\n    isLoaded: false,\n  },\n  commandQueue: [],\n  isProcessingCommands: false,\n  ui: {\n    currentView: \"overview\",\n    globalError: null,\n    notifications: [],\n  },\n  polling: {\n    isEnabled: false,\n    intervalId: null,\n    intervalMs: 30000, // Default 30 seconds\n  },\n\n  actions: {\n      // Configuration management\n      loadConfigurations: async () => {\n        try {\n          // Note: Old list endpoints (/api/configurations/dosers, /lights) have been removed.\n          // Configurations are now loaded on-demand when viewing specific devices.\n          // This method is kept for backward compatibility but does nothing.\n          console.log(\"Configuration auto-loading is deprecated; configurations are loaded on-demand\");\n        } catch (error) {\n          console.error(\"Failed to load configurations:\", error);\n          // Don't set global error since this is now optional\n        }\n      },\n\n      setConfigurations: (dosers, lights) => {\n        const doserMap = new Map();\n        const lightMap = new Map();\n\n        dosers.forEach(doser => doserMap.set(doser.id, doser));\n        lights.forEach(light => lightMap.set(light.id, light));\n\n        set((state) => ({\n          configurations: {\n            dosers: doserMap,\n            lights: lightMap,\n            isLoaded: true,\n          }\n        }));\n\n        // Update existing devices to include configuration data\n        const devices = new Map(get().devices);\n        devices.forEach((device, address) => {\n          const config = doserMap.get(address) || lightMap.get(address);\n          if (config) {\n            devices.set(address, {\n              ...device,\n              configuration: config,\n            });\n          }\n        });\n        set({ devices });\n      },\n\n      refreshDeviceConfig: async (address, deviceType) => {\n        try {\n          console.log(`Refreshing ${deviceType} config for ${address}`);\n          \n          // Use unified endpoint that auto-detects device type\n          const { getDeviceConfiguration } = await import(\"../api/configurations\");\n          const config = await getDeviceConfiguration(address);\n          \n          // Update the appropriate map based on device type\n          const isDoser = deviceType === 'doser';\n          if (isDoser) {\n            const dosers = new Map(get().configurations.dosers);\n            dosers.set(address, config as any);\n            set((state) => ({\n              configurations: {\n                ...state.configurations,\n                dosers,\n              }\n            }));\n          } else {\n            const lights = new Map(get().configurations.lights);\n            lights.set(address, config as any);\n            set((state) => ({\n              configurations: {\n                ...state.configurations,\n                lights,\n              }\n            }));\n          }\n\n          // Update device state if it exists\n          const devices = new Map(get().devices);\n          const device = devices.get(address);\n          if (device) {\n            devices.set(address, {\n              ...device,\n              configuration: config,\n            });\n            set({ devices });\n          }\n\n          return config;\n        } catch (error) {\n          console.error(`Failed to refresh ${deviceType} config for ${address}:`, error);\n          throw error;\n        }\n      },\n\n      getDeviceConfig: (address, deviceType) => {\n        if (deviceType === 'doser') {\n          return get().configurations.dosers.get(address) || null;\n        } else {\n          return get().configurations.lights.get(address) || null;\n        }\n      },\n\n      // Device management\n      setDevices: (devices) => {\n        const deviceMap = new Map<string, DeviceState>();\n        const { configurations } = get();\n\n        devices.forEach((status) => {\n          const existing = get().devices.get(status.address);\n          const config = configurations.dosers.get(status.address) || configurations.lights.get(status.address);\n\n          deviceMap.set(status.address, {\n            address: status.address,\n            status,\n            configuration: config || null,\n            lastUpdated: Date.now(),\n            isLoading: existing?.isLoading ?? false,\n            error: null,\n          });\n        });\n        set({ devices: deviceMap });\n      },\n\n      updateDevice: (address, status) => {\n        const devices = new Map(get().devices);\n        const existing = devices.get(address);\n        const { configurations } = get();\n        const config = configurations.dosers.get(address) || configurations.lights.get(address);\n\n        devices.set(address, {\n          address,\n          status,\n          configuration: config || existing?.configuration || null,\n          lastUpdated: Date.now(),\n          isLoading: false,\n          error: null,\n        });\n        set({ devices });\n      },\n\n      setDeviceLoading: (address, loading) => {\n        const devices = new Map(get().devices);\n        const existing = devices.get(address);\n        if (existing) {\n          devices.set(address, { ...existing, isLoading: loading });\n          set({ devices });\n        }\n      },\n\n      setDeviceError: (address, error) => {\n        const devices = new Map(get().devices);\n        const existing = devices.get(address);\n        if (existing) {\n          devices.set(address, { ...existing, error, isLoading: false });\n          set({ devices });\n        }\n      },\n\n      // Command queue management\n      queueCommand: async (address, request) => {\n        const commandId = `cmd_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        const queuedCommand: QueuedCommand = {\n          id: commandId,\n          address,\n          request: { ...request, id: request.id || commandId },\n          queuedAt: Date.now(),\n          retryCount: 0,\n        };\n\n        set((state) => ({\n          commandQueue: [...state.commandQueue, queuedCommand],\n        }));\n\n        // Auto-process if not already processing\n        if (!get().isProcessingCommands) {\n          await get().actions.processCommandQueue();\n        }\n\n        return commandId;\n      },\n\n      processCommandQueue: async () => {\n        const { commandQueue, isProcessingCommands, actions } = get();\n\n        if (isProcessingCommands || commandQueue.length === 0) {\n          return;\n        }\n\n        set({ isProcessingCommands: true });\n\n        try {\n          while (get().commandQueue.length > 0) {\n            const [nextCommand, ...remaining] = get().commandQueue;\n            set({ commandQueue: remaining });\n\n            try {\n              // Set device as loading\n              actions.setDeviceLoading(nextCommand.address, true);\n\n              // Execute command via API\n              const { executeCommand } = await import(\"../api/commands\");\n              const result = await executeCommand(nextCommand.address, nextCommand.request);\n\n              // Handle command result\n              if (result.status === \"success\") {\n                // Invalidate metadata cache since command may have modified device state\n                const { invalidateMetadataCache } = await import(\"../ui/aquarium-dashboard/services/cache-service\");\n                invalidateMetadataCache();\n\n                // Debounced refresh of configurations (avoids rapid re-fetching)\n                const { debouncedRefreshConfigurations } = await import(\"../ui/aquarium-dashboard/services/data-service\");\n                await debouncedRefreshConfigurations();\n\n                // Refresh device status if command was successful\n                await actions.refreshDevice(nextCommand.address);\n                actions.addNotification({\n                  type: \"success\",\n                  message: `Command completed successfully`,\n                  autoHide: true,\n                });\n              } else if (result.status === \"failed\" || result.status === \"timed_out\") {\n                // Command failed - use structured error information\n                const errorMessage = getErrorMessage(result.error_code && result.error ? {\n                  code: result.error_code as any,\n                  message: result.error,\n                  details: result.result as any || {}\n                } : null);\n\n                actions.setDeviceError(nextCommand.address, errorMessage);\n                actions.addNotification({\n                  type: \"error\",\n                  message: errorMessage,\n                  autoHide: false,\n                });\n              }\n\n            } catch (error) {\n              // Network/API error - this shouldn't happen in normal operation\n              const errorMessage = error instanceof Error ? error.message : \"Network error\";\n              actions.setDeviceError(nextCommand.address, errorMessage);\n              actions.addNotification({\n                type: \"error\",\n                message: `Network error: ${errorMessage}`,\n                autoHide: false,\n              });\n            } finally {\n              actions.setDeviceLoading(nextCommand.address, false);\n            }\n          }\n        } finally {\n          set({ isProcessingCommands: false });\n        }\n      },\n\n      retryCommand: (commandId) => {\n        const { commandQueue } = get();\n        const command = commandQueue.find(cmd => cmd.id === commandId);\n        if (command) {\n          const retryCommand = {\n            ...command,\n            retryCount: command.retryCount + 1,\n            queuedAt: Date.now(),\n          };\n          set({\n            commandQueue: commandQueue.filter(cmd => cmd.id !== commandId).concat(retryCommand),\n          });\n        }\n      },\n\n      cancelCommand: (commandId) => {\n        set((state) => ({\n          commandQueue: state.commandQueue.filter(cmd => cmd.id !== commandId),\n        }));\n      },\n\n      clearCommandQueue: () => {\n        set({ commandQueue: [] });\n      },\n\n      // UI state management\n      setCurrentView: (view) => {\n        set((state) => ({\n          ui: { ...state.ui, currentView: view },\n        }));\n      },\n\n      setGlobalError: (error) => {\n        set((state) => ({\n          ui: { ...state.ui, globalError: error },\n        }));\n      },\n\n      addNotification: (notification) => {\n        const id = `notif_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        const newNotification: Notification = {\n          ...notification,\n          id,\n          timestamp: Date.now(),\n        };\n\n        set((state) => ({\n          ui: {\n            ...state.ui,\n            notifications: [...state.ui.notifications, newNotification],\n          },\n        }));\n\n        // Auto-remove after 5 seconds if autoHide is true\n        if (notification.autoHide) {\n          setTimeout(() => {\n            get().actions.removeNotification(id);\n          }, 5000);\n        }\n      },\n\n      removeNotification: (id) => {\n        set((state) => ({\n          ui: {\n            ...state.ui,\n            notifications: state.ui.notifications.filter(n => n.id !== id),\n          },\n        }));\n      },\n\n      clearNotifications: () => {\n        set((state) => ({\n          ui: { ...state.ui, notifications: [] },\n        }));\n      },\n\n    // Data refresh\n    initializeStore: async () => {\n      // Stage 1: Load configurations immediately (these load from cached backend data)\n      await get().actions.loadConfigurations();\n\n      // Stage 2: Load live status and overlay on configurations\n      await get().actions.refreshDevices();\n\n      // Stage 3: Enable temporary polling during startup to catch devices connecting\n      // Backend reconnects to devices in background on startup, so we poll briefly\n      // to detect when devices become connected. Polling auto-stops after 30 seconds.\n      const devices = get().devices;\n      const hasDisconnectedDevices = Array.from(devices.values()).some(\n        device => device.status && !device.status.connected\n      );\n      \n      if (hasDisconnectedDevices || devices.size === 0) {\n        console.log(\"⏱️ Starting temporary polling to detect device connections...\");\n        get().actions.startPolling(3000); // Poll every 3 seconds\n        \n        // Stop polling after 30 seconds (backend should have reconnected by then)\n        setTimeout(() => {\n          const currentDevices = get().devices;\n          const stillHasDisconnected = Array.from(currentDevices.values()).some(\n            device => device.status && !device.status.connected\n          );\n          \n          if (!stillHasDisconnected) {\n            console.log(\"✅ All devices connected, stopping polling\");\n            get().actions.stopPolling();\n          } else {\n            console.log(\"⚠️ Some devices still disconnected after 30s, stopping polling anyway\");\n            get().actions.stopPolling();\n          }\n        }, 30000);\n      }\n    },\n\n    refreshDevices: async () => {\n      try {\n        const { fetchJson } = await import(\"../api/http\");\n        const data = await fetchJson<{ [address: string]: DeviceStatus }>(\"api/status\");\n        const devices = Object.values(data) as DeviceStatus[];\n        get().actions.setDevices(devices);\n        get().actions.setGlobalError(null);\n      } catch (error) {\n        const message = error instanceof Error ? error.message : \"Failed to refresh devices\";\n        get().actions.setGlobalError(message);\n        throw error;\n      }\n    },      refreshDevice: async (address) => {\n        try {\n          get().actions.setDeviceLoading(address, true);\n          const { postJson } = await import(\"../api/http\");\n          await postJson(`api/devices/${encodeURIComponent(address)}/status`, {});\n\n          // Refresh all devices to get updated status\n          await get().actions.refreshDevices();\n        } catch (error) {\n          const message = error instanceof Error ? error.message : \"Failed to refresh device\";\n          get().actions.setDeviceError(address, message);\n          throw error;\n        }\n      },\n\n      connectToDevice: async (address) => {\n        try {\n          const { postJson } = await import(\"../api/http\");\n          await postJson(`api/devices/${encodeURIComponent(address)}/connect`, {});\n          get().actions.addNotification({\n            type: \"success\",\n            message: `Connected to device ${address}`,\n            autoHide: true,\n          });\n\n          // Refresh devices after connection\n          await get().actions.refreshDevices();\n        } catch (error) {\n          const message = error instanceof Error ? error.message : \"Failed to connect to device\";\n          get().actions.addNotification({\n            type: \"error\",\n            message: `Connection failed: ${message}`,\n            autoHide: true,\n          });\n          throw error;\n        }\n      },\n\n      // Polling management (placeholder for future real-time updates)\n      startPolling: (intervalMs = 30000) => {\n        const { polling } = get();\n\n        // Stop existing polling if running\n        if (polling.intervalId) {\n          clearInterval(polling.intervalId);\n        }\n\n        // Start new polling\n        const intervalId = setInterval(() => {\n          // Only poll if we have configurations loaded and devices\n          const { configurations, devices } = get();\n          if (configurations.isLoaded && devices.size > 0) {\n            get().actions.refreshDevices().catch((error) => {\n              console.warn(\"Polling refresh failed:\", error);\n              // Continue polling even if one refresh fails\n            });\n          }\n        }, intervalMs);\n\n        set((state) => ({\n          polling: {\n            ...state.polling,\n            isEnabled: true,\n            intervalId: intervalId as any, // TypeScript types for setInterval can be tricky\n            intervalMs,\n          }\n        }));\n      },\n\n      stopPolling: () => {\n        const { polling } = get();\n\n        if (polling.intervalId) {\n          clearInterval(polling.intervalId);\n        }\n\n        set((state) => ({\n          polling: {\n            ...state.polling,\n            isEnabled: false,\n            intervalId: null,\n          }\n        }));\n      },\n\n      setPollingInterval: (intervalMs) => {\n        const { polling } = get();\n\n        set((state) => ({\n          polling: {\n            ...state.polling,\n            intervalMs,\n          }\n        }));\n\n        // Restart polling with new interval if currently enabled\n        if (polling.isEnabled) {\n          get().actions.startPolling(intervalMs);\n        }\n      },\n  },\n});\n\nconst createDeviceStore = (): StoreApi<DeviceStore> =>\n  createStore<DeviceStore>()(subscribeWithSelector(storeInitializer));\n\nexport const deviceStore = createDeviceStore();\n\n// ========================================\n// SELECTORS FOR EASY ACCESS\n// ========================================\n\nexport const getDeviceStore = () => deviceStore;\n\nexport const useDevices = () =>\n  Array.from(deviceStore.getState().devices.values());\nexport const useDevice = (address: string) =>\n  deviceStore.getState().devices.get(address);\nexport const useConfigurations = () => deviceStore.getState().configurations;\nexport const usePolling = () => deviceStore.getState().polling;\nexport const useCommandQueue = () => deviceStore.getState().commandQueue;\nexport const useUI = () => deviceStore.getState().ui;\nexport const useActions = () => deviceStore.getState().actions;\n\n// Device type selectors\nexport const useLightDevices = () =>\n  Array.from(deviceStore.getState().devices.values()).filter(\n    (device) => device.status?.device_type === \"light\",\n  );\n\nexport const useDoserDevices = () =>\n  Array.from(deviceStore.getState().devices.values()).filter(\n    (device) => device.status?.device_type === \"doser\",\n  );\n\n// UI state selectors\nexport const useCurrentView = () => deviceStore.getState().ui.currentView;\nexport const useNotifications = () => deviceStore.getState().ui.notifications;\nexport const useGlobalError = () => deviceStore.getState().ui.globalError;\n","import type { StatusResponse, DeviceStatus, DoserParsed } from './types/api';\nimport type { DeviceEntry } from './types/store';\n\nexport const WEEKDAY_NAMES = [\n  \"Sunday\",\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n];\n\n/**\n * Get human-readable time ago string\n */\nexport function getTimeAgo(timestamp: number): string {\n  const now = Date.now() / 1000; // Convert to seconds\n  const diff = now - timestamp;\n\n  if (diff < 5) return \"just now\";\n  if (diff < 60) return `${Math.floor(diff)}s ago`;\n  if (diff < 3600) return `${Math.floor(diff / 60)}m ago`;\n  if (diff < 86400) return `${Math.floor(diff / 3600)}h ago`;\n  return `${Math.floor(diff / 86400)}d ago`;\n}\n\n/**\n * Get weekday name from number (0=Sunday, 1=Monday, etc.)\n */\nexport function getWeekdayName(weekday: number): string {\n  const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  return days[weekday] || 'Unknown';\n}\n\n/**\n * Format time and weekday into a readable format like \"2:42 PM Wednesday\"\n */\nexport function formatDateTime(hour: number, minute: number, weekday: number): string {\n  // Convert 24-hour to 12-hour format\n  const hour12 = hour === 0 ? 12 : hour > 12 ? hour - 12 : hour;\n  const ampm = hour >= 12 ? 'PM' : 'AM';\n  const timeStr = `${hour12}:${String(minute).padStart(2, '0')} ${ampm}`;\n\n  const weekdayName = getWeekdayName(weekday);\n  return `${timeStr} ${weekdayName}`;\n}\n\n/**\n * Format datetime string for display\n */\nexport function formatDateTimeString(isoString: string | undefined): string {\n  if (!isoString) return 'Never';\n\n  try {\n    const date = new Date(isoString);\n    return date.toLocaleString();\n  } catch {\n    return 'Invalid date';\n  }\n}\n\nexport function escapeHtml(value: string): string {\n  return String(value)\n    .replace(/&/g, \"&amp;\")\n    .replace(/</g, \"&lt;\")\n    .replace(/>/g, \"&gt;\")\n    .replace(/\"/g, \"&quot;\")\n    .replace(/'/g, \"&#39;\");\n}\n\nexport function pad2(value: number | null | undefined): string {\n  if (!Number.isFinite(value ?? Number.NaN)) {\n    return \"00\";\n  }\n  const normalized = Math.max(0, Math.min(99, Math.floor(value ?? 0)));\n  return normalized.toString().padStart(2, \"0\");\n}\n\nexport function formatRawPayload(hex: string): string {\n  const cleaned = hex.replace(/\\s+/g, \"\");\n  const bytes: string[] = [];\n  for (let i = 0; i < cleaned.length; i += 2) {\n    const part = cleaned.substring(i, i + 2);\n    if (part.length === 2) {\n      bytes.push(part.toUpperCase());\n    }\n  }\n  return bytes.join(\" \");\n}\n\nexport function formatTimestamp(timestamp: number): string {\n  if (!Number.isFinite(timestamp)) {\n    return \"Unknown\";\n  }\n  const date = new Date(timestamp * 1000);\n  if (Number.isNaN(date.getTime())) {\n    return \"Unknown\";\n  }\n  return `${date.toLocaleDateString(undefined, {\n    year: \"numeric\",\n    month: \"short\",\n    day: \"2-digit\",\n  })} ${date.toLocaleTimeString(undefined, {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n  })}`;\n}\n\nexport function formatDayTime(\n  weekday: number | null,\n  hour: number | null,\n  minute: number | null\n): string {\n  if (!Number.isFinite(hour) || !Number.isFinite(minute)) {\n    return \"\";\n  }\n  const time = `${pad2(hour)}:${pad2(minute)}`;\n  if (Number.isFinite(weekday) && weekday !== null) {\n    const index = Math.max(0, Math.min(WEEKDAY_NAMES.length - 1, Math.floor(weekday)));\n    return `${WEEKDAY_NAMES[index]} ${time}`;\n  }\n  return time;\n}\n\nexport function renderNotice(\n  message: string,\n  variant: \"info\" | \"success\" | \"warning\" | \"error\" = \"info\",\n  escape = escapeHtml\n): string {\n  const role = variant === \"error\" ? \"alert\" : \"status\";\n  const classes = [\"notice\", variant !== \"info\" ? variant : \"\"].filter(Boolean).join(\" \");\n  return `<div class=\"${classes}\" role=\"${role}\">${escape(message)}</div>`;\n}\n\nexport function renderParsedRaw(parsed: Record<string, unknown> | null): string {\n  if (!parsed) {\n    return \"<em>No decoded payload</em>\";\n  }\n  try {\n    const json = JSON.stringify(parsed, null, 2);\n    return `<pre class=\"code-block\">${escapeHtml(json)}</pre>`;\n  } catch {\n    return \"<em>Unable to render decoded payload</em>\";\n  }\n}\n\n// ========================================\n// TYPE CONVERSION UTILITIES\n// ========================================\n\n/** Convert StatusResponse to DeviceEntry array */\nexport function statusResponseToEntries(data: StatusResponse): DeviceEntry[] {\n  return Object.entries(data).map(([address, status]) => ({\n    address,\n    status,\n  }));\n}\n\n/** Convert debug statuses to DeviceEntry array */\nexport function debugStatusesToEntries(statuses: (DeviceStatus & { address: string })[]): DeviceEntry[] {\n  return statuses.map((status) => ({\n    address: status.address,\n    status,\n  }));\n}\n\n/** Convert lifetime totals from tenths of mL to mL */\nexport function getLifetimeTotalsInMl(parsed: DoserParsed): number[] {\n  return parsed.lifetime_totals_tenths_ml.map(tenths => tenths / 10);\n}\n","/**\n * Light device rendering components\n */\n\nimport { deviceStore } from \"../../../stores/deviceStore\";\nimport { getWeekdayName, formatDateTime } from \"../../../utils\";\nimport type { AutoProgram } from \"../../../utils/schedule-utils\";\nimport type { DeviceStatus } from \"../../../types/api\";\n\n/**\n * Extract auto programs from device configuration\n */\nfunction getDeviceAutoPrograms(deviceAddress: string): (AutoProgram & { channels?: any[] })[] {\n  const state = deviceStore.getState();\n  const deviceConfig = state.configurations.lights.get(deviceAddress);\n\n  if (!deviceConfig?.configurations) {\n    return [];\n  }\n\n  const activeConfig = deviceConfig.configurations.find(\n    (config: any) => config.id === deviceConfig.activeConfigurationId\n  );\n\n  if (!activeConfig?.revisions || activeConfig.revisions.length === 0) {\n    return [];\n  }\n\n  const latestRevision = activeConfig.revisions[activeConfig.revisions.length - 1];\n  const profile = latestRevision.profile;\n\n  if (profile.mode !== 'auto' || !profile.programs) {\n    return [];\n  }\n\n  // The backend now provides the 'status' field directly.\n  // We just need to merge the 'channels' for rendering.\n  return profile.programs.map((program: any) => ({\n    ...program,\n    channels: deviceConfig.channels,\n  }));\n}\n\n/**\n * Render light device status\n */\nexport function renderLightCardStatus(device: DeviceStatus & { address: string }): string {\n  const state = deviceStore.getState();\n  const deviceConfig = state.configurations.lights.get(device.address);\n\n  // Check if device is in auto mode and has programs\n  if (deviceConfig?.configurations && deviceConfig.activeConfigurationId) {\n    const activeConfig = deviceConfig.configurations.find(\n      (config: any) => config.id === deviceConfig.activeConfigurationId\n    );\n\n    if (activeConfig?.revisions && activeConfig.revisions.length > 0) {\n      const latestRevision = activeConfig.revisions[activeConfig.revisions.length - 1];\n      const profile = latestRevision.profile;\n\n      // If in auto mode and has programs, show schedule\n      if (profile.mode === 'auto' && profile.programs && profile.programs.length > 0) {\n        return renderLightAutoSchedule(device, deviceConfig);\n      }\n    }\n  }\n\n  // Fallback: show simple connection state\n  return `\n    <div style=\"padding: 24px; text-align: center; color: var(--gray-500); font-size: 14px;\">\n      <div style=\"font-size: 16px; color: ${device.connected ? 'var(--success)' : 'var(--gray-400)'}; margin-bottom: 8px;\">\n        ${device.connected ? '✓ Connected' : '○ Disconnected'}\n      </div>\n      <div style=\"font-size: 12px;\">\n        Last update: ${new Date(device.updated_at * 1000).toLocaleTimeString()}\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Render light auto mode schedule display\n */\nfunction renderLightAutoSchedule(device: DeviceStatus & { address: string }, deviceConfig: any): string {\n  const programs = getDeviceAutoPrograms(device.address) as (AutoProgram & { status: string })[];\n  \n  if (programs.length === 0) {\n    return `\n      <div style=\"padding: 16px; text-align: center; color: var(--gray-500);\">\n        No auto programs configured\n      </div>\n    `;\n  }\n\n  // Define the sort order for statuses\n  const statusOrder: { [key: string]: number } = {\n    current: 0,\n    next: 1,\n    upcoming: 2,\n    disabled: 3,\n  };\n\n  // Sort programs based on the new status field from the backend\n  const sortedSchedules = [...programs].sort((a, b) => {\n    const orderA = statusOrder[a.status] ?? 99;\n    const orderB = statusOrder[b.status] ?? 99;\n    if (orderA !== orderB) {\n      return orderA - orderB;\n    }\n    // Fallback to sorting by sunrise time if statuses are the same\n    return a.sunrise.localeCompare(b.sunrise);\n  });\n\n  // Filter out disabled programs and take the top 3 for display\n  const topThree = sortedSchedules.filter(s => s.status !== 'disabled').slice(0, 3);\n\n  return `\n    <div style=\"padding: 16px; display: flex; flex-direction: column; gap: 12px;\">\n      ${topThree.length > 0 ? `\n        <div>\n          <div style=\"display: flex; flex-direction: column; gap: 6px;\">\n            ${topThree.map(p => renderScheduleItem(p)).join('')}\n          </div>\n        </div>\n      ` : `\n        <div style=\"text-align: center; color: var(--gray-500); font-size: 13px;\">\n          No scheduled programs\n        </div>\n      `}\n    </div>\n  `;\n}\n\n/**\n * Render a single schedule item with color coding\n */\nfunction renderScheduleItem(program: AutoProgram & { status: string, channels?: any[] }): string {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'current': return 'var(--success)'; // Green\n      case 'next': \n      case 'upcoming': return 'var(--primary)'; // Blue\n      case 'disabled': return 'var(--error)'; // Red\n      default: return 'var(--gray-400)';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'current': return 'Active';\n      case 'next': return 'Next';\n      case 'upcoming': return 'Upcoming';\n      case 'disabled': return 'Disabled';\n      default: return 'Unknown';\n    }\n  };\n\n  const accentColor = getStatusColor(program.status);\n  const statusText = getStatusText(program.status);\n\n  // Format channel levels in the order specified by device channels configuration\n  let channelLevels = '';\n  if (program.channels && Array.isArray(program.channels)) {\n    // Use the device channel order with proper labels\n    const levelStrings = program.channels\n      .map(channel => {\n        const value = program.levels[channel.key];\n        // Use label if available, otherwise fallback to key\n        const displayName = channel.label || channel.key.charAt(0).toUpperCase() + channel.key.slice(1);\n        return `${displayName}:${value}%`;\n      })\n      .filter(str => str); // Filter out undefined values\n    channelLevels = levelStrings.join(' '); // Single space between channels\n  } else {\n    // Fallback to alphabetical sorting if channels not provided\n    channelLevels = Object.entries(program.levels)\n      .map(([channel, value]) => {\n        const displayName = channel.charAt(0).toUpperCase() + channel.slice(1);\n        return `${displayName}:${value}%`;\n      })\n      .join(' '); // Single space between channels\n  }\n\n  const timeRange = `${program.sunrise} - ${program.sunset}`;\n\n  return `\n    <div style=\"padding: 8px 12px; background: var(--bg-primary); border-radius: 4px; border-left: 3px solid ${accentColor};\">\n      <div style=\"flex: 1; min-width: 0;\">\n        <div style=\"font-size: 13px; font-weight: 600; color: var(--text-primary); margin-bottom: 2px;\">${program.label}</div>\n        <div style=\"font-size: 11px; color: var(--text-secondary);\">\n          ${statusText} • ${timeRange} • ${program.rampMinutes}min ramp\n        </div>\n        <pre style=\"font-size: 11px; color: var(--text-secondary); margin-top: 2px; margin: 0; padding: 0; font-family: 'Courier New', Courier, monospace; background: transparent; border: none; white-space: pre-wrap; word-wrap: break-word;\">\n${channelLevels}</pre>\n      </div>\n    </div>\n  `;\n}\n","/**\n * Device-specific utilities\n */\n\nimport { deviceStore } from \"../../../stores/deviceStore\";\n\n/**\n * Get the configured name for a doser head\n */\nexport function getDoserHeadName(deviceAddress: string, headIndex: number): string | null {\n  const state = deviceStore.getState();\n  \n  // headIndex is 1-based (1-4)\n  const config = state.configurations.dosers.get(deviceAddress);\n  if (config?.headNames && headIndex in config.headNames) {\n    return config.headNames[headIndex];\n  }\n  \n  return null;\n}\n\n/**\n * Get the lifetime total for a doser head\n * Note: With ultra-minimal DeviceStatus, parsed data is no longer in status.\n * This would need to fetch from configuration API if needed.\n */\nexport function getHeadLifetimeTotal(headIndex: number, deviceAddress?: string): string {\n  // Ultra-minimal DeviceStatus no longer includes parsed data\n  // Lifetime totals would need to be fetched from device configuration API\n  return 'N/A';\n}\n\n/**\n * Format schedule days for display\n */\nexport function formatScheduleDays(weekdays: number[] | string[] | undefined): string {\n  if (!weekdays || !Array.isArray(weekdays) || weekdays.length === 0) {\n    return 'None';\n  }\n\n  // If weekdays are strings (e.g., 'monday', 'tuesday'), convert to abbreviations\n  if (typeof weekdays[0] === 'string') {\n    const dayMap: Record<string, string> = {\n      'monday': 'Mon',\n      'tuesday': 'Tue',\n      'wednesday': 'Wed',\n      'thursday': 'Thu',\n      'friday': 'Fri',\n      'saturday': 'Sat',\n      'sunday': 'Sun'\n    };\n    const abbrevDays = (weekdays as string[]).map(day => dayMap[day.toLowerCase()]).filter(Boolean);\n    \n    if (abbrevDays.length === 7) return 'Everyday';\n    if (abbrevDays.length === 5 && ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'].every(d => abbrevDays.includes(d))) {\n      return 'Weekdays';\n    }\n    if (abbrevDays.length === 2 && abbrevDays.includes('Sat') && abbrevDays.includes('Sun')) {\n      return 'Weekends';\n    }\n    return abbrevDays.join(', ');\n  }\n\n  // If weekdays are numbers (0-6 indices), handle as before\n  const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const validDays = (weekdays as number[]).filter(day => typeof day === 'number' && day >= 0 && day <= 6);\n\n  if (validDays.length === 0) {\n    return 'None';\n  }\n\n  const sortedDays = [...validDays].sort();\n\n  // Check for everyday (all 7 days)\n  if (sortedDays.length === 7) {\n    return 'Everyday';\n  }\n\n  // Check for weekdays (Mon-Fri)\n  if (sortedDays.length === 5 && sortedDays.every(day => day >= 1 && day <= 5)) {\n    return 'Weekdays';\n  }\n\n  // Check for weekends (Sat-Sun)\n  if (sortedDays.length === 2 && sortedDays.includes(0) && sortedDays.includes(6)) {\n    return 'Weekends';\n  }\n\n  // Otherwise, list the days\n  return sortedDays.map(day => dayNames[day]).join(', ');\n}\n\n/**\n * Get configuration data for a specific head\n */\nexport function getHeadConfigData(headIndex: number, deviceAddress: string): { setDose: string; schedule: string } {\n  const state = deviceStore.getState();\n  const config = state.configurations.dosers.get(deviceAddress);\n\n  if (!config || !config.configurations || config.configurations.length === 0) {\n    return { setDose: 'N/A', schedule: 'N/A' };\n  }\n\n  const activeConfig = config.configurations.find((c: any) => c.id === config.activeConfigurationId) || config.configurations[0];\n  if (!activeConfig || !activeConfig.revisions || activeConfig.revisions.length === 0) {\n    return { setDose: 'N/A', schedule: 'N/A' };\n  }\n\n  const latestRevision = activeConfig.revisions[activeConfig.revisions.length - 1];\n  const configHead = latestRevision.heads?.find((h: any) => h.index === headIndex);\n\n  if (!configHead) {\n    return { setDose: 'N/A', schedule: 'N/A' };\n  }\n\n  // Extract dose from schedule\n  let setDose = 'N/A';\n  const schedule = configHead.schedule;\n  if (schedule && schedule.dailyDoseMl !== undefined && schedule.dailyDoseMl !== null) {\n    setDose = `${schedule.dailyDoseMl}ml`;\n  }\n\n  // Format schedule days from recurrence\n  const scheduleText = formatScheduleDays(configHead.recurrence?.days);\n  return { setDose, schedule: scheduleText };\n}\n","/**\n * Doser device rendering components\n */\n\nimport { deviceStore } from \"../../../stores/deviceStore\";\nimport { formatDateTime, getWeekdayName } from \"../../../utils\";\nimport { getDoserHeadName, getHeadConfigData } from \"../utils/device-utils\";\nimport type { DeviceStatus } from \"../../../types/api\";\n\n/**\n * Render doser device status\n */\nexport function renderDoserCardStatus(device: DeviceStatus & { address: string }): string {\n  const zustandState = deviceStore.getState();\n  const config = zustandState.configurations.dosers.get(device.address);\n  \n  // If we have parsed status data, show the pump heads\n  if (config?.last_status?.parsed?.heads) {\n    return renderPumpHeads(config.last_status.parsed.heads, config, device.address);\n  }\n  \n  // Fallback: show simple connection state when parsed data isn't available yet\n  return `\n    <div style=\"padding: 24px; text-align: center; color: var(--gray-500); font-size: 14px;\">\n      <div style=\"font-size: 16px; color: ${device.connected ? 'var(--success)' : 'var(--gray-400)'}; margin-bottom: 8px;\">\n        ${device.connected ? '✓ Connected' : '○ Disconnected'}\n      </div>\n      <div style=\"font-size: 12px;\">\n        Last update: ${new Date(device.updated_at * 1000).toLocaleTimeString()}\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Render pump heads grid\n */\nfunction renderPumpHeads(heads: any[], savedConfig?: any, deviceAddress?: string): string {\n  // Always show 4 heads (standard for doser devices)\n  // Combine device status data with configuration data\n  const allHeads = [];\n\n  for (let i = 0; i < 4; i++) {\n    const deviceHead = heads[i];\n    const headIndex = i + 1; // 1-based indexing for heads\n\n    // Get configuration data for this head\n    const configData = deviceAddress ? getHeadConfigData(headIndex, deviceAddress) : { setDose: 'N/A', schedule: 'N/A' };\n\n    // Get custom head name from metadata (pass 1-based index)\n    const customName = deviceAddress ? getDoserHeadName(deviceAddress, headIndex) : null;\n\n    // Get dosed today from device head\n    const dosedToday = deviceHead?.dosed_tenths_ml ? `${(deviceHead.dosed_tenths_ml / 10).toFixed(1)}mL` : 'N/A';\n\n    allHeads.push({\n      index: headIndex,\n      deviceHead,\n      configData,\n      customName,\n      dosedToday\n    });\n  }\n\n  return `\n    <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 12px;\">\n      ${allHeads.map((head: any) => renderPumpHead(head)).join('')}\n    </div>\n  `;\n}\n\n/**\n * Render a single pump head\n */\nfunction renderPumpHead(head: any): string {\n  const { index, deviceHead, configData, customName, dosedToday } = head;\n\n  // Determine head status and mode\n  let statusText = 'Disabled';\n  let statusColor = 'var(--gray-400)';\n  let modeText = 'N/A';\n  let isDisabled = true;\n\n  if (deviceHead) {\n    // Head status: {0,1,2,3,4} = {Daily, 24 Hourly, Custom, Timer, Disabled}\n    const mode = deviceHead.mode;\n    switch (mode) {\n      case 0:\n        statusText = 'Active';\n        statusColor = 'var(--success)';\n        modeText = 'Daily';\n        isDisabled = false;\n        break;\n      case 1:\n        statusText = 'Active';\n        statusColor = 'var(--success)';\n        modeText = '24H';\n        isDisabled = false;\n        break;\n      case 2:\n        statusText = 'Active';\n        statusColor = 'var(--success)';\n        modeText = 'Custom';\n        isDisabled = false;\n        break;\n      case 3:\n        statusText = 'Active';\n        statusColor = 'var(--success)';\n        modeText = 'Timer';\n        isDisabled = false;\n        break;\n      case 4:\n      default:\n        statusText = 'Disabled';\n        statusColor = 'var(--gray-400)';\n        modeText = 'Disabled';\n        isDisabled = true;\n        break;\n    }\n  }\n\n  const headName = customName || `Head ${index}`;\n\n  // If disabled, show simple view\n  if (isDisabled) {\n    return `\n      <div style=\"padding: 8px 12px; background: var(--bg-primary); border-radius: 4px; border-left: 3px solid ${statusColor};\">\n        <div style=\"display: grid; grid-template-columns: 1fr auto; gap: 8px; align-items: center;\">\n          <div style=\"font-size: 13px; font-weight: 600; color: var(--text-primary);\">${headName}</div>\n          <div style=\"font-size: 11px; color: ${statusColor}; font-weight: 600;\">${statusText}</div>\n        </div>\n      </div>\n    `;\n  }\n\n  return `\n    <div style=\"padding: 8px 12px; background: var(--bg-primary); border-radius: 4px; border-left: 3px solid ${statusColor};\">\n      <!-- First Row: Head name, mode, status -->\n      <div style=\"display: grid; grid-template-columns: 1fr auto auto; gap: 8px; align-items: center; margin-bottom: 8px;\">\n        <div style=\"font-size: 13px; font-weight: 600; color: var(--text-primary);\">${headName}</div>\n        <div style=\"font-size: 11px; color: var(--text-secondary);\">${modeText}</div>\n        <div style=\"font-size: 11px; color: ${statusColor}; font-weight: 600;\">${statusText}</div>\n      </div>\n\n      <!-- Second Row: Set Dose, Schedule, Dosed Today -->\n      <div style=\"display: grid; grid-template-columns: repeat(3, 1fr); gap: 8px; font-size: 11px;\">\n        <div style=\"text-align: center;\">\n          <div style=\"color: var(--text-secondary); margin-bottom: 2px;\">Set Dose</div>\n          <div style=\"font-weight: 600; color: var(--text-primary);\">${configData.setDose}</div>\n        </div>\n        <div style=\"text-align: center;\">\n          <div style=\"color: var(--text-secondary); margin-bottom: 2px;\">Schedule</div>\n          <div style=\"font-weight: 600; color: var(--text-primary);\">${configData.schedule}</div>\n        </div>\n        <div style=\"text-align: center;\">\n          <div style=\"color: var(--text-secondary); margin-bottom: 2px;\">Dosed</div>\n          <div style=\"font-weight: 600; color: var(--text-primary);\">${dosedToday}</div>\n        </div>\n      </div>\n    </div>\n  `;\n}\n","/**\n * Device card rendering functions\n */\n\nimport { deviceStore } from \"../../../stores/deviceStore\";\nimport { getTimeAgo } from \"../../../utils\";\n/* import { renderConnectionStatus } from \"../utils/connection-utils\"; */\nimport { renderLightCardStatus/* , renderChannelLevels */ } from \"./light-components\";\nimport { renderDoserCardStatus } from \"./doser-components\";\nimport type { DeviceStatus } from \"../../../types/api\";\n\n/**\n * Toggle flip state on a device card\n */\n(window as any).toggleDeviceCardFlip = (address: string) => {\n  const card = document.querySelector(`[data-device-address=\"${address}\"]`);\n  if (card) {\n    card.classList.toggle('flipped');\n  }\n};\n\n/**\n * Render a device section with device tiles\n */\nexport function renderDeviceSection(\n  title: string,\n  devices: Array<DeviceStatus & { address: string }>\n): string {\n  return `\n    <div class=\"card\">\n      <div class=\"card-header\">\n        <h2 class=\"card-title\">${title}</h2>\n        <div style=\"display: flex; align-items: center; gap: 12px;\">\n          <div class=\"badge badge-info\">${devices.length}</div>\n          <button class=\"toggle-icon-button\" onclick=\"window.handleScanDevices()\" title=\"Scan & Connect\">\n            <svg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" viewBox=\"0 0 24 24\" class=\"toggle-icon\" xmlns=\"http://www.w3.org/2000/svg\">\n              <title>bluetooth-connect</title>\n              <path d=\"M19,10L17,12L19,14L21,12M14.88,16.29L13,18.17V14.41M13,5.83L14.88,7.71L13,9.58M17.71,7.71L12,2H11V9.58L6.41,5L5,6.41L10.59,12L5,17.58L6.41,19L11,14.41V22H12L17.71,16.29L13.41,12M7,12L5,10L3,12L5,14L7,12Z\" />\n            </svg>\n          </button>\n        </div>\n      </div>\n      <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 20px; margin-top: 16px;\">\n        ${devices.map(device => renderDeviceTile(device)).join(\"\")}\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Render an individual device tile with full device info\n * TODO: Simplified per dashboard cleanup - only showing header\n */\nfunction renderDeviceTile(device: DeviceStatus & { address: string }): string {\n  const statusColor = device.connected ? \"var(--success)\" : \"var(--gray-400)\";\n  const statusText = device.connected ? \"Connected\" : \"Disconnected\";\n  \n  // Get device name from configuration (all devices have 'name' field)\n  const zustandState = deviceStore.getState();\n  const config = device.device_type === \"doser\" \n    ? zustandState.configurations.dosers.get(device.address)\n    : zustandState.configurations.lights.get(device.address);\n  \n  const deviceName = config?.name || device.address;\n  const timeAgo = getTimeAgo(device.updated_at);\n\n  return `\n    <div class=\"flip-card\" data-device-address=\"${device.address}\">\n      <div class=\"flip-card-inner\">\n        <!-- Front of card -->\n        <div class=\"flip-card-front\">\n          <div class=\"card device-card ${device.device_type} ${device.connected ? 'connected' : 'disconnected'}\" style=\"padding: 0; border-left: 4px solid ${statusColor}; height: 100%;\">\n            ${renderDeviceCardHeader(device, deviceName, statusText, timeAgo)}\n            ${renderDeviceCardBody(device)}\n            ${renderDeviceCardFooter(device)}\n          </div>\n        </div>\n        <!-- Back of card -->\n        <div class=\"flip-card-back\">\n          ${renderDeviceCardSettings(device, deviceName)}\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Render device card header\n */\nfunction renderDeviceCardHeader(\n  device: DeviceStatus & { address: string },\n  deviceName: string,\n  statusText: string,\n  timeAgo: string\n): string {\n  const statusColor = device.connected ? \"var(--success)\" : \"var(--gray-400)\";\n\n  return `\n    <div class=\"device-header\" style=\"padding: 16px; border-bottom: 1px solid var(--border-color);\">\n      <div style=\"display: flex; justify-content: space-between; align-items: center;\">\n        <div style=\"display: flex; align-items: center; gap: 12px;\">\n          <div class=\"status-indicator\" style=\"width: 12px; height: 12px; border-radius: 50%; background: ${statusColor};\"></div>\n          <h3 style=\"font-size: 18px; font-weight: 600; margin: 0; color: var(--text-primary);\">\n            ${deviceName}\n          </h3>\n        </div>\n        <div style=\"display: flex; align-items: center; gap: 12px;\">\n          <button\n            class=\"btn-icon\"\n            onclick=\"window.handleRefreshDevice('${device.address}')\"\n            title=\"Refresh Status\"\n            style=\"padding: 6px 10px; font-size: 16px; background: transparent; border: 1px solid var(--border-color); border-radius: 6px; cursor: pointer; color: var(--text-secondary); transition: all 0.2s;\"\n            onmouseover=\"this.style.background='var(--gray-100)'; this.style.borderColor='var(--gray-400)'; this.style.color='var(--text-primary)';\"\n            onmouseout=\"this.style.background='transparent'; this.style.borderColor='var(--border-color)'; this.style.color='var(--text-secondary)';\"\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"18\" height=\"18\" fill=\"currentColor\" style=\"display: block;\">\n              <path d=\"M17.65,6.35C16.2,4.9,14.21,4,12,4A8,8,0,0,0,4,12A8,8,0,0,0,12,20C15.73,20,18.84,17.45,19.73,14H17.65C16.83,16.33,14.61,18,12,18A6,6,0,0,1,6,12A6,6,0,0,1,12,6C13.66,6,15.14,6.69,16.22,7.78L13,11H20V4L17.65,6.35Z\" />\n            </svg>\n          </button>\n          <button\n            class=\"btn-icon\"\n            onclick=\"window.toggleDeviceCardFlip('${device.address}')\"\n            title=\"Device Settings\"\n            style=\"padding: 6px 10px; font-size: 16px; background: transparent; border: 1px solid var(--border-color); border-radius: 6px; cursor: pointer; color: var(--text-secondary); transition: all 0.2s;\"\n            onmouseover=\"this.style.background='var(--gray-100)'; this.style.borderColor='var(--gray-400)'; this.style.color='var(--text-primary)';\"\n            onmouseout=\"this.style.background='transparent'; this.style.borderColor='var(--border-color)'; this.style.color='var(--text-secondary)';\"\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"18\" height=\"18\" fill=\"currentColor\" style=\"display: block;\"><path d=\"M12,15.5A3.5,3.5 0 0,1 8.5,12A3.5,3.5 0 0,1 12,8.5A3.5,3.5 0 0,1 15.5,12A3.5,3.5 0 0,1 12,15.5M19.43,12.97C19.47,12.65 19.5,12.33 19.5,12C19.5,11.67 19.47,11.34 19.43,11L21.54,9.37C21.73,9.22 21.78,8.95 21.66,8.73L19.66,5.27C19.54,5.05 19.27,4.96 19.05,5.05L16.56,6.05C16.04,5.66 15.5,5.32 14.87,5.07L14.5,2.42C14.46,2.18 14.25,2 14,2H10C9.75,2 9.54,2.18 9.5,2.42L9.13,5.07C8.5,5.32 7.96,5.66 7.44,6.05L4.95,5.05C4.73,4.96 4.46,5.05 4.34,5.27L2.34,8.73C2.21,8.95 2.27,9.22 2.46,9.37L4.57,11C4.53,11.34 4.5,11.67 4.5,12C4.5,12.33 4.53,12.65 4.57,12.97L2.46,14.63C2.27,14.78 2.21,15.05 2.34,15.27L4.34,18.73C4.46,18.95 4.73,19.03 4.95,18.95L7.44,17.94C7.96,18.34 8.5,18.68 9.13,18.93L9.5,21.58C9.54,21.82 9.75,22 10,22H14C14.25,22 14.46,21.82 14.5,21.58L14.87,18.93C15.5,18.67 16.04,18.34 16.56,17.94L19.05,18.95C19.27,19.03 19.54,18.95 19.66,18.73L21.66,15.27C21.78,15.05 21.73,14.78 21.54,14.63L19.43,12.97Z\" /></svg>\n          </button>\n          <div style=\"font-size: 11px; color: var(--text-secondary);\">${timeAgo}</div>\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Render device card body (device info/status section)\n */\nfunction renderDeviceCardBody(device: DeviceStatus & { address: string }): string {\n  return `\n    <div class=\"device-body\" style=\"padding: 16px;\">\n      ${renderDeviceSpecificContent(device)}\n    </div>\n  `;\n}\n\n/**\n * Render device-specific content based on device type\n */\nfunction renderDeviceSpecificContent(device: DeviceStatus & { address: string }): string {\n  if (device.device_type === \"light\") {\n    return renderLightCardStatus(device);\n  } else if (device.device_type === \"doser\") {\n    return renderDoserCardStatus(device);\n  } else {\n    return `\n      <div class=\"device-status-placeholder\">\n        <div style=\"text-align: center; color: var(--gray-500); padding: 20px;\">\n          <div style=\"font-size: 24px; margin-bottom: 8px;\">📊</div>\n          <p>Device status and information will be displayed here</p>\n        </div>\n      </div>\n    `;\n  }\n}\n\n/**\n * Render device card footer (Settings and Connect buttons)\n */\nfunction renderDeviceCardFooter(device: DeviceStatus & { address: string }): string {\n  const connectButtonText = device.connected ? 'Disconnect' : 'Connect';\n  const connectButtonClass = device.connected ? 'btn-danger' : 'btn-primary';\n\n  return `\n    <div class=\"device-footer\" style=\"padding: 16px; border-top: 1px solid var(--border-color); background: var(--bg-secondary);\">\n      <div style=\"display: flex; justify-content: space-between; align-items: center;\">\n        <button class=\"btn btn-outline\" onclick=\"window.openDeviceSettings('${device.address}', '${device.device_type}')\">\n          Settings\n        </button>\n        <button class=\"btn connect-button ${connectButtonClass}\" onclick=\"window.toggleDeviceConnection('${device.address}')\">\n          ${connectButtonText}\n        </button>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Render the back of the card (settings form)\n */\nfunction renderDeviceCardSettings(device: DeviceStatus & { address: string }, deviceName: string): string {\n  const state = deviceStore.getState();\n  const config = device.device_type === \"doser\" \n    ? state.configurations.dosers.get(device.address)\n    : state.configurations.lights.get(device.address);\n\n  return `\n    <div class=\"card device-card-settings\" style=\"padding: 0; height: 100%; display: flex; flex-direction: column; border-left: 4px solid var(--primary);\">\n      <div class=\"card-header\" style=\"padding: 16px; border-bottom: 1px solid var(--border-color); display: flex; justify-content: space-between; align-items: center;\">\n        <h3 style=\"font-size: 18px; font-weight: 600; margin: 0; color: var(--text-primary);\">\n          ${deviceName}\n        </h3>\n        <button \n          class=\"btn btn-outline\" \n          style=\"font-size: 13px; padding: 6px 12px; white-space: nowrap;\"\n          onclick=\"window.handleExportDeviceConfig('${device.address}')\"\n          title=\"Import/Export device configuration\"\n        >\n          Import/Export\n        </button>\n      </div>\n      <div style=\"padding: 0; flex: 1; overflow-y: auto;\">\n        <div style=\"padding: 0px 16px 16px 16px;\">\n          <label style=\"display: block; font-size: 14px; font-weight: 600; color: var(--text-primary); margin-bottom: 8px;\">Device Name</label>\n          <input \n            type=\"text\" \n            class=\"form-input device-name-input\"\n            value=\"${config?.name || deviceName}\"\n            placeholder=\"Enter device name\"\n            style=\"width: 100%; padding: 6px 12px; border: 1px solid var(--border-color); border-radius: 6px; background: var(--bg-primary); color: var(--text-primary); font-size: 14px;\"\n          />\n        </div>\n\n        ${device.device_type === 'doser' ? `\n          <div style=\"padding: 0 16px 16px 16px;\">\n            <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 12px;\">\n              ${[1, 2, 3, 4].map(headIndex => `\n                <div>\n                  <label style=\"display: block; font-size: 12px; color: var(--text-secondary); margin-bottom: 4px;\">Head ${headIndex}</label>\n                  <input \n                    type=\"text\" \n                    class=\"form-input head-name-input\"\n                    data-head=\"${headIndex}\"\n                    value=\"${((config as any)?.headNames?.[headIndex] || '')}\"\n                    placeholder=\"Enter name\"\n                    style=\"width: 100%; padding: 6px 12px; border: 1px solid var(--border-color); border-radius: 6px; background: var(--bg-primary); color: var(--text-primary); font-size: 14px;\"\n                  />\n                </div>\n              `).join('')}\n            </div>\n          </div>\n        ` : ''}\n\n        <div style=\"padding: 0 16px 16px 16px;\">\n          <label style=\"display: flex; align-items: center; gap: 8px; cursor: pointer;\">\n            <input \n              type=\"checkbox\" \n              class=\"auto-reconnect-checkbox\"\n              ${config?.autoReconnect ? 'checked' : ''}\n              style=\"cursor: pointer;\"\n            />\n            <span style=\"font-size: 14px; color: var(--text-primary);\">Auto-reconnect when available</span>\n          </label>\n        </div>\n      </div>\n      <div style=\"padding: 16px; border-top: 1px solid var(--border-color); background: var(--bg-secondary);\">\n        <div style=\"display: flex; gap: 12px; justify-content: flex-end;\">\n          <button \n            class=\"btn btn-outline\" \n            onclick=\"window.toggleDeviceCardFlip('${device.address}')\"\n          >\n            Cancel\n          </button>\n          <button \n            class=\"btn btn-primary\" \n            onclick=\"window.saveDeviceCardSettings('${device.address}')\"\n          >\n            Save\n          </button>\n        </div>\n      </div>\n    </div>\n  `;\n}\n","/**\n * Overview tab rendering\n */\n\nimport { deviceStore } from \"../../../stores/deviceStore\";\nimport type { DeviceStatus } from \"../../../types/api\";\nimport { renderDeviceSection } from \"../devices/device-card\";\n\n/**\n * Render the overview tab - shows device connection status\n */\nexport function renderOverviewTab(): string {\n  const state = deviceStore.getState();\n\n  // Convert device Map to array of connected devices\n  const devices: (DeviceStatus & { address: string })[] = Array.from(state.devices.values())\n    .filter(device => device.status?.connected)\n    .map(device => ({\n      ...(device.status as DeviceStatus),\n      address: device.address\n    }));\n\n  // Show empty state if no devices\n  if (devices.length === 0) {\n    return `\n      <div class=\"empty-state\">\n        <h2>No Devices Connected</h2>\n        <p>This dashboard shows the status of connected aquarium devices. Devices must be connected externally to the backend service.</p>\n      </div>\n    `;\n  }\n\n  return `\n    ${renderDeviceSection(\"Devices\", devices)}\n  `;\n}\n","/**\n * Dev tab rendering\n */\n\nimport { deviceStore } from \"../../../stores/deviceStore\";\nimport type { DeviceStatus } from \"../../../types/api\";\n\n/**\n * Render the dev tab - shows raw payload data for debugging\n */\nexport function renderDevTab(): string {\n  const state = deviceStore.getState();\n  \n  // Convert device Map to array\n  const devices: (DeviceStatus & { address: string })[] = Array.from(state.devices.values())\n    .map(device => ({\n      ...(device.status as DeviceStatus),\n      address: device.address\n    }))\n    .filter(d => d.address); // Filter out devices without status\n\n  return `\n    <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n      <!-- Raw Device Data -->\n      <div class=\"card\">\n        <div class=\"card-header\">\n          <h2 class=\"card-title\">Raw Device Data</h2>\n          <div class=\"badge badge-info\">${devices.length}</div>\n        </div>\n        <div style=\"padding: 20px;\">\n          ${devices.length === 0 ? `\n            <div class=\"empty-state\" style=\"text-align: center; color: var(--gray-500); padding: 40px 20px;\">\n              <div style=\"font-size: 48px; margin-bottom: 16px;\">📊</div>\n              <h3 style=\"margin: 0 0 8px 0; color: var(--gray-700);\">No Connected Devices</h3>\n              <p style=\"margin: 0; color: var(--gray-500);\">Connect to devices to see raw payload data for debugging.</p>\n            </div>\n          ` : `\n            <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n              ${devices.map(device => renderCollapsibleDeviceRawData(device)).join(\"\")}\n            </div>\n          `}\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Render collapsible raw data for a single device\n */\nfunction renderCollapsibleDeviceRawData(device: any): string {\n  const deviceId = `device-${device.address.replace(/:/g, '-')}`;\n  const lastUpdate = device.updated_at ? new Date(device.updated_at * 1000).toLocaleString() : 'Unknown';\n\n  return `\n    <div class=\"device-raw-data-card\" style=\"border: 1px solid var(--gray-200); border-radius: 8px; overflow: hidden;\">\n      <!-- Collapsible Header -->\n      <div class=\"device-raw-data-header\"\n           onclick=\"window.toggleDeviceRawData('${deviceId}')\"\n           style=\"padding: 16px; background: var(--gray-50); cursor: pointer; display: flex; align-items: center; justify-content: space-between; border-bottom: 1px solid var(--gray-200);\">\n        <div style=\"display: flex; align-items: center; gap: 12px;\">\n          <div class=\"collapse-icon\" id=\"${deviceId}-icon\" style=\"transition: transform 0.2s ease;\">▶</div>\n          <h4 style=\"margin: 0; color: var(--gray-900); font-size: 16px; font-weight: 600;\">\n            ${device.address}\n          </h4>\n          <div class=\"badge badge-secondary\" style=\"font-size: 11px;\">${device.device_type}</div>\n        </div>\n        <div style=\"display: flex; align-items: center; gap: 8px;\">\n          <div style=\"display: inline-flex; align-items: center; gap: 6px; padding: 4px 10px; background: ${device.connected ? 'var(--success-light)' : 'var(--gray-100)'}; border-radius: 12px; font-size: 12px; font-weight: 500; color: ${device.connected ? 'var(--success)' : 'var(--gray-600)'};\">\n            <span style=\"display: inline-block; width: 6px; height: 6px; border-radius: 50%; background: ${device.connected ? 'var(--success)' : 'var(--gray-400)'};\"></span>\n            ${device.connected ? 'Connected' : 'Disconnected'}\n          </div>\n          <div style=\"font-size: 12px; color: var(--gray-500);\">${lastUpdate}</div>\n        </div>\n      </div>\n\n      <!-- Collapsible Content -->\n      <div class=\"device-raw-data-content\" id=\"${deviceId}-content\" style=\"display: none; padding: 16px; background: var(--bg-primary);\">\n        <div style=\"margin-bottom: 16px;\">\n          <div style=\"font-size: 12px; color: var(--gray-500); margin-bottom: 4px; font-weight: 600;\">Status Info</div>\n          <div style=\"color: var(--gray-500); font-style: italic; padding: 12px; background: var(--gray-50); border-radius: 6px; border: 1px solid var(--gray-200);\">Ultra-minimal DeviceStatus: only connection state. Parsed data available in device JSON files.</div>\n        </div>\n\n        <div style=\"margin-bottom: 16px;\">\n          <div style=\"font-size: 12px; color: var(--gray-500); margin-bottom: 8px; font-weight: 600;\">Raw Status</div>\n          <pre style=\"background: var(--gray-50); padding: 12px; border-radius: 6px; font-size: 12px; overflow-x: auto; margin: 0; border: 1px solid var(--gray-200);\">${JSON.stringify(device, null, 2)}</pre>\n        </div>\n      </div>\n    </div>\n  `;\n}\n","/**\n * Main dashboard rendering functions\n */\n\nimport { deviceStore } from \"../../stores/deviceStore\";\nimport { renderOverviewTab } from \"./tabs/overview-tab\";\nimport { renderDevTab } from \"./tabs/dev-tab\";\n\n/**\n * Main render function for the production dashboard\n */\nexport function renderProductionDashboard(): string {\n  return `\n    <div class=\"production-dashboard\">\n      ${renderHeader()}\n      ${renderNavigation()}\n      <main class=\"prod-main\">\n        ${renderContent()}\n      </main>\n      ${renderFooter()}\n    </div>\n  `;\n}\n\n/**\n * Render the dashboard header\n */\nfunction renderHeader(): string {\n  const zustandState = deviceStore.getState();\n  const isRefreshing = Array.from(zustandState.devices.values()).some(d => d.isLoading);\n  return `\n    <header class=\"prod-header\">\n      <div class=\"header-content\">\n        <div class=\"header-left\">\n          <div class=\"header-title\">\n            <h1>AquaBle</h1>\n          </div>\n        </div>\n        <div class=\"header-actions\">\n          <div class=\"theme-toggle-container\">\n            <svg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" viewBox=\"0 0 24 24\" class=\"toggle-icon sun-icon\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" d=\"M0 0h24v24H0z\"></path><path d=\"M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zM2 13h2c.55 0 1-.45 1-1s-.45-1-1-1H2c-.55 0-1 .45-1 1s.45 1 1 1zm18 0h2c.55 0 1-.45 1-1s-.45-1-1-1h-2c-.55 0-1 .45-1 1s.45 1 1 1zM11 2v2c0 .55.45 1 1 1s1-.45 1-1V2c0-.55-.45-1-1-1s-1 .45-1 1zm0 18v2c0 .55.45 1 1 1s1-.45 1-1v-2c0-.55-.45-1-1-1s-1 .45-1 1zM5.99 4.58a.996.996 0 0 0-1.41 0 .996.996 0 0 0 0 1.41l1.06 1.06c.39.39 1.03.39 1.41 0s.39-1.03 0-1.41L5.99 4.58zm12.37 12.37a.996.996 0 0 0-1.41 0 .996.996 0 0 0 0 1.41l1.06 1.06c.39.39 1.03.39 1.41 0a.996.996 0 0 0 0-1.41l-1.06-1.06zm1.06-10.96a.996.996 0 0 0 0-1.41.996.996 0 0 0-1.41 0l-1.06 1.06c-.39.39-.39 1.03 0 1.41s1.03.39 1.41 0l1.06-1.06zM7.05 18.36a.996.996 0 0 0 0-1.41.996.996 0 0 0-1.41 0l-1.06 1.06c-.39.39-.39 1.03 0 1.41s1.03.39 1.41 0l1.06-1.06z\"></path></svg>\n            <div\n              class=\"theme-toggle\"\n              onclick=\"window.toggleTheme()\"\n              title=\"Toggle Dark Mode\"\n              role=\"button\"\n              tabindex=\"0\"\n              aria-label=\"Toggle dark mode\"\n            >\n              <div id=\"theme-toggle-knob\" class=\"theme-knob ${(() => {\n                try {\n                  return localStorage.getItem('theme') === 'dark' ? 'on' : '';\n                } catch (e) {\n                  return '';\n                }\n              })()}\" ></div>\n            </div>\n            <svg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" viewBox=\"0 0 24 24\" class=\"toggle-icon moon-icon\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" d=\"M0 0h24v24H0z\"></path><path d=\"M12 3a9 9 0 1 0 9 9c0-.46-.04-.92-.1-1.36a5.389 5.389 0 0 1-4.4 2.26 5.403 5.403 0 0 1-3.14-9.8c-.44-.06-.9-.1-1.36-.1z\"></path></svg>\n          </div>\n        </div>\n      </div>\n    </header>\n  `;\n}\n\n/**\n * Render the navigation tabs\n */\nfunction renderNavigation(): string {\n  const zustandState = deviceStore.getState();\n\n  return `\n    <nav class=\"prod-nav\">\n      <div class=\"nav-content\">\n        <button\n          class=\"nav-tab ${zustandState.ui.currentView === \"overview\" ? \"active\" : \"\"}\"\n          onclick=\"window.switchTab('overview')\"\n        >\n          Overview\n        </button>\n      </div>\n    </nav>\n  `;\n}\n\n/**\n * Render the main content area\n */\nfunction renderContent(): string {\n  const zustandState = deviceStore.getState();\n\n  if (zustandState.ui.globalError) {\n    return `\n      <div class=\"error-state\">\n        <div class=\"error-icon\">❌</div>\n        <h2>Error Loading Dashboard</h2>\n        <p>${zustandState.ui.globalError}</p>\n        <button class=\"btn btn-primary\" onclick=\"window.handleRefreshAll()\">\n          Try Again\n        </button>\n      </div>\n    `;\n  }\n\n  return `\n    <div class=\"tab-panel ${zustandState.ui.currentView === \"overview\" ? \"active\" : \"\"}\" id=\"overview-panel\">\n      ${renderOverviewTab()}\n    </div>\n    <div class=\"tab-panel ${zustandState.ui.currentView === \"dev\" ? \"active\" : \"\"}\" id=\"dev-panel\">\n      ${renderDevTab()}\n    </div>\n  `;\n}\n\n/**\n * Render the dashboard footer\n */\nfunction renderFooter(): string {\n  return `\n    <footer class=\"prod-footer\">\n      <div class=\"footer-content\">\n        <a href=\"/tests/test-hub.html\" target=\"_blank\" class=\"footer-link\">\n          Test\n        </a>\n      </div>\n    </footer>\n  `;\n}\n\n/**\n * Refresh the dashboard UI\n */\nexport function refreshDashboard(): void {\n  const dashboardElement = document.querySelector('.production-dashboard');\n  if (dashboardElement) {\n    dashboardElement.outerHTML = renderProductionDashboard();\n  }\n}\n","// HTTP client utilities for API communication\n\nexport async function fetchJson<T>(url: string): Promise<T> {\n  const res = await fetch(url, { headers: { Accept: \"application/json\" } });\n  if (!res.ok) {\n    const text = await res.text().catch(() => \"\");\n    throw new Error(`Request failed (${res.status}): ${text || res.statusText}`);\n  }\n  return (await res.json()) as T;\n}\n\nexport async function postJson<T>(url: string, body?: unknown): Promise<T> {\n  const res = await fetch(url, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\", Accept: \"application/json\" },\n    body: body === undefined ? undefined : JSON.stringify(body),\n  });\n  if (!res.ok) {\n    const text = await res.text().catch(() => \"\");\n    throw new Error(`Request failed (${res.status}): ${text || res.statusText}`);\n  }\n  return (await res.json()) as T;\n}\n\nexport async function putJson<T>(url: string, body?: unknown): Promise<T> {\n  const res = await fetch(url, {\n    method: \"PUT\",\n    headers: { \"Content-Type\": \"application/json\", Accept: \"application/json\" },\n    body: body === undefined ? undefined : JSON.stringify(body),\n  });\n  if (!res.ok) {\n    const text = await res.text().catch(() => \"\");\n    throw new Error(`Request failed (${res.status}): ${text || res.statusText}`);\n  }\n  return (await res.json()) as T;\n}\n\nexport async function patchJson<T>(url: string, body?: unknown): Promise<T> {\n  const res = await fetch(url, {\n    method: \"PATCH\",\n    headers: { \"Content-Type\": \"application/json\", Accept: \"application/json\" },\n    body: body === undefined ? undefined : JSON.stringify(body),\n  });\n  if (!res.ok) {\n    const text = await res.text().catch(() => \"\");\n    throw new Error(`Request failed (${res.status}): ${text || res.statusText}`);\n  }\n  return (await res.json()) as T;\n}\n\nexport async function deleteJson<T>(url: string): Promise<T> {\n  const res = await fetch(url, {\n    method: \"DELETE\",\n    headers: { Accept: \"application/json\" },\n  });\n  if (!res.ok) {\n    const text = await res.text().catch(() => \"\");\n    throw new Error(`Request failed (${res.status}): ${text || res.statusText}`);\n  }\n  return (await res.json()) as T;\n}\n","// Device management API functions\n\nimport { fetchJson, postJson } from \"./http\";\nimport type {\n  DeviceStatus,\n  StatusResponse,\n  ScanDevice\n} from \"../types/api\";\n\n/**\n * Get cached status for all devices\n */\nexport async function getDeviceStatus(): Promise<StatusResponse> {\n  return fetchJson<StatusResponse>(\"api/status\");\n}\n\n/**\n * Connect to a specific device and return its updated status\n */\nexport async function connectDevice(address: string): Promise<DeviceStatus> {\n  return postJson<DeviceStatus>(`api/devices/${encodeURIComponent(address)}/connect`, {});\n}\n\n/**\n * Disconnect from a specific device\n */\nexport async function disconnectDevice(address: string): Promise<void> {\n  await postJson(`api/devices/${encodeURIComponent(address)}/disconnect`, {});\n}\n\n/**\n * Refresh status for a specific device\n */\nexport async function refreshDeviceStatus(address: string): Promise<void> {\n  await postJson(`api/devices/${encodeURIComponent(address)}/status`, {});\n}\n\n/**\n * Scan for nearby supported devices\n */\nexport async function scanDevices(timeout: number = 5.0): Promise<ScanDevice[]> {\n  return fetchJson<ScanDevice[]>(`api/scan?timeout=${timeout}`);\n}\n","/**\n * Dashboard data service - handles all API calls and data loading\n */\n\nimport { getDeviceStatus } from \"../../../api/devices\";\nimport type { StatusResponse } from \"../../../types/api\";\nimport { deviceStore } from \"../../../stores/deviceStore\";\nimport {\n  cacheService,\n  CACHE_KEYS,\n  CACHE_TTL,\n  invalidateMetadataCache,\n} from \"./cache-service\";\n\n/**\n * Load all dashboard data from APIs\n */\nexport async function loadAllDashboardData(): Promise<void> {\n  const actions = deviceStore.getState().actions;\n  actions.setGlobalError(null);\n\n  try {\n    // Initialize the Zustand store with two-stage loading\n    console.log(\"🔄 Initializing Zustand store...\");\n    await actions.initializeStore();\n    console.log(\"✅ Zustand store initialized\");\n\n    // Fetch device status\n    console.log(\"🌐 Fetching device status from API\");\n    try {\n      const newStatus = await getDeviceStatus();\n      \n      // Update device status in Zustand store\n      const configPromises: Promise<any>[] = [];\n      \n      for (const [address, status] of Object.entries(newStatus)) {\n        actions.updateDevice(address, status);\n        \n        // Fetch configuration for each device\n        console.log(`📥 Fetching configuration for ${address}...`);\n        const configPromise = actions.refreshDeviceConfig(address, status.device_type as 'doser' | 'light')\n          .catch(err => console.error(`Failed to load config for ${address}:`, err));\n        configPromises.push(configPromise);\n      }\n      \n      // Wait for all configurations to load\n      await Promise.allSettled(configPromises);\n      \n      console.log(\"✅ Device status loaded:\", Object.keys(newStatus).length, \"devices\");\n    } catch (statusErr) {\n      console.error(\"❌ Failed to load device status:\", statusErr);\n      actions.setGlobalError(\"Failed to load device status\");\n    }\n  } catch (err) {\n    const errorMessage = err instanceof Error ? err.message : String(err);\n    console.error(\"❌ Failed to load dashboard data:\", errorMessage);\n    actions.setGlobalError(`Failed to load dashboard data: ${errorMessage}`);\n  }\n}\n\n/**\n * Refresh only device status after connection/disconnection\n */\nexport async function refreshDeviceStatusOnly(): Promise<void> {\n  try {\n    // Refresh Zustand store\n    const actions = deviceStore.getState().actions;\n    await actions.refreshDevices();\n  } catch (error) {\n    console.error(\"❌ Failed to refresh device status:\", error);\n  }\n}\n\n// ============================================================================\n// Debounce and caching utilities for configuration fetches\n// ============================================================================\n\nlet configFetchTimeout: number | null = null;\nlet lastConfigFetchTime = 0;\nconst CONFIG_FETCH_DEBOUNCE_MS = 2000; // Wait 2 seconds before refetching configs\n\n/**\n * Debounced configuration fetch (prevents rapid repeated fetches)\n * Useful after commands complete to avoid multiple config refreshes\n */\nexport async function debouncedRefreshConfigurations(): Promise<void> {\n  const now = Date.now();\n  const timeSinceLastFetch = now - lastConfigFetchTime;\n\n  // If we just fetched recently, debounce the request\n  if (timeSinceLastFetch < CONFIG_FETCH_DEBOUNCE_MS) {\n    console.log(`⏱️  Config fetch debounced (last fetch: ${timeSinceLastFetch}ms ago)`);\n\n    // Clear any pending timeout\n    if (configFetchTimeout !== null) {\n      clearTimeout(configFetchTimeout);\n    }\n\n    // Schedule a deferred fetch\n    const remainingWait = CONFIG_FETCH_DEBOUNCE_MS - timeSinceLastFetch;\n    configFetchTimeout = window.setTimeout(() => {\n      console.log(\"🔄 Running deferred configuration fetch\");\n      debouncedRefreshConfigurations().catch(err =>\n        console.error(\"Failed to refresh configs:\", err)\n      );\n    }, remainingWait);\n    return;\n  }\n\n  // Enough time has passed, fetch now\n  console.log(\"🔄 Fetching configurations (not debounced)\");\n  lastConfigFetchTime = now;\n\n  try {\n    const { useActions } = await import(\"../../../stores/deviceStore\");\n    await useActions().loadConfigurations();\n  } catch (error) {\n    console.error(\"Failed to load configurations:\", error);\n  }\n}\n","/**\n * Wattage calculator component\n */\n\nimport { calculateLightWattage, formatWattage, getMaxWattage, getTheoreticalMaxWattage, type ChannelPercentages, type WattageCalculationResult } from \"../../../utils/wattage-calculator\";\n\n/**\n * Render LED wattage calculator for testing light configurations\n */\nexport function renderWattageCalculator(): string {\n  return `\n    <div style=\"display: flex; flex-direction: column; gap: 20px;\">\n      <!-- Calculator Input -->\n      <div>\n        <h3 style=\"margin: 0 0 16px 0; color: var(--gray-900);\">Channel Intensity</h3>\n        <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 16px; margin-bottom: 16px;\">\n          <div>\n            <label style=\"display: block; margin-bottom: 4px; font-weight: 600; color: var(--gray-700);\">Red (%)</label>\n            <input type=\"number\"\n                   id=\"watt-red\"\n                   min=\"0\" max=\"139\"\n                   value=\"75\"\n                   step=\"1\"\n                   onchange=\"window.calculateWattageFromInputs()\"\n                   style=\"width: 100%; padding: 8px; border: 1px solid var(--gray-300); border-radius: 6px;\">\n          </div>\n          <div>\n            <label style=\"display: block; margin-bottom: 4px; font-weight: 600; color: var(--gray-700);\">Green (%)</label>\n            <input type=\"number\"\n                   id=\"watt-green\"\n                   min=\"0\" max=\"139\"\n                   value=\"75\"\n                   step=\"1\"\n                   onchange=\"window.calculateWattageFromInputs()\"\n                   style=\"width: 100%; padding: 8px; border: 1px solid var(--gray-300); border-radius: 6px;\">\n          </div>\n          <div>\n            <label style=\"display: block; margin-bottom: 4px; font-weight: 600; color: var(--gray-700);\">Blue (%)</label>\n            <input type=\"number\"\n                   id=\"watt-blue\"\n                   min=\"0\" max=\"137\"\n                   value=\"75\"\n                   step=\"1\"\n                   onchange=\"window.calculateWattageFromInputs()\"\n                   style=\"width: 100%; padding: 8px; border: 1px solid var(--gray-300); border-radius: 6px;\">\n          </div>\n          <div>\n            <label style=\"display: block; margin-bottom: 4px; font-weight: 600; color: var(--gray-700);\">White (%)</label>\n            <input type=\"number\"\n                   id=\"watt-white\"\n                   min=\"0\" max=\"140\"\n                   value=\"75\"\n                   step=\"1\"\n                   onchange=\"window.calculateWattageFromInputs()\"\n                   style=\"width: 100%; padding: 8px; border: 1px solid var(--gray-300); border-radius: 6px;\">\n          </div>\n        </div>\n      </div>\n\n      <!-- Results -->\n      <div id=\"wattage-results\" style=\"\n        background: var(--gray-50);\n        border: 1px solid var(--gray-200);\n        border-radius: 8px;\n        padding: 20px;\n      \">\n        <!-- Results will be populated by calculateWattageFromInputs() -->\n      </div>\n\n      <!-- Test Cases -->\n      <div>\n        <h3 style=\"margin: 0 0 16px 0; color: var(--gray-900);\">Test Cases</h3>\n        <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 12px;\">\n          <button onclick=\"window.setWattageTestCase(0, 0, 0, 0)\"\n                  style=\"padding: 12px; border: 1px solid var(--gray-300); border-radius: 6px; background: white; cursor: pointer;\">\n            <strong>Off</strong><br>\n            R:0% G:0% B:0% W:0%\n          </button>\n          <button onclick=\"window.setWattageTestCase(50, 50, 50, 50)\"\n                  style=\"padding: 12px; border: 1px solid var(--gray-300); border-radius: 6px; background: white; cursor: pointer;\">\n            <strong>50% All</strong><br>\n            R:50% G:50% B:50% W:50%\n          </button>\n          <button onclick=\"window.setWattageTestCase(100, 100, 100, 100)\"\n                  style=\"padding: 12px; border: 1px solid var(--gray-300); border-radius: 6px; background: white; cursor: pointer;\">\n            <strong>100% All</strong><br>\n            R:100% G:100% B:100% W:100%\n          </button>\n          <button onclick=\"window.setWattageTestCase(139, 139, 137, 140)\"\n                  style=\"padding: 12px; border: 1px solid var(--gray-300); border-radius: 6px; background: white; cursor: pointer;\">\n            <strong>Maximum</strong><br>\n            R:139% G:139% B:137% W:140%\n          </button>\n          <button onclick=\"window.setWattageTestCase(100, 0, 0, 0)\"\n                  style=\"padding: 12px; border: 1px solid var(--gray-300); border-radius: 6px; background: white; cursor: pointer;\">\n            <strong>Red Only</strong><br>\n            R:100% G:0% B:0% W:0%\n          </button>\n          <button onclick=\"window.setWattageTestCase(0, 100, 0, 0)\"\n                  style=\"padding: 12px; border: 1px solid var(--gray-300); border-radius: 6px; background: white; cursor: pointer;\">\n            <strong>Green Only</strong><br>\n            R:0% G:100% B:0% W:0%\n          </button>\n          <button onclick=\"window.setWattageTestCase(0, 0, 100, 0)\"\n                  style=\"padding: 12px; border: 1px solid var(--gray-300); border-radius: 6px; background: white; cursor: pointer;\">\n            <strong>Blue Only</strong><br>\n            R:0% G:0% B:100% W:0%\n          </button>\n          <button onclick=\"window.setWattageTestCase(0, 0, 0, 100)\"\n                  style=\"padding: 12px; border: 1px solid var(--gray-300); border-radius: 6px; background: white; cursor: pointer;\">\n            <strong>White Only</strong><br>\n            R:0% G:0% B:0% W:100%\n          </button>\n        </div>\n      </div>\n\n      <!-- Device Specifications -->\n      <div style=\"\n        background: var(--blue-50);\n        border: 1px solid var(--blue-200);\n        border-radius: 8px;\n        padding: 16px;\n      \">\n        <h4 style=\"margin: 0 0 8px 0; color: var(--blue-900);\">Device Specifications</h4>\n        <p style=\"margin: 4px 0; color: var(--blue-800);\"><strong>Actual Maximum Wattage:</strong> ${formatWattage(getMaxWattage())} (power supply limited)</p>\n        <p style=\"margin: 4px 0; color: var(--blue-800);\"><strong>Theoretical Maximum:</strong> ${formatWattage(getTheoreticalMaxWattage())} (if no power limiting)</p>\n        <p style=\"margin: 4px 0; color: var(--blue-800);\"><strong>Model:</strong> WRGB Pro II</p>\n        <p style=\"margin: 4px 0 0 0; color: var(--blue-800);\"><strong>Power Limiting:</strong> Channels scaled down proportionally when total exceeds 138W</p>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Calculate and display wattage results from input fields\n */\nexport function calculateWattageFromInputs(): void {\n  const redInput = document.getElementById('watt-red') as HTMLInputElement;\n  const greenInput = document.getElementById('watt-green') as HTMLInputElement;\n  const blueInput = document.getElementById('watt-blue') as HTMLInputElement;\n  const whiteInput = document.getElementById('watt-white') as HTMLInputElement;\n  const resultsDiv = document.getElementById('wattage-results');\n\n  if (!redInput || !greenInput || !blueInput || !whiteInput || !resultsDiv) {\n    return;\n  }\n\n  const red = parseInt(redInput.value) || 0;\n  const green = parseInt(greenInput.value) || 0;\n  const blue = parseInt(blueInput.value) || 0;\n  const white = parseInt(whiteInput.value) || 0;\n\n  const result = calculateLightWattage({ red, green, blue, white });\n  displayWattageResults(result);\n}\n\n/**\n * Set test case values and calculate wattage\n */\nexport function setWattageTestCase(red: number, green: number, blue: number, white: number): void {\n  const redInput = document.getElementById('watt-red') as HTMLInputElement;\n  const greenInput = document.getElementById('watt-green') as HTMLInputElement;\n  const blueInput = document.getElementById('watt-blue') as HTMLInputElement;\n  const whiteInput = document.getElementById('watt-white') as HTMLInputElement;\n\n  if (redInput) redInput.value = red.toString();\n  if (greenInput) greenInput.value = green.toString();\n  if (blueInput) blueInput.value = blue.toString();\n  if (whiteInput) whiteInput.value = white.toString();\n\n  const result = calculateLightWattage({ red, green, blue, white });\n  displayWattageResults(result);\n}\n\n/**\n * Display wattage calculation results\n */\nfunction displayWattageResults(result: WattageCalculationResult): void {\n  const resultsDiv = document.getElementById('wattage-results');\n  if (!resultsDiv) return;\n\n  resultsDiv.innerHTML = `\n    <!-- Total Wattage -->\n    <div style=\"text-align: center; margin-bottom: 20px;\">\n      <div style=\"font-size: 36px; font-weight: bold; color: var(--primary); margin-bottom: 8px;\">${formatWattage(result.totalWattage)}</div>\n      <div style=\"color: var(--gray-600);\">Total Power Consumption</div>\n      ${result.powerLimited ? '<div style=\"color: var(--warning); font-size: 14px; margin-top: 4px;\">⚠️ Power limited from ${formatWattage(result.requestedWattage)}</div>' : ''}\n    </div>\n\n    <!-- Channel Breakdown -->\n    <div style=\"margin-bottom: 20px;\">\n      <h4 style=\"margin: 0 0 12px 0; color: var(--gray-900);\">Channel Power Distribution</h4>\n      <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 12px;\">\n        <div style=\"text-align: center; padding: 12px; background: white; border: 1px solid var(--gray-200); border-radius: 6px;\">\n          <div style=\"color: #ef4444; font-weight: bold; margin-bottom: 4px;\">Red</div>\n          <div>${formatWattage(result.channelWattages.red)}</div>\n        </div>\n        <div style=\"text-align: center; padding: 12px; background: white; border: 1px solid var(--gray-200); border-radius: 6px;\">\n          <div style=\"color: #22c55e; font-weight: bold; margin-bottom: 4px;\">Green</div>\n          <div>${formatWattage(result.channelWattages.green)}</div>\n        </div>\n        <div style=\"text-align: center; padding: 12px; background: white; border: 1px solid var(--gray-200); border-radius: 6px;\">\n          <div style=\"color: #3b82f6; font-weight: bold; margin-bottom: 4px;\">Blue</div>\n          <div>${formatWattage(result.channelWattages.blue)}</div>\n        </div>\n        <div style=\"text-align: center; padding: 12px; background: white; border: 1px solid var(--gray-200); border-radius: 6px;\">\n          <div style=\"color: #64748b; font-weight: bold; margin-bottom: 4px;\">White</div>\n          <div>${formatWattage(result.channelWattages.white)}</div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Technical Details -->\n    <div>\n      <h4 style=\"margin: 0 0 12px 0; color: var(--gray-900);\">Technical Details</h4>\n      <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 12px;\">\n        <div style=\"text-align: center; padding: 12px; background: white; border: 1px solid var(--gray-200); border-radius: 6px;\">\n          <div style=\"font-size: 12px; color: var(--gray-500); margin-bottom: 4px;\">Step Sum</div>\n          <div style=\"font-weight: bold; color: var(--gray-900);\">${result.stepSum}W</div>\n        </div>\n        <div style=\"text-align: center; padding: 12px; background: white; border: 1px solid var(--gray-200); border-radius: 6px;\">\n          <div style=\"font-size: 12px; color: var(--gray-500); margin-bottom: 4px;\">Embedded Base</div>\n          <div style=\"font-weight: bold; color: var(--gray-900);\">${result.embeddedBaseSum}W</div>\n        </div>\n        <div style=\"text-align: center; padding: 12px; background: white; border: 1px solid var(--gray-200); border-radius: 6px;\">\n          <div style=\"font-size: 12px; color: var(--gray-500); margin-bottom: 4px;\">Shared Base</div>\n          <div style=\"font-weight: bold; color: var(--gray-900);\">${result.sharedBase}W</div>\n        </div>\n      </div>\n    </div>\n  `;\n}\n","// API client for device configuration management (unified endpoints only)\n\nimport { fetchJson, putJson, patchJson } from \"./http\";\n\n// ============================================================================\n// Type Definitions\n// ============================================================================\n\n// Doser Types\nexport interface DoserHead {\n  index: number;\n  active: boolean;\n  schedule: any;\n  recurrence: any;\n  missedDoseCompensation: boolean;\n  calibration: any;\n}\n\nexport interface DoserParsedHead {\n  mode: number;\n  mode_label: string;\n  hour: number;\n  minute: number;\n  dosed_tenths_ml: number;\n  extra: string; // hex string\n}\n\nexport interface DoserParsedStatus {\n  response_mode: string; // First 3 bytes of payload as hex (e.g., \"5B0630\")\n  message_id: [number, number] | null;\n  weekday: number | null;\n  hour: number | null;\n  minute: number | null;\n  heads: DoserParsedHead[];\n  tail_targets: number[];\n  tail_raw: string; // hex string\n  tail_flag: number | null;\n  lifetime_totals_tenths_ml?: number[];\n}\n\nexport interface DoserLastStatus {\n  model_name?: string;\n  raw_payload?: string;\n  parsed?: DoserParsedStatus;\n  updated_at?: number;\n}\n\nexport interface DoserDevice {\n  id: string;\n  name?: string;\n  headNames?: Record<number, string>;\n  configurations: any[];\n  activeConfigurationId?: string;\n  autoReconnect?: boolean;\n  createdAt?: string;\n  updatedAt?: string;\n  last_status?: DoserLastStatus; // Optional live device status\n}\n\n// Light Types\nexport interface LightChannel {\n  index?: number;        // Channel index (0, 1, 2, 3) - from status endpoint\n  key: string;           // Channel index as string (\"0\", \"1\", \"2\", \"3\")\n  label: string;         // Human-readable name (\"Red\", \"Green\", \"Blue\", \"White\")\n  min?: number;          // Minimum value (default: 0)\n  max?: number;          // Maximum value (default: 100)\n  step?: number;         // Step increment (default: 1)\n}\n\nexport interface AutoSetting {\n  time: string;\n  brightness: number;\n}\n\nexport interface LightProfile {\n  mode: \"manual\" | \"custom\" | \"auto\";\n  levels?: Record<string, number>;\n  points?: any[];\n  programs?: any[];\n}\n\nexport interface LightParsedStatus {\n  response_mode: string; // First 3 bytes of payload as hex (e.g., \"5B0630\")\n  message_id: [number, number] | null;\n  weekday: number | null;\n  hour: number | null;\n  minute: number | null;\n  keyframes: Array<{\n    hour: number;\n    minute: number;\n    value: number;\n    percent: number; // computed percentage (0-100)\n  }>;\n  time_markers: Array<[number, number]>;\n  tail: string; // hex string\n}\n\nexport interface LightLastStatus {\n  model_name?: string;\n  raw_payload?: string;\n  parsed?: LightParsedStatus;\n  updated_at?: number;\n}\n\nexport interface LightDevice {\n  id: string;\n  name?: string;\n  channels: LightChannel[];\n  configurations: any[];\n  activeConfigurationId?: string;\n  autoReconnect?: boolean;\n  createdAt?: string;\n  updatedAt?: string;\n  last_status?: LightLastStatus; // Optional live device status\n}\n\n// ============================================================================\n// Unified Configuration API\n// ============================================================================\n\nexport interface DeviceNamingUpdate {\n  name?: string;\n  headNames?: Record<number, string>;\n}\n\nexport interface DeviceSettingsUpdate {\n  configurations?: any[];\n  activeConfigurationId?: string;\n  autoReconnect?: boolean;\n}\n\nexport async function getDeviceConfiguration(address: string): Promise<DoserDevice | LightDevice> {\n  return fetchJson<DoserDevice | LightDevice>(\n    `api/devices/${encodeURIComponent(address)}/configurations`\n  );\n}\n\nexport async function updateDeviceConfiguration(\n  address: string,\n  config: DoserDevice | LightDevice\n): Promise<DoserDevice | LightDevice> {\n  return putJson<DoserDevice | LightDevice>(\n    `api/devices/${encodeURIComponent(address)}/configurations`,\n    config\n  );\n}\n\nexport async function updateDeviceNaming(\n  address: string,\n  naming: DeviceNamingUpdate\n): Promise<DoserDevice | LightDevice> {\n  return patchJson<DoserDevice | LightDevice>(\n    `api/devices/${encodeURIComponent(address)}/configurations/naming`,\n    naming\n  );\n}\n\nexport async function updateDeviceSettings(\n  address: string,\n  settings: DeviceSettingsUpdate\n): Promise<DoserDevice | LightDevice> {\n  return patchJson<DoserDevice | LightDevice>(\n    `api/devices/${encodeURIComponent(address)}/configurations/settings`,\n    settings\n  );\n}\n\n// ============================================================================\n// Import/Export Functions\n// ============================================================================\n\nexport async function exportDeviceConfiguration(\n  address: string\n): Promise<DoserDevice | LightDevice> {\n  return fetchJson<DoserDevice | LightDevice>(\n    `api/devices/${encodeURIComponent(address)}/configurations/export`\n  );\n}\n\nexport async function importDeviceConfiguration(\n  address: string,\n  file: File\n): Promise<DoserDevice | LightDevice> {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n\n  const response = await fetch(\n    `api/devices/${encodeURIComponent(address)}/configurations/import`,\n    {\n      method: \"POST\",\n      body: formData,\n    }\n  );\n\n  if (!response.ok) {\n    const error = await response.json().catch(() => ({ detail: response.statusText }));\n    throw new Error(error.detail || \"Import failed\");\n  }\n\n  return response.json();\n}\n\n// ============================================================================\n// Helper Functions\n// ============================================================================\n\nexport function formatMacAddress(address: string): string {\n  return address.toUpperCase();\n}\n\nexport function getShortDeviceName(address: string): string {\n  return address.slice(-5).replace(\":\", \"\").toUpperCase();\n}\n\nexport function isValidTimeFormat(time: string): boolean {\n  const timeRegex = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;\n  return timeRegex.test(time);\n}\n\nexport function sortAutoSettings(settings: AutoSetting[]): AutoSetting[] {\n  return [...settings].sort((a, b) => {\n    const [aHour, aMin] = a.time.split(\":\").map(Number);\n    const [bHour, bMin] = b.time.split(\":\").map(Number);\n    return aHour * 60 + aMin - (bHour * 60 + bMin);\n  });\n}\n\nexport function validateDoserConfig(config: DoserDevice): string[] {\n  const errors: string[] = [];\n  if (!config.id) {\n    errors.push(\"Device ID is required\");\n  }\n  if (!config.configurations || config.configurations.length === 0) {\n    errors.push(\"At least one configuration must be present\");\n  }\n  return errors;\n}\n\nexport function validateLightProfile(config: LightDevice): string[] {\n  const errors: string[] = [];\n  if (!config.id) {\n    errors.push(\"Device ID is required\");\n  }\n  if (!config.channels || config.channels.length === 0) {\n    errors.push(\"At least one channel must be defined\");\n  }\n  if (!config.configurations || config.configurations.length === 0) {\n    errors.push(\"At least one configuration must be present\");\n  }\n  return errors;\n}\n","/**\n * Import/Export Modal - Allows users to backup and restore device configurations\n */\n\nimport { deviceStore } from \"../../../stores/deviceStore\";\nimport { exportDeviceConfiguration, importDeviceConfiguration } from \"../../../api/configurations\";\n\ntype ExportData = {\n  address: string;\n  deviceType: 'doser' | 'light';\n  config: any;\n  exportedAt: string;\n};\n\n/**\n * Show the import/export modal for a device\n */\nexport async function showImportExportModal(address: string, deviceType: 'doser' | 'light'): Promise<void> {\n  const modal = document.createElement('div');\n  modal.className = 'modal-overlay';\n\n  // Get current device status\n  const state = deviceStore.getState();\n  const deviceStatus = state.devices.get(address)?.status;\n  if (!deviceStatus) {\n    console.error('Device not found:', address);\n    return;\n  }\n\n  const displayName = state.devices.get(address)?.configuration?.name || address;\n\n  modal.innerHTML = `\n    <div class=\"modal-content import-export-modal\" style=\"max-width: 500px; max-height: 90vh; overflow-y: auto;\" data-device-id=\"${address}\" data-device-type=\"${deviceType}\">\n      <div class=\"modal-header\">\n        <h2>Import/Export Configuration</h2>\n        <button class=\"modal-close\" onclick=\"this.closest('.modal-overlay').remove();\">×</button>\n      </div>\n\n      <div class=\"modal-body\">\n        <div class=\"settings-section\">\n          <h3>Export Configuration</h3>\n          <p style=\"color: #666; font-size: 0.9em; margin-bottom: 12px;\">\n            Download the current configuration as a JSON file. You can edit this file and import it back later.\n          </p>\n          <button class=\"btn btn-primary\" onclick=\"window.handleExportConfig('${address}', '${deviceType}')\">\n            Download Configuration\n          </button>\n        </div>\n\n        <hr style=\"margin: 24px 0; border: none; border-top: 1px solid #ddd;\">\n\n        <div class=\"settings-section\">\n          <h3>Import Configuration</h3>\n          <p style=\"color: #666; font-size: 0.9em; margin-bottom: 12px;\">\n            Select a JSON file previously exported from this device. The current configuration will be replaced.\n          </p>\n          <div class=\"file-input-wrapper\">\n            <input\n              type=\"file\"\n              id=\"config-file-input\"\n              accept=\".json\"\n              style=\"display: none;\"\n              onchange=\"window.handleImportFile('${address}', '${deviceType}')\"\n            />\n            <button class=\"btn btn-secondary\" onclick=\"document.getElementById('config-file-input').click()\">\n              Choose File\n            </button>\n            <span id=\"file-name\" style=\"margin-left: 12px; color: #666;\"></span>\n          </div>\n          <div id=\"import-status\" style=\"margin-top: 12px; display: none;\">\n            <div id=\"import-message\" style=\"padding: 8px; border-radius: 4px;\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `;\n\n  document.body.appendChild(modal);\n\n  // Close on background click\n  modal.addEventListener('click', (e) => {\n    if (e.target === modal) {\n      modal.remove();\n    }\n  });\n}\n\n/**\n * Handle exporting device configuration\n */\nasync function handleExportConfig(address: string, deviceType: 'doser' | 'light'): Promise<void> {\n  try {\n    // Show loading state\n    const button = event?.currentTarget as HTMLButtonElement;\n    const originalText = button?.textContent;\n    if (button) button.textContent = 'Exporting...';\n    if (button) button.disabled = true;\n\n    // Get current configuration\n    const config = await exportDeviceConfiguration(address);\n\n    // Create export data object with metadata\n    const exportData: ExportData = {\n      address,\n      deviceType,\n      config,\n      exportedAt: new Date().toISOString(),\n    };\n\n    // Create JSON blob and download\n    const json = JSON.stringify(exportData, null, 2);\n    const blob = new Blob([json], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `${address.replace(/:/g, '-')}-config.json`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n\n    if (button) {\n      button.textContent = originalText;\n      button.disabled = false;\n    }\n\n    console.log('Configuration exported successfully');\n  } catch (error) {\n    console.error('Export failed:', error);\n    const button = event?.currentTarget as HTMLButtonElement;\n    if (button) {\n      button.textContent = 'Export failed';\n      button.disabled = false;\n      setTimeout(() => {\n        button.textContent = 'Download Configuration';\n      }, 3000);\n    }\n  }\n}\n\n/**\n * Handle importing device configuration from file\n */\nasync function handleImportFile(address: string, deviceType: 'doser' | 'light'): Promise<void> {\n  try {\n    const fileInput = document.getElementById('config-file-input') as HTMLInputElement;\n    const file = fileInput?.files?.[0];\n    if (!file) return;\n\n    // Show file name\n    const fileNameSpan = document.getElementById('file-name');\n    if (fileNameSpan) {\n      fileNameSpan.textContent = `Selected: ${file.name}`;\n    }\n\n    // Show status area\n    const statusDiv = document.getElementById('import-status');\n    if (statusDiv) {\n      statusDiv.style.display = 'block';\n      statusDiv.style.opacity = '0.5';\n    }\n\n    // Validate and read file\n    const text = await file.text();\n    let importData: any;\n    try {\n      importData = JSON.parse(text);\n    } catch (e) {\n      throw new Error('Invalid JSON format in file');\n    }\n\n    // Check if this looks like an exported config\n    if (!importData.config || !importData.address) {\n      throw new Error('File does not appear to be a valid AquaBle export');\n    }\n\n    // Confirm before overwriting\n    const confirmed = confirm(\n      `Replace configuration for ${address}?\\n\\nThis will overwrite the current settings.`\n    );\n    if (!confirmed) {\n      if (statusDiv) statusDiv.style.display = 'none';\n      fileInput.value = '';\n      if (fileNameSpan) fileNameSpan.textContent = '';\n      return;\n    }\n\n    // Show importing message\n    const messageDiv = document.getElementById('import-message');\n    if (messageDiv) {\n      messageDiv.textContent = 'Importing...';\n      messageDiv.style.backgroundColor = '#e3f2fd';\n      messageDiv.style.color = '#1976d2';\n    }\n\n    // Import the configuration\n    const result = await importDeviceConfiguration(address, file);\n\n    // Show success message\n    if (messageDiv) {\n      messageDiv.textContent = 'Configuration imported successfully!';\n      messageDiv.style.backgroundColor = '#e8f5e9';\n      messageDiv.style.color = '#388e3c';\n    }\n\n    // Clear file input\n    fileInput.value = '';\n    if (fileNameSpan) {\n      setTimeout(() => {\n        if (fileNameSpan) fileNameSpan.textContent = '';\n        if (statusDiv) statusDiv.style.display = 'none';\n      }, 3000);\n    }\n\n    // Refresh device configuration in store\n    await deviceStore.getState().actions.refreshDeviceConfig(address, deviceType);\n\n    console.log('Configuration imported successfully');\n  } catch (error) {\n    console.error('Import failed:', error);\n    const messageDiv = document.getElementById('import-message');\n    if (messageDiv) {\n      messageDiv.textContent = `Import failed: ${error instanceof Error ? error.message : 'Unknown error'}`;\n      messageDiv.style.backgroundColor = '#ffebee';\n      messageDiv.style.color = '#c62828';\n    }\n\n    // Clear file input after error\n    const fileInput = document.getElementById('config-file-input') as HTMLInputElement;\n    setTimeout(() => {\n      fileInput.value = '';\n      const fileNameSpan = document.getElementById('file-name');\n      if (fileNameSpan) fileNameSpan.textContent = '';\n    }, 3000);\n  }\n}\n\n// Register global handlers\n(window as any).handleExportConfig = handleExportConfig;\n(window as any).handleImportFile = handleImportFile;\n","/**\n * Main dashboard module - entry point for the refactored dashboard\n */\n\nimport { renderProductionDashboard, refreshDashboard } from \"./render\";\nimport { loadAllDashboardData } from \"./services/data-service\";\nimport { initializePolling, cleanupPolling } from \"./services/polling-service\";\nimport { deviceStore } from \"../../stores/deviceStore\";\nimport { renderWattageCalculator, calculateWattageFromInputs, setWattageTestCase } from \"./components/wattage-calculator\";\nimport \"./modals/device-config-modal\"; // Import the new unified device config modal\nimport \"./modals/scan-connect-modal\"; // Import the scan and connect modal\n\n// Export the main render function\nexport { renderProductionDashboard, refreshDashboard };\n\n// Export data loading\nexport { loadAllDashboardData };\n\n// Export wattage calculator functions for global handlers\nexport { calculateWattageFromInputs, setWattageTestCase };\n\n// Initialize global handlers\nexport function initializeDashboardHandlers(): void {\n  // Tab switching\n  (window as any).switchTab = async (tab: \"overview\" | \"dev\") => {\n    deviceStore.getState().actions.setCurrentView(tab);\n    refreshDashboard();\n  };\n\n  // Device scanning\n  (window as any).handleScanDevices = async () => {\n    const { showScanConnectModal } = await import('./modals/scan-connect-modal');\n    await showScanConnectModal();\n  };\n\n  // Make refreshDashboard globally available\n  (window as any).refreshDashboard = () => {\n    import('./render').then(({ refreshDashboard }) => {\n      refreshDashboard();\n    });\n  };\n\n  // Theme toggle\n  (window as any).toggleTheme = () => {\n    const currentTheme = localStorage.getItem('theme');\n    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n    console.log('Toggling theme from', currentTheme, 'to', newTheme);\n    localStorage.setItem('theme', newTheme);\n    document.documentElement.className = newTheme === 'dark' ? 'dark-theme' : '';\n    console.log('Updated document.documentElement.className to:', document.documentElement.className);\n    (window as any).refreshDashboard();\n  };\n\n  // Device raw data toggle\n  (window as any).toggleDeviceRawData = (deviceId: string) => {\n    const content = document.getElementById(`${deviceId}-content`);\n    const icon = document.getElementById(`${deviceId}-icon`);\n\n    if (content && icon) {\n      const isExpanded = content.style.display !== 'none';\n      content.style.display = isExpanded ? 'none' : 'block';\n      icon.style.transform = isExpanded ? 'rotate(0deg)' : 'rotate(90deg)';\n    }\n  };\n\n  // Data refresh\n  (window as any).handleRefreshAll = async () => {\n    const { refreshDeviceStatusOnly } = await import('./services/data-service');\n\n    // Find the refresh button and update its state\n    const refreshButton = document.querySelector('[onclick*=\"handleRefreshAll\"]') as HTMLButtonElement;\n    const originalContent = refreshButton?.innerHTML;\n\n    try {\n      // Update button to show loading state\n      if (refreshButton) {\n        refreshButton.disabled = true;\n        refreshButton.innerHTML = '<span class=\"scan-spinner\"></span> Refreshing...';\n      }\n\n      // Only refresh device status, not all data\n      // The device card updater will automatically update cards when store changes\n      await refreshDeviceStatusOnly();\n\n      deviceStore.getState().actions.addNotification({\n        type: 'success',\n        message: 'Device status refreshed successfully'\n      });\n    } catch (error) {\n      deviceStore.getState().actions.addNotification({\n        type: 'error',\n        message: `Failed to refresh device status: ${error instanceof Error ? error.message : String(error)}`\n      });\n    } finally {\n      // Restore button state\n      if (refreshButton && originalContent) {\n        refreshButton.disabled = false;\n        refreshButton.innerHTML = originalContent;\n      }\n    }\n  };\n\n  (window as any).handleRefreshDevice = async (address: string) => {\n    const { refreshDeviceStatus } = await import(\"../../api/devices\");\n    const { refreshDeviceStatusOnly } = await import('./services/data-service');\n\n    const refreshButton = document.querySelector(`[onclick*=\"handleRefreshDevice('${address}')\"]`) as HTMLButtonElement;\n    const originalContent = refreshButton?.innerHTML;\n\n    try {\n      if (refreshButton) {\n        refreshButton.disabled = true;\n        refreshButton.innerHTML = '<span class=\"scan-spinner\"></span>';\n      }\n\n      await refreshDeviceStatus(address);\n      await refreshDeviceStatusOnly(); // Refresh all statuses to keep UI consistent\n\n      deviceStore.getState().actions.addNotification({\n        type: 'success',\n        message: `Device ${address} status refreshed`,\n        autoHide: true,\n      });\n    } catch (error) {\n      deviceStore.getState().actions.addNotification({\n        type: 'error',\n        message: `Failed to refresh device status: ${error instanceof Error ? error.message : String(error)}`\n      });\n    } finally {\n      if (refreshButton && originalContent) {\n        refreshButton.disabled = false;\n        refreshButton.innerHTML = originalContent;\n      }\n    }\n  };\n\n  // Initialize wattage calculator when dev tab is loaded\n  setTimeout(() => {\n    if (document.getElementById('watt-red')) {\n      calculateWattageFromInputs();\n    }\n  }, 100);\n\n  // Device management handlers (placeholder for future use)\n  (window as any).handleDeleteDevice = async (address: string, deviceType: string) => {\n    console.log('Delete device:', address, deviceType);\n    // TODO: Implement device deletion via API\n  };\n\n  // Device configuration (nickname, auto-connect, head names)\n  (window as any).handleDeviceSettings = async (address: string, deviceType: string) => {\n    const { showDeviceConfigModal } = await import('./modals/device-config-modal');\n    showDeviceConfigModal(address, deviceType as 'doser' | 'light');\n  };\n\n  // Device command settings modal\n  (window as any).openDeviceSettings = async (address: string, deviceType: string) => {\n    const { showDoserDeviceSettingsModal, showLightDeviceSettingsModal } = await import('./modals/device-modals');\n    \n    // Get device configuration from store\n    const state = deviceStore.getState();\n    const device = deviceType === 'doser' \n      ? state.configurations.dosers.get(address)\n      : state.configurations.lights.get(address);\n\n    if (!device) {\n      deviceStore.getState().actions.addNotification({\n        type: 'error',\n        message: `Device configuration not found for ${deviceType}`,\n        autoHide: true,\n      });\n      return;\n    }\n\n    // Show modal with data from store\n    if (deviceType === 'doser') {\n      showDoserDeviceSettingsModal(device as any);\n    } else if (deviceType === 'light') {\n      showLightDeviceSettingsModal(device as any);\n    }\n  };\n\n  (window as any).toggleDeviceConnection = async (address: string) => {\n    const { connectDevice, disconnectDevice } = await import(\"../../api/devices\");\n    const { refreshDeviceStatusOnly } = await import('./services/data-service');\n\n    // Find and update the connect button\n    const connectButton = document.querySelector(`[onclick*=\"toggleDeviceConnection('${address}')\"]`) as HTMLButtonElement;\n    if (connectButton) {\n      const originalText = connectButton.textContent?.trim();\n      connectButton.disabled = true;\n      connectButton.classList.add('connecting');\n      connectButton.textContent = 'Connecting...';\n    }\n\n    try {\n      // Check current connection state to determine action\n      const zustandState = deviceStore.getState();\n      const device = zustandState.devices.get(address)?.status;\n      const isCurrentlyConnected = device?.connected;\n\n      if (isCurrentlyConnected) {\n        // Disconnect if currently connected\n        await disconnectDevice(address);\n        await refreshDeviceStatusOnly();\n\n        // Device card updater will automatically update the card when store changes\n        // No need for refreshDashboard() - targeted update happens automatically\n\n        deviceStore.getState().actions.addNotification({\n          type: 'success',\n          message: `Successfully disconnected from device`\n        });\n\n        // Update button text to reflect new state (immediate feedback)\n        if (connectButton) {\n          connectButton.disabled = false;\n          connectButton.classList.remove('connecting');\n          connectButton.innerHTML = 'Connect';\n        }\n      } else {\n        // Connect if currently disconnected\n        const connectedStatus = await connectDevice(address);\n        \n        // Immediately update the Zustand store with the connected status\n        deviceStore.getState().actions.updateDevice(address, connectedStatus);\n        \n        // Also refresh all device statuses to get updated \"connected\" states for other devices\n        await refreshDeviceStatusOnly();\n\n        // Device card updater will automatically update the card when store changes\n        // No need for refreshDashboard() - targeted update happens automatically\n\n        deviceStore.getState().actions.addNotification({\n          type: 'success',\n          message: `Successfully connected to device`\n        });\n\n        // Update button text to reflect new state (immediate feedback)\n        if (connectButton) {\n          connectButton.disabled = false;\n          connectButton.innerHTML = 'Disconnect';\n        }\n      }\n    } catch (error) {\n      deviceStore.getState().actions.addNotification({\n        type: 'error',\n        message: `Failed to ${connectButton?.textContent?.includes('Disconnect') ? 'disconnect' : 'connect'} to device: ${error instanceof Error ? error.message : 'Unknown error'}`\n      });\n\n      // Restore button to original state\n      if (connectButton) {\n        connectButton.disabled = false;\n        connectButton.classList.remove('connecting');\n        connectButton.innerHTML = connectButton.textContent?.includes('Disconnect') ? 'Disconnect' : 'Connect';\n      }\n    }\n  };\n\n  /*\n   * ====================================================================\n   * DEVICE COMMAND HANDLERS REMOVED - Phase 2 Cleanup\n   * ====================================================================\n   * The following handlers have been removed as part of dashboard overhaul:\n   * - handleClearAutoSettings\n   * - switchLightSettingsTab\n   * - handleTurnLightOn/Off\n   * - handleSetManualMode\n   * - handleEnableAutoMode\n   * - handleManualBrightness\n   * - handleAddAutoProgram\n   * - handleDeleteAutoProgram\n   * - handleDeleteSpecificAutoProgram\n   * - handleEditAutoProgram\n   * - selectLightMode\n   * - selectHead\n   * - getLightConfiguration\n   * - deleteAutoSetting\n   * - testLightModal\n   *\n   * These handlers provided individual device control functionality that\n   * will be replaced with a new robust command system in Phase 3.\n   * ====================================================================\n   */\n\n  // Save device card settings and flip back\n  (window as any).saveDeviceCardSettings = async (address: string) => {\n    const { updateDeviceNaming, updateDeviceSettings } = await import('../../api/configurations');\n    \n    // Get the flip card and extract input values\n    const card = document.querySelector(`[data-device-address=\"${address}\"]`);\n    if (!card) return;\n\n    const nameInput = card.querySelector('.device-name-input') as HTMLInputElement;\n    const headInputs = card.querySelectorAll('.head-name-input') as NodeListOf<HTMLInputElement>;\n    const autoReconnectCheckbox = card.querySelector('.auto-reconnect-checkbox') as HTMLInputElement;\n    \n    try {\n      const newName = nameInput?.value?.trim();\n      \n      // Build head names object if this is a doser\n      const headNames: Record<number, string> = {};\n      if (headInputs.length > 0) {\n        headInputs.forEach((input) => {\n          const headIndex = parseInt(input.dataset.head || '0');\n          const headName = input.value.trim();\n          if (headName) {\n            headNames[headIndex] = headName;\n          }\n        });\n      }\n\n      // Update device naming (name and head names)\n      const namingUpdate: any = {\n        name: newName || undefined,\n      };\n      if (Object.keys(headNames).length > 0) {\n        namingUpdate.headNames = headNames;\n      }\n\n      await updateDeviceNaming(address, namingUpdate);\n\n      // Update device settings (auto-reconnect)\n      if (autoReconnectCheckbox) {\n        await updateDeviceSettings(address, {\n          autoReconnect: autoReconnectCheckbox.checked,\n        });\n      }\n\n      // Flip card back and show success notification\n      (window as any).toggleDeviceCardFlip(address);\n      deviceStore.getState().actions.addNotification({\n        type: 'success',\n        message: 'Device settings saved',\n        autoHide: true,\n      });\n    } catch (error) {\n      console.error('Failed to save device settings:', error);\n      deviceStore.getState().actions.addNotification({\n        type: 'error',\n        message: 'Failed to save device settings',\n        autoHide: true,\n      });\n    }\n  };\n\n  // Export device configuration\n  (window as any).handleExportDeviceConfig = async (address: string) => {\n    const { showImportExportModal } = await import('./modals/import-export-modal');\n    const state = deviceStore.getState();\n    const doserConfig = state.configurations.dosers.get(address);\n    const lightConfig = state.configurations.lights.get(address);\n    const deviceType = doserConfig ? 'doser' : 'light';\n    \n    await showImportExportModal(address, deviceType);\n  };\n\n  // Import device configuration\n  (window as any).handleImportDeviceConfig = async (address: string) => {\n    const { showImportExportModal } = await import('./modals/import-export-modal');\n    const state = deviceStore.getState();\n    const doserConfig = state.configurations.dosers.get(address);\n    const lightConfig = state.configurations.lights.get(address);\n    const deviceType = doserConfig ? 'doser' : 'light';\n    \n    await showImportExportModal(address, deviceType);\n  };\n}\n\n// Auto-load data on module import\n// loadAllDashboardData(); // Moved to productionMain.ts\n","// Notification system for user feedback\n\nimport { useNotifications, useActions } from \"../stores/deviceStore\";\nimport type { Notification } from \"../types/store\";\n\nexport function createNotificationSystem(): void {\n  const container = document.createElement(\"div\");\n  container.id = \"notification-container\";\n  container.className = \"notification-container\";\n  document.body.appendChild(container);\n\n  // Style the notification container\n  const style = document.createElement(\"style\");\n  style.textContent = `\n    .notification-container {\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      z-index: 1000;\n      max-width: 400px;\n      pointer-events: none;\n    }\n\n    .notification {\n      background: white;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      margin-bottom: 12px;\n      padding: 16px;\n      pointer-events: auto;\n      transform: translateX(100%);\n      transition: all 0.3s ease;\n      border-left: 4px solid #ccc;\n    }\n\n    .notification.show {\n      transform: translateX(0);\n    }\n\n    .notification.info {\n      border-left-color: #3b82f6;\n    }\n\n    .notification.success {\n      border-left-color: #10b981;\n    }\n\n    .notification.warning {\n      border-left-color: #f59e0b;\n    }\n\n    .notification.error {\n      border-left-color: #ef4444;\n    }\n\n    .notification-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 8px;\n    }\n\n    .notification-type {\n      font-weight: 600;\n      text-transform: capitalize;\n      font-size: 14px;\n    }\n\n    .notification-close {\n      background: none;\n      border: none;\n      font-size: 18px;\n      cursor: pointer;\n      color: #6b7280;\n      padding: 0;\n      width: 20px;\n      height: 20px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    .notification-close:hover {\n      color: #374151;\n    }\n\n    .notification-message {\n      color: #374151;\n      font-size: 14px;\n      line-height: 1.4;\n    }\n\n    .notification-time {\n      color: #6b7280;\n      font-size: 12px;\n      margin-top: 8px;\n    }\n  `;\n  document.head.appendChild(style);\n}\n\nexport function renderNotifications(): void {\n  const container = document.getElementById(\"notification-container\");\n  if (!container) return;\n\n  const notifications = useNotifications();\n  const { removeNotification } = useActions();\n\n  // Clear existing notifications\n  container.innerHTML = \"\";\n\n  // Render each notification\n  notifications.forEach((notification) => {\n    const element = createNotificationElement(notification, removeNotification);\n    container.appendChild(element);\n\n    // Trigger show animation\n    requestAnimationFrame(() => {\n      element.classList.add(\"show\");\n    });\n  });\n}\n\nfunction createNotificationElement(\n  notification: Notification,\n  onRemove: (id: string) => void\n): HTMLElement {\n  const element = document.createElement(\"div\");\n  element.className = `notification ${notification.type}`;\n\n  const timeAgo = getTimeAgo(notification.timestamp);\n\n  element.innerHTML = `\n    <div class=\"notification-header\">\n      <span class=\"notification-type\">${notification.type}</span>\n      <button class=\"notification-close\" data-id=\"${notification.id}\">×</button>\n    </div>\n    <div class=\"notification-message\">${escapeHtml(notification.message)}</div>\n    <div class=\"notification-time\">${timeAgo}</div>\n  `;\n\n  // Add click handler for close button\n  const closeBtn = element.querySelector(\".notification-close\") as HTMLButtonElement;\n  const removeNotification = () => {\n    element.classList.remove(\"show\");\n    setTimeout(() => {\n      onRemove(notification.id);\n    }, 300); // Wait for animation\n  };\n\n  closeBtn.addEventListener(\"click\", removeNotification);\n\n  // Auto-dismiss after 5 seconds\n  setTimeout(() => {\n    // Check if notification still exists (user hasn't manually closed it)\n    if (element.parentNode) {\n      removeNotification();\n    }\n  }, 5000);\n\n  return element;\n}\n\nfunction getTimeAgo(timestamp: number): string {\n  const now = Date.now();\n  const diff = now - timestamp;\n\n  if (diff < 1000) return \"Just now\";\n  if (diff < 60000) return `${Math.floor(diff / 1000)}s ago`;\n  if (diff < 3600000) return `${Math.floor(diff / 60000)}m ago`;\n  if (diff < 86400000) return `${Math.floor(diff / 3600000)}h ago`;\n\n  return new Date(timestamp).toLocaleDateString();\n}\n\nfunction escapeHtml(text: string): string {\n  const div = document.createElement(\"div\");\n  div.textContent = text;\n  return div.innerHTML;\n}\n\n// Auto-update notification timestamps\nsetInterval(() => {\n  const container = document.getElementById(\"notification-container\");\n  if (!container) return;\n\n  const timeElements = container.querySelectorAll(\".notification-time\");\n  const notifications = useNotifications();\n\n  timeElements.forEach((element, index) => {\n    const notification = notifications[index];\n    if (notification) {\n      element.textContent = getTimeAgo(notification.timestamp);\n    }\n  });\n}, 30000); // Update every 30 seconds\n","/**\n * Dynamic device card updater\n * \n * PROBLEM:\n * Previously, any change to a device (connection, status update, settings modification)\n * triggered a full re-render of the entire dashboard by replacing the HTML with\n * dashboardElement.outerHTML = renderProductionDashboard(). This caused:\n * - Flickering and poor UX as the entire page rebuilt\n * - Loss of scroll position\n * - Inefficient DOM operations\n * - Breaking of any active UI interactions\n * \n * SOLUTION:\n * This module provides intelligent, targeted DOM updates for device cards without\n * full page reloads. It:\n * 1. Subscribes directly to the Zustand deviceStore\n * 2. Compares previous device state to new state (intelligent diffing)\n * 3. Performs targeted DOM operations:\n *    - Add new device cards (with fade-in animation)\n *    - Remove disconnected device cards (with fade-out animation)\n *    - Update existing device cards (preserving scroll position)\n * 4. Updates only the specific cards that changed, leaving the rest untouched\n * \n * BENEFITS:\n * - Smooth, flicker-free updates\n * - Scroll position preserved\n * - Better performance (only changed elements re-rendered)\n * - Animations for adds/removes provide visual feedback\n * - Active UI interactions (modals, buttons) remain stable\n * \n * USAGE:\n * Call initializeDeviceCardUpdater() once during app initialization.\n * All device changes are then handled automatically via Zustand subscriptions.\n */\n\nimport { deviceStore } from \"../../../stores/deviceStore\";\nimport type { DeviceState } from \"../../../types/store\";\nimport { renderDeviceSection } from \"../devices/device-card\";\nimport type { DeviceStatus } from \"../../../types/api\";\n\n// Track previous device state to detect changes\nlet previousDeviceStates = new Map<string, DeviceState>();\n\n/**\n * Initialize the device card updater\n */\nexport function initializeDeviceCardUpdater(): void {\n  // Subscribe to all state changes but intelligently filter to device-only changes\n  deviceStore.subscribe((state) => {\n    const currentDevices = state.devices;\n    \n    // Only process if we're on the overview tab\n    const isOverviewActive = state.ui.currentView === \"overview\";\n    if (!isOverviewActive) {\n      // Just update our tracking state\n      previousDeviceStates = new Map(currentDevices);\n      return;\n    }\n    \n    // Check if any device actually changed by comparing to previous state\n    if (!hasAnyDeviceChanged(currentDevices, previousDeviceStates)) {\n      // No device changes, skip DOM update\n      return;\n    }\n    \n    // Detect changes and update DOM\n    updateDeviceCards(currentDevices);\n    \n    // Update tracking state\n    previousDeviceStates = new Map(currentDevices);\n  });\n  \n  console.log(\"Device card updater initialized with intelligent filtering\");\n}\n\n/**\n * Check if any device in the map has actually changed\n */\nfunction hasAnyDeviceChanged(\n  current: Map<string, DeviceState>,\n  previous: Map<string, DeviceState>\n): boolean {\n  // Different number of devices = change\n  if (current.size !== previous.size) {\n    return true;\n  }\n  \n  // Check each device\n  for (const [address, currentDevice] of current.entries()) {\n    const previousDevice = previous.get(address);\n    \n    // New device\n    if (!previousDevice) {\n      return true;\n    }\n    \n    // Device changed\n    if (hasDeviceChanged(previousDevice, currentDevice)) {\n      return true;\n    }\n  }\n  \n  // Check for removed devices\n  for (const address of previous.keys()) {\n    if (!current.has(address)) {\n      return true;\n    }\n  }\n  \n  return false;\n}\n\n/**\n * Compare device states and perform targeted DOM updates\n */\nfunction updateDeviceCards(currentDevices: Map<string, DeviceState>): void {\n  const previousAddresses = new Set(previousDeviceStates.keys());\n  const currentAddresses = new Set(currentDevices.keys());\n  \n  // Filter to only connected devices (overview tab only shows connected)\n  const previousConnected = Array.from(previousDeviceStates.values())\n    .filter(d => d.status?.connected)\n    .map(d => d.address);\n  const currentConnected = Array.from(currentDevices.values())\n    .filter(d => d.status?.connected)\n    .map(d => d.address);\n  \n  const previousConnectedSet = new Set(previousConnected);\n  const currentConnectedSet = new Set(currentConnected);\n  \n  // Find devices that changed connection state or were added/removed\n  const added = currentConnected.filter(addr => !previousConnectedSet.has(addr));\n  const removed = previousConnected.filter(addr => !currentConnectedSet.has(addr));\n  const updated = currentConnected.filter(addr => {\n    if (added.includes(addr)) return false; // Skip newly added\n    const prev = previousDeviceStates.get(addr);\n    const curr = currentDevices.get(addr);\n    return prev && curr && hasDeviceChanged(prev, curr);\n  });\n  \n  // Only log if there are actual changes\n  if (added.length > 0 || removed.length > 0 || updated.length > 0) {\n    console.log(`🔄 Device card updates: +${added.length} -${removed.length} ~${updated.length}`);\n  }\n  \n  // Handle empty state transitions\n  if (previousConnected.length === 0 && currentConnected.length > 0) {\n    // Transitioning from empty state to having devices - need full refresh\n    console.log('Transitioning from empty state to devices, full refresh needed');\n    refreshFullDashboard();\n    return;\n  } else if (previousConnected.length > 0 && currentConnected.length === 0) {\n    // Transitioning from devices to empty state - need full refresh\n    console.log('Transitioning to empty state, full refresh needed');\n    refreshFullDashboard();\n    return;\n  }\n  \n  // Perform DOM updates\n  if (removed.length > 0) {\n    removed.forEach(address => removeDeviceCard(address));\n  }\n  \n  if (added.length > 0) {\n    added.forEach(address => {\n      const device = currentDevices.get(address);\n      if (device?.status) {\n        addDeviceCard(device);\n      }\n    });\n  }\n  \n  if (updated.length > 0) {\n    updated.forEach(address => {\n      const device = currentDevices.get(address);\n      if (device?.status) {\n        updateDeviceCard(device);\n      }\n    });\n  }\n  \n  // Update device count badge (only if needed)\n  if (previousConnected.length !== currentConnected.length) {\n    updateDeviceCountBadge(currentConnected.length);\n  }\n}\n\n/**\n * Check if a device state has meaningfully changed\n */\nfunction hasDeviceChanged(prev: DeviceState, curr: DeviceState): boolean {\n  if (!prev.status || !curr.status) return true;\n  \n  // Check connection state\n  if (prev.status.connected !== curr.status.connected) return true;\n  \n  // Check loading state\n  if (prev.isLoading !== curr.isLoading) return true;\n  \n  // Check error state\n  if (prev.error !== curr.error) return true;\n  \n  // Check if status data changed (stringify for deep comparison)\n  const prevStatus = JSON.stringify(prev.status);\n  const currStatus = JSON.stringify(curr.status);\n  if (prevStatus !== currStatus) return true;\n  \n  // Check if configuration changed (name, auto_connect, etc)\n  const prevConfig = JSON.stringify(prev.configuration);\n  const currConfig = JSON.stringify(curr.configuration);\n  if (prevConfig !== currConfig) return true;\n  \n  return false;\n}\n\n/**\n * Add a new device card to the DOM\n */\nfunction addDeviceCard(device: DeviceState): void {\n  if (!device.status) return;\n  \n  const container = findDeviceCardContainer();\n  if (!container) {\n    console.warn(\"Device card container not found, falling back to full refresh\");\n    refreshFullDashboard();\n    return;\n  }\n  \n  // Create device status object with address\n  const deviceWithAddress = {\n    ...device.status,\n    address: device.address\n  };\n  \n  // Render a temporary container to hold the new card HTML\n  const tempDiv = document.createElement('div');\n  tempDiv.innerHTML = renderDeviceSection(\"\", [deviceWithAddress]);\n  \n  // Extract the device card from the rendered section\n  const newCard = tempDiv.querySelector('.device-card');\n  if (newCard) {\n    // Add with a fade-in animation\n    newCard.classList.add('device-card-entering');\n    container.appendChild(newCard);\n    \n    // Trigger reflow to ensure animation plays\n    newCard.getBoundingClientRect();\n    \n    // Remove animation class after animation completes\n    setTimeout(() => {\n      newCard.classList.remove('device-card-entering');\n    }, 300);\n  }\n}\n\n/**\n * Remove a device card from the DOM\n */\nfunction removeDeviceCard(address: string): void {\n  const card = findDeviceCardElement(address);\n  if (card) {\n    // Add fade-out animation\n    card.classList.add('device-card-leaving');\n    \n    // Remove after animation completes\n    setTimeout(() => {\n      card.remove();\n    }, 300);\n  }\n}\n\n/**\n * Update an existing device card in the DOM\n */\nfunction updateDeviceCard(device: DeviceState): void {\n  if (!device.status) return;\n  \n  const existingCard = findDeviceCardElement(device.address);\n  if (!existingCard) {\n    console.warn(`Device card not found for ${device.address}, adding it`);\n    addDeviceCard(device);\n    return;\n  }\n  \n  // Create device status object with address\n  const deviceWithAddress = {\n    ...device.status,\n    address: device.address\n  };\n  \n  // Render the updated card\n  const tempDiv = document.createElement('div');\n  tempDiv.innerHTML = renderDeviceSection(\"\", [deviceWithAddress]);\n  \n  const updatedCard = tempDiv.querySelector('.device-card');\n  if (updatedCard) {\n    // Quick check: if HTML is identical, skip the update entirely\n    if (existingCard.innerHTML === updatedCard.innerHTML) {\n      console.log(`Device ${device.address} HTML unchanged, skipping update`);\n      return;\n    }\n    \n    // Preserve scroll position\n    const scrollTop = window.scrollY;\n    \n    // Replace the old card with the new one\n    existingCard.replaceWith(updatedCard);\n    \n    // Restore scroll position\n    window.scrollTo(0, scrollTop);\n    \n    console.log(`Updated device card for ${device.address}`);\n  }\n}\n\n/**\n * Update the device count badge\n */\nfunction updateDeviceCountBadge(count: number): void {\n  const badge = document.querySelector('.card-header .badge');\n  if (badge) {\n    badge.textContent = String(count);\n  }\n}\n\n/**\n * Find the device card container element\n */\nfunction findDeviceCardContainer(): HTMLElement | null {\n  // The container is the grid div within the \"Connected Devices\" card\n  const overviewPanel = document.getElementById('overview-panel');\n  if (!overviewPanel) return null;\n  \n  // Find the grid container (has display: grid style)\n  const gridContainer = overviewPanel.querySelector('[style*=\"display: grid\"]') as HTMLElement;\n  return gridContainer;\n}\n\n/**\n * Find a specific device card element by address\n */\nfunction findDeviceCardElement(address: string): HTMLElement | null {\n  // Device cards have onclick handlers with the device address\n  const cards = document.querySelectorAll('.device-card');\n  \n  for (const card of Array.from(cards)) {\n    // Check if any button in this card references this address\n    const buttons = card.querySelectorAll('button[onclick]');\n    for (const button of Array.from(buttons)) {\n      const onclick = button.getAttribute('onclick');\n      if (onclick?.includes(address)) {\n        return card as HTMLElement;\n      }\n    }\n  }\n  \n  return null;\n}\n\n/**\n * Fallback to full dashboard refresh\n */\nfunction refreshFullDashboard(): void {\n  import('../render').then(({ refreshDashboard }) => {\n    refreshDashboard();\n  }).catch(err => {\n    console.warn('Could not refresh dashboard:', err);\n  });\n}\n","// State subscription system for automatic UI updates\n// \n// SIMPLIFIED: This file now provides a thin wrapper around Zustand's built-in\n// subscription system. The complex bridging logic has been removed since all\n// state is now managed by deviceStore.\n//\n// Uses targeted DOM updates for device cards instead of full page refreshes.\n\nimport { deviceStore } from \"../stores/deviceStore\";\nimport { renderNotifications } from \"./notifications\";\nimport { initializeDeviceCardUpdater } from \"./aquarium-dashboard/utils/device-card-updater\";\n\nlet unsubscribeCallbacks: (() => void)[] = [];\n\nexport function setupStateSubscriptions(): void {\n  console.log('Setting up state subscriptions with targeted device card updates');\n  \n  // Initialize the dynamic device card updater\n  // This handles all device card additions/removals/updates without full page refresh\n  initializeDeviceCardUpdater();\n  \n  // Subscribe to notification changes only\n  let previousNotificationCount = 0;\n  const unsubscribeNotifications = deviceStore.subscribe(\n    (state) => {\n      const notificationCount = state.ui.notifications.length;\n      if (notificationCount !== previousNotificationCount) {\n        previousNotificationCount = notificationCount;\n        renderNotifications();\n      }\n    }\n  );\n\n  // Subscribe to view changes - these require full dashboard refresh\n  let previousView = deviceStore.getState().ui.currentView;\n  const unsubscribeView = deviceStore.subscribe(\n    (state) => {\n      if (state.ui.currentView !== previousView) {\n        previousView = state.ui.currentView;\n        console.log(`📱 View changed to: ${previousView}`);\n        refreshDashboard();\n      }\n    }\n  );\n\n  // Store cleanup function\n  unsubscribeCallbacks = [unsubscribeNotifications, unsubscribeView];\n  \n  console.log('State subscriptions active with targeted updates');\n}\n\n/**\n * Refresh the dashboard by importing and calling the render function\n */\nfunction refreshDashboard(): void {\n  import('./aquarium-dashboard/render').then(({ refreshDashboard }) => {\n    refreshDashboard();\n  }).catch(err => {\n    console.warn('Could not refresh dashboard:', err);\n  });\n}\n\nexport function cleanupStateSubscriptions(): void {\n  console.log('Cleaning up state subscriptions');\n  unsubscribeCallbacks.forEach(cleanup => cleanup());\n  unsubscribeCallbacks = [];\n}\n\n// Legacy function - no longer needed with Zustand\nexport function throttledDashboardUpdate(): void {\n  console.warn('throttledDashboardUpdate is deprecated. Zustand handles updates automatically.');\n}\n","/**\n * Centralized polling service for device status\n * Ensures only one active polling loop runs instead of multiple component-level polls\n */\n\nimport { getDeviceStatus } from \"../../../api/devices\";\nimport { deviceStore } from \"../../../stores/deviceStore\";\n\ninterface PollingState {\n  isActive: boolean;\n  intervalId: number | null;\n  intervalMs: number;\n  lastPollTime: number;\n  failureCount: number;\n  maxFailures: number;\n}\n\nclass PollingService {\n  private state: PollingState = {\n    isActive: false,\n    intervalId: null,\n    intervalMs: 30000, // Default 30 seconds\n    lastPollTime: 0,\n    failureCount: 0,\n    maxFailures: 5, // Stop polling after 5 consecutive failures\n  };\n\n  private subscribers: ((status: any) => void)[] = [];\n\n  /**\n   * Start polling device status at specified interval\n   */\n  startPolling(intervalMs: number = 30000): void {\n    if (this.state.isActive) {\n      console.log(\"ℹ️  Polling already active\");\n      return;\n    }\n\n    this.state.intervalMs = intervalMs;\n    this.state.isActive = true;\n    this.state.failureCount = 0;\n\n    console.log(`🔄 Starting device status polling (interval: ${intervalMs}ms)`);\n\n    // Initial poll immediately\n    this.poll();\n\n    // Set up interval for subsequent polls\n    this.state.intervalId = window.setInterval(() => {\n      this.poll();\n    }, intervalMs);\n  }\n\n  /**\n   * Stop polling\n   */\n  stopPolling(): void {\n    if (!this.state.isActive) {\n      console.log(\"ℹ️  Polling not active\");\n      return;\n    }\n\n    if (this.state.intervalId !== null) {\n      clearInterval(this.state.intervalId);\n      this.state.intervalId = null;\n    }\n\n    this.state.isActive = false;\n    this.state.failureCount = 0;\n    console.log(\"⏸️  Device status polling stopped\");\n  }\n\n  /**\n   * Change polling interval\n   */\n  setInterval(intervalMs: number): void {\n    this.state.intervalMs = intervalMs;\n    if (this.state.isActive) {\n      // Restart with new interval\n      this.stopPolling();\n      this.startPolling(intervalMs);\n    }\n  }\n\n  /**\n   * Subscribe to polling updates\n   */\n  subscribe(callback: (status: any) => void): () => void {\n    this.subscribers.push(callback);\n    // Return unsubscribe function\n    return () => {\n      this.subscribers = this.subscribers.filter(cb => cb !== callback);\n    };\n  }\n\n  /**\n   * Execute a single poll\n   */\n  private async poll(): Promise<void> {\n    try {\n      this.state.lastPollTime = Date.now();\n      const status = await getDeviceStatus();\n\n      // Reset failure count on successful poll\n      this.state.failureCount = 0;\n\n      // Update Zustand store\n      const actions = deviceStore.getState().actions;\n      const state = deviceStore.getState();\n      const existingDevices = state.devices;\n      \n      for (const [address, deviceStatus] of Object.entries(status)) {\n        // Update device status\n        actions.updateDevice(address, deviceStatus);\n        \n        // Fetch configuration if not already loaded\n        const isDoser = deviceStatus.device_type === 'doser';\n        const hasConfig = isDoser \n          ? state.configurations.dosers.has(address)\n          : state.configurations.lights.has(address);\n        \n        if (!hasConfig) {\n          console.log(`📥 Fetching configuration for ${address}...`);\n          actions.refreshDeviceConfig(address, deviceStatus.device_type as 'doser' | 'light')\n            .catch(err => console.error(`Failed to load config for ${address}:`, err));\n        }\n      }\n\n      // Notify subscribers\n      this.subscribers.forEach(callback => callback(status));\n\n      console.log(`✅ Status poll completed (${Object.keys(status).length} devices)`);\n    } catch (error) {\n      this.state.failureCount++;\n      console.error(`❌ Status poll failed (${this.state.failureCount}/${this.state.maxFailures}):`, error);\n\n      // Stop polling after too many failures\n      if (this.state.failureCount >= this.state.maxFailures) {\n        console.error(\"⚠️  Too many polling failures, stopping polling service\");\n        this.stopPolling();\n      }\n    }\n  }\n\n  /**\n   * Get current polling state\n   */\n  getState(): Readonly<PollingState> {\n    return Object.freeze({ ...this.state });\n  }\n\n  /**\n   * Force immediate poll (useful for manual refresh)\n   */\n  async forcePoll(): Promise<void> {\n    if (!this.state.isActive) {\n      console.log(\"ℹ️  Polling not active, starting temporary poll\");\n    }\n    await this.poll();\n  }\n}\n\nexport const pollingService = new PollingService();\n\n/**\n * Initialize polling on dashboard load\n */\nexport function initializePolling(intervalMs: number = 30000): void {\n  pollingService.startPolling(intervalMs);\n}\n\n/**\n * Cleanup polling on dashboard unload\n */\nexport function cleanupPolling(): void {\n  pollingService.stopPolling();\n}\n\n/**\n * Get debug info about polling state\n */\nexport function getPollingDebugInfo(): Record<string, any> {\n  const state = pollingService.getState();\n  return {\n    isActive: state.isActive,\n    intervalMs: state.intervalMs,\n    lastPollTime: state.lastPollTime,\n    failureCount: state.failureCount,\n    subscriberCount: (pollingService as any).subscribers?.length || 0,\n  };\n}\n","/**\n * Production Dashboard - Main Entry Point\n *\n * This is the production-ready dashboard that will be the foundation for the first release.\n * Features:\n * - Device configuration management (view, edit, delete)\n * - Saved configuration profiles\n * - Enhanced device management with naming and grouping\n * - Clean, professional UI\n */\n\nimport { renderProductionDashboard, initializeDashboardHandlers } from \"./ui/aquarium-dashboard/dashboard\";\nimport { createNotificationSystem } from \"./ui/notifications\";\nimport { setupStateSubscriptions } from \"./ui/stateSubscriptions\";\nimport { initializePolling, cleanupPolling } from \"./ui/aquarium-dashboard/services/polling-service\";\nimport \"./ui/dashboard.css\";\n\n// Guard against double initialization (e.g., from Vite HMR)\nlet isInitializing = false;\nlet isInitialized = false;\n\n/**\n * Ensure the <base> tag is ready before making any API calls.\n * In Ingress mode, the backend dynamically injects a base tag with the Ingress path.\n * We need to wait a tick for the browser to process it.\n */\nasync function ensureBaseTagReady(): Promise<void> {\n  return new Promise((resolve) => {\n    // Check if base tag exists\n    const baseTag = document.querySelector('base');\n    if (baseTag) {\n      console.log(`✅ Base tag found: ${baseTag.href}`);\n      // Give the browser one more tick to fully process it\n      setTimeout(resolve, 0);\n    } else {\n      console.log(\"ℹ️  No base tag found (direct access mode)\");\n      resolve();\n    }\n  });\n}\n\n// Initialize the production dashboard\nasync function init() {\n  console.log(\"productionMain.init() called\");\n  \n  if (isInitializing) {\n    console.warn(\"Already initializing, skipping duplicate call\");\n    return;\n  }\n  \n  if (isInitialized) {\n    console.warn(\"Already initialized, skipping duplicate call\");\n    return;\n  }\n  \n  isInitializing = true;\n  \n  try {\n    console.log(\"Initializing Production Dashboard...\");\n\n    // CRITICAL: Ensure base tag is available before any API calls\n    // When running through Ingress, the backend injects a <base> tag dynamically\n    // We need to wait for it to be processed by the browser\n    await ensureBaseTagReady();\n\n    const appElement = document.getElementById(\"app\");\n    if (!appElement) {\n      throw new Error(\"App element not found\");\n    }\n\n    // Initialize theme from localStorage\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme === 'dark') {\n      document.documentElement.className = 'dark-theme';\n    }\n\n    // Initialize notification system\n    createNotificationSystem();\n\n    // Initialize dashboard handlers\n    initializeDashboardHandlers();\n\n    // Render the dashboard\n    console.log(\"Rendering dashboard HTML...\");\n    appElement.innerHTML = renderProductionDashboard();\n\n    // Load dashboard data BEFORE setting up subscriptions to avoid duplicate loads\n    console.log(\"Loading dashboard data...\");\n    const { loadAllDashboardData, refreshDashboard } = await import(\"./ui/aquarium-dashboard/dashboard\");\n    await loadAllDashboardData();\n    console.log(\"Dashboard data loaded\");\n\n    // Re-render dashboard with loaded data\n    console.log(\"Refreshing dashboard with loaded data...\");\n    refreshDashboard();\n\n    // Setup state subscriptions for automatic updates AFTER initial load completes\n    console.log(\"Setting up state subscriptions...\");\n    setupStateSubscriptions();\n\n    // Initialize centralized polling for device status (replaces component-level polling)\n    console.log(\"Starting centralized device status polling...\");\n    initializePolling(30000); // Poll every 30 seconds\n\n    // Register cleanup on page unload\n    window.addEventListener(\"beforeunload\", () => {\n      cleanupPolling();\n    });\n\n    console.log(\"Production Dashboard initialized successfully\");\n    isInitialized = true;\n  } catch (error) {\n    console.error(\"Failed to initialize Production Dashboard:\", error);\n\n    const appElement = document.getElementById(\"app\");\n    if (appElement) {\n      appElement.innerHTML = `\n        <div style=\"padding: 40px; text-align: center;\">\n          <h1 style=\"color: #dc2626;\">Failed to Load Dashboard</h1>\n          <p style=\"color: #64748b;\">${error instanceof Error ? error.message : String(error)}</p>\n          <button\n            onclick=\"location.reload()\"\n            style=\"padding: 10px 20px; margin-top: 20px; background: #3b82f6; color: white; border: none; border-radius: 6px; cursor: pointer;\"\n          >\n            Retry\n          </button>\n        </div>\n      `;\n    }\n  } finally {\n    isInitializing = false;\n  }\n}\n\n// Start the application when DOM is ready\nif (document.readyState === \"loading\") {\n  document.addEventListener(\"DOMContentLoaded\", init);\n} else {\n  init();\n}\n"],"file":"assets/main-CJFjn01Q.js"}